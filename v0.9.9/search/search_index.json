{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"What is Claudie","text":"<p>Claudie is a platform for managing multi-cloud and hybrid-cloud Kubernetes clusters. These Kubernetes clusters can mix and match nodepools from various cloud providers, e.g. a single cluster can have a nodepool in AWS, another in GCP and another one on-premises. This is our opinionated way to build multi-cloud and hybrid-cloud Kubernetes infrastructure. On top of that Claudie supports Cluster Autoscaler on the managed clusters.</p>"},{"location":"#vision","title":"Vision","text":"<p>The purpose of Claudie is to become the final Kubernetes engine you'll ever need. It aims to build clusters that leverage features and costs across multiple cloud vendors and on-prem datacenters. A Kubernetes that you won't ever need to migrate away from.</p>"},{"location":"#use-cases","title":"Use cases","text":"<p>Claudie has been built as an answer to the following Kubernetes challenges:</p> <ul> <li>Cost savings</li> <li>Data locality &amp; compliance (e.g. GDPR)</li> <li>Managed Kubernetes for providers that do not offer it</li> <li>Cloud bursting</li> <li>Service interconnet</li> </ul> <p>You can read more here.</p>"},{"location":"#features","title":"Features","text":"<p>Claudie covers you with the following features functionalities:</p> <ul> <li>Manage multi-cloud and hybrid-cloud Kubernetes clusters</li> <li>Management via IaC</li> <li>Fast scale-up/scale-down of your infrastructure</li> <li>Loadbalancing</li> <li>Persistent storage volumes</li> </ul> <p>See more in How Claudie works sections.</p>"},{"location":"#what-to-do-next","title":"What to do next","text":"<p>In case you are not sure where to go next, you can just simply start with our Getting Started Guide or read our documentation sitemap.</p> <p>If you need help or want to have a chat with us, feel free to join our channel on kubernetes Slack workspace (get invite here).</p>"},{"location":"CHANGELOG/changelog-0.1.x/","title":"Claudie <code>v0.1</code>","text":"<p>The first official release of Claudie</p>"},{"location":"CHANGELOG/changelog-0.1.x/#deployment","title":"Deployment","text":"<p>To deploy the Claudie <code>v0.1.X</code>, please:</p> <ol> <li> <p>Download the archive and checksums from the release page</p> </li> <li> <p>Verify the archive with the <code>sha256</code> (optional)</p> <pre><code>sha256sum -c --ignore-missing checksums.txt\n</code></pre> <p>If valid, output is, depending on the archive downloaded</p> <pre><code>claudie.tar.gz: OK\n</code></pre> <p>or</p> <pre><code>claudie.zip: OK\n</code></pre> <p>or both.</p> </li> <li> <p>Lastly, unpack the archive and deploy using <code>kubectl</code></p> <p>We strongly recommend changing the default credentials for MongoDB, MinIO and DynamoDB before you deploy it. To do this, change contents of the files in <code>mongo/secrets</code>, <code>minio/secrets</code> and <code>dynamo/secrets</code> respectively.</p> <pre><code>kubectl apply -k .\n</code></pre> </li> </ol>"},{"location":"CHANGELOG/changelog-0.1.x/#v013","title":"v0.1.3","text":""},{"location":"CHANGELOG/changelog-0.1.x/#features","title":"Features","text":"<ul> <li>Change the workflow of the Claudie, to build the infrastructure on per cluster basis #584</li> <li>Add labels on Claudie created resources #579</li> </ul>"},{"location":"CHANGELOG/changelog-0.1.x/#bugfixes","title":"Bugfixes","text":"<p>No bugfixes since the last release.</p>"},{"location":"CHANGELOG/changelog-0.1.x/#known-issues","title":"Known issues","text":"<ul> <li><code>k8s-sidecar</code> sometimes misses deletion of the input manifest secret #588</li> <li>Deleting nodes in Builder is not idempotent #587</li> </ul>"},{"location":"CHANGELOG/changelog-0.1.x/#v012","title":"v0.1.2","text":""},{"location":"CHANGELOG/changelog-0.1.x/#features_1","title":"Features","text":"<ul> <li>Update to Go <code>v1.20</code> #559</li> <li>The VPN now respects netmask from defined CIDR #571</li> <li>Connections attempt are more readable #570</li> </ul>"},{"location":"CHANGELOG/changelog-0.1.x/#bugfixes_1","title":"Bugfixes","text":"<ul> <li>Wireguard IP now persists across reboots #557</li> <li>Deletion of the infrastructure before any outputs were created does not end with error #569</li> <li>Replace the <code>azurerm_virtual_machine</code> to the <code>azurerm_linux_virtual_machine</code> #573</li> </ul>"},{"location":"CHANGELOG/changelog-0.1.x/#known-issues_1","title":"Known issues","text":"<ul> <li>Longhorn replicas are  not properly managed, which might cause issues when deleting nodes #564</li> <li>Naming scheme in input manifest is not uniform #563</li> </ul>"},{"location":"CHANGELOG/changelog-0.1.x/#v011","title":"v0.1.1","text":""},{"location":"CHANGELOG/changelog-0.1.x/#features_2","title":"Features","text":"<ul> <li>Support DNS zone for Cloudflare, AWS, Azure, HetznerDNS, OCI #530</li> <li>Add default node labels #543</li> </ul>"},{"location":"CHANGELOG/changelog-0.1.x/#bugfixes_2","title":"Bugfixes","text":"<ul> <li>Logs in all services have been modified to not output sensitive information. #535</li> <li>Correctly update desiredState after workflow for a given manifest completes. #536</li> </ul>"},{"location":"CHANGELOG/changelog-0.1.x/#known-issues_2","title":"Known issues","text":"<ul> <li>Wireguard interface <code>wg0</code> is missing ip address after reboot. Will be fixed in next release #557</li> </ul>"},{"location":"CHANGELOG/changelog-0.1.x/#v010","title":"v0.1.0","text":""},{"location":"CHANGELOG/changelog-0.1.x/#features_3","title":"Features","text":"<ul> <li>Multi-cloud kubernetes cluster management</li> <li>Multi-cloud loadbalancer management</li> <li>Fast scale-up/scale-down of defined infrastructure</li> <li>Persistent storage via Longhorn</li> <li>Support for AWS, Azure, GCP, OCI and Hetzner</li> <li>GCP DNS zone support</li> <li>Claudie deployment on <code>amd64</code> and <code>arm64</code> clusters</li> </ul>"},{"location":"CHANGELOG/changelog-0.1.x/#bugfixes_3","title":"Bugfixes","text":"<ul> <li>As this is first release there are no bugfixes</li> </ul>"},{"location":"CHANGELOG/changelog-0.1.x/#known-issues_3","title":"Known issues","text":"<ul> <li><code>iptables</code> reset after reboot and block all traffic on <code>OCI</code> node #466</li> <li>Occasional connection issues between Claudie created clusters and Claudie on Hetzner and GCP #276</li> <li>Unable to easily recover after error #528</li> </ul>"},{"location":"CHANGELOG/changelog-0.2.x/","title":"Claudie <code>v0.2</code>","text":"<p>Due to a breaking change in the input manifest schema, the <code>v0.2.x</code> will not be backwards compatible with <code>v0.1.x</code>.</p>"},{"location":"CHANGELOG/changelog-0.2.x/#deployment","title":"Deployment","text":"<p>To deploy the Claudie <code>v0.2.X</code>, please:</p> <ol> <li> <p>Download the archive and checksums from the release page</p> </li> <li> <p>Verify the archive with the <code>sha256</code> (optional)</p> <pre><code>sha256sum -c --ignore-missing checksums.txt\n</code></pre> <p>If valid, output is, depending on the archive downloaded</p> <pre><code>claudie.tar.gz: OK\n</code></pre> <p>or</p> <pre><code>claudie.zip: OK\n</code></pre> <p>or both.</p> </li> <li> <p>Lastly, unpack the archive and deploy using <code>kubectl</code></p> <p>We strongly recommend changing the default credentials for MongoDB, MinIO and DynamoDB before you deploy it. To do this, change contents of the files in <code>mongo/secrets</code>, <code>minio/secrets</code> and <code>dynamo/secrets</code> respectively.</p> <pre><code>kubectl apply -k .\n</code></pre> </li> </ol>"},{"location":"CHANGELOG/changelog-0.2.x/#v020","title":"v0.2.0","text":""},{"location":"CHANGELOG/changelog-0.2.x/#features","title":"Features","text":"<ul> <li>Unify the naming schema in the input manifest #601</li> <li>Deploy MinIO in multi-replica fashion #589</li> </ul>"},{"location":"CHANGELOG/changelog-0.2.x/#bugfixes","title":"Bugfixes","text":"<p>No bugfixes since the last release.</p>"},{"location":"CHANGELOG/changelog-0.2.x/#known-issues","title":"Known issues","text":"<ul> <li>Workflow fails to build when a user makes multiple changes of the input manifest, regarding the API endpoint #606</li> <li>Longhorn pod longhorn-admission-webhook stuck in Init state #598</li> <li>Deletion of config fails if builder crashes after deleting nodes #588</li> </ul>"},{"location":"CHANGELOG/changelog-0.2.x/#v021","title":"v0.2.1","text":""},{"location":"CHANGELOG/changelog-0.2.x/#features_1","title":"Features","text":"<ul> <li>Improve management of Longhorn volume replicas #648</li> <li>Improve logging on all services #657</li> </ul>"},{"location":"CHANGELOG/changelog-0.2.x/#bugfixes_1","title":"Bugfixes","text":"<ul> <li>Fix unnecessary restarts in Wireguard playbook #658</li> </ul>"},{"location":"CHANGELOG/changelog-0.2.x/#known-issues_1","title":"Known issues","text":"<ul> <li>Certain change in nodepool configuration forces replacement of VMs #647</li> </ul>"},{"location":"CHANGELOG/changelog-0.2.x/#v022","title":"v0.2.2","text":""},{"location":"CHANGELOG/changelog-0.2.x/#features_2","title":"Features","text":"<ul> <li>Cluster Autoscaler integration #644</li> <li>Drop using grpc-health-probe in favour of Kubernetes native grpc health probes. #691</li> <li>Centralized information about the current workflow state of a cluster in the frontend service #605</li> </ul>"},{"location":"CHANGELOG/changelog-0.2.x/#bugfixes_2","title":"Bugfixes","text":"<ul> <li>Certain change in nodepool configuration forces replacement of VMs #647</li> </ul>"},{"location":"CHANGELOG/changelog-0.3.x/","title":"Claudie <code>v0.3</code>","text":"<p>Due to a breaking change in the input manifest schema, the <code>v0.3.x</code> will not be backwards compatible with <code>v0.2.x</code></p>"},{"location":"CHANGELOG/changelog-0.3.x/#deployment","title":"Deployment","text":"<p>To deploy the Claudie <code>v0.3.X</code>, please:</p> <ol> <li> <p>Download the archive and checksums from the release page</p> </li> <li> <p>Verify the archive with the <code>sha256</code> (optional)</p> <pre><code>sha256sum -c --ignore-missing checksums.txt\n</code></pre> <p>If valid, output is, depending on the archive downloaded</p> <pre><code>claudie.tar.gz: OK\n</code></pre> <p>or</p> <pre><code>claudie.zip: OK\n</code></pre> <p>or both.</p> </li> <li> <p>Lastly, unpack the archive and deploy using <code>kubectl</code></p> <p>We strongly recommend changing the default credentials for MongoDB, MinIO and DynamoDB before you deploy it. To do this, change contents of the files in <code>mongo/secrets</code>, <code>minio/secrets</code> and <code>dynamo/secrets</code> respectively.</p> <pre><code>kubectl apply -k .\n</code></pre> </li> </ol>"},{"location":"CHANGELOG/changelog-0.3.x/#v030","title":"v0.3.0","text":""},{"location":"CHANGELOG/changelog-0.3.x/#features","title":"Features","text":"<ul> <li>Use separate storage disk for longhorn #689</li> <li>Apply proper kubernetes labels to Claudie resources #714</li> <li>Implement clean architecture for the Frontend #701</li> </ul>"},{"location":"CHANGELOG/changelog-0.3.x/#bugfixes","title":"Bugfixes","text":"<ul> <li>Fix logging issues in Frontend #713</li> </ul>"},{"location":"CHANGELOG/changelog-0.3.x/#known-issues","title":"Known issues","text":"<ul> <li>Infrastructure might not get deleted if workflow encounters and error #712</li> <li>Certain cluster manipulation can result in workflow failing to build the clusters #606</li> </ul>"},{"location":"CHANGELOG/changelog-0.3.x/#v031","title":"v0.3.1","text":""},{"location":"CHANGELOG/changelog-0.3.x/#features_1","title":"Features","text":"<ul> <li>Rework logs in all microservices to enable easier filtering #742</li> <li>Improve longhorn volume replication management #782</li> <li>Various improvements in cluster manipulation #728</li> <li>Removal of <code>k8s-sidecar</code> from Frontend #792</li> </ul>"},{"location":"CHANGELOG/changelog-0.3.x/#bugfixes_1","title":"Bugfixes","text":"<ul> <li>Fixed bug when infrastructure was not deleted if workflow encountered an error #773</li> <li>Fixed error when deletion of nodes from cluster failed #728</li> <li>Fixed bug when frontend triggered deletion of incorrect manifest #744</li> </ul>"},{"location":"CHANGELOG/changelog-0.3.x/#known-issues_1","title":"Known issues","text":"<ul> <li>Subnet CIDR is not carried over from temporary state in Builder #790</li> <li>Longhorn occasionally does not detach volume from node which was deleted #784</li> </ul>"},{"location":"CHANGELOG/changelog-0.3.x/#v032","title":"v0.3.2","text":""},{"location":"CHANGELOG/changelog-0.3.x/#features_2","title":"Features","text":"<ul> <li>Label Claudie output secrets #837</li> <li>Use cluster name in the output kubeconfig context #830</li> <li>Make DynamoDB job idempotent #817</li> <li>Implement secret validation webhook #821</li> <li>Improve Cluster Autoscaler deployment #805</li> </ul>"},{"location":"CHANGELOG/changelog-0.3.x/#bugfixes_2","title":"Bugfixes","text":"<ul> <li>Fixed bug when subnet CIDR is not carried over from temporary state in Builder #812</li> </ul>"},{"location":"CHANGELOG/changelog-0.3.x/#known-issues_2","title":"Known issues","text":"<p>No known issues since the last release.</p>"},{"location":"CHANGELOG/changelog-0.4.x/","title":"Claudie <code>v0.4</code>","text":"<p>Due to a breaking change in the input manifest schema, the <code>v0.4.x</code> will not be backwards compatible with <code>v0.3.x</code></p>"},{"location":"CHANGELOG/changelog-0.4.x/#deployment","title":"Deployment","text":"<p>To deploy the Claudie <code>v0.4.X</code>, please:</p> <ol> <li> <p>Download the archive and checksums from the release page</p> </li> <li> <p>Verify the archive with the <code>sha256</code> (optional)</p> <pre><code>sha256sum -c --ignore-missing checksums.txt\n</code></pre> <p>If valid, output is, depending on the archive downloaded</p> <pre><code>claudie.tar.gz: OK\n</code></pre> <p>or</p> <pre><code>claudie.zip: OK\n</code></pre> <p>or both.</p> </li> <li> <p>Lastly, unpack the archive and deploy using <code>kubectl</code></p> <p>We strongly recommend changing the default credentials for MongoDB, MinIO and DynamoDB before you deploy it. To do this, change contents of the files in <code>mongo/secrets</code>, <code>minio/secrets</code> and <code>dynamo/secrets</code> respectively.</p> <pre><code>kubectl apply -k .\n</code></pre> </li> </ol>"},{"location":"CHANGELOG/changelog-0.4.x/#v040","title":"v0.4.0","text":""},{"location":"CHANGELOG/changelog-0.4.x/#features","title":"Features","text":"<ul> <li>Input manifest definition now uses CRD instead of secret #872</li> <li>Various improvements in the overall documentation #864 #871 #884 #888 #891 #893</li> </ul>"},{"location":"CHANGELOG/changelog-0.4.x/#bugfixes","title":"Bugfixes","text":"<ul> <li>Errors from the Scheduler are correctly saved under the clusters state #868</li> <li>Failure in the Terraformer will correctly saves the created state #875</li> <li>The clusters which previously resulted in error no longer block the workflow on input manifest reapply #883</li> </ul>"},{"location":"CHANGELOG/changelog-0.4.x/#known-issues","title":"Known issues","text":"<ul> <li>Single node pool definition cannot be used as control plane and as compute plane in the same cluster #865</li> <li>Input manifest status is not tracked during autoscaling #886</li> </ul>"},{"location":"CHANGELOG/changelog-0.4.x/#v041","title":"v0.4.1","text":""},{"location":"CHANGELOG/changelog-0.4.x/#features_1","title":"Features","text":"<ul> <li>Add support for static nodepools, enabling Claudie to create hybrid-cloud or private clusters #902</li> <li>Use new time format for Claudie generated logs #919</li> <li>Allow reuse of the same nodepool definition as a control plane and compute plane #936</li> <li>Rename Frontend service to Claudie-controller #939</li> </ul>"},{"location":"CHANGELOG/changelog-0.4.x/#bugfixes_1","title":"Bugfixes","text":"<ul> <li>Fix Frontend not recognizing updates from Cluster Autoscaler #901</li> <li>Use keep-alive settings to minimise impact of network disturbance between Claudie services #903</li> </ul>"},{"location":"CHANGELOG/changelog-0.4.x/#known-issues_1","title":"Known issues","text":"<p>No known issues since the last release</p>"},{"location":"CHANGELOG/changelog-0.4.x/#v042","title":"v0.4.2","text":""},{"location":"CHANGELOG/changelog-0.4.x/#features_2","title":"Features","text":"<ul> <li>Improved error logging when Claudie is deployed without debug logging.</li> <li>All resources created by claudie now have the <code>app.kubernetes.io/part-of: claudie</code> label.</li> <li>SecurityContext was added to Claudie deployed services.</li> <li>A limit was introduced to how many terraform, ansible, kubeone processes can be spawn at a given time when building multiple clusters.</li> </ul>"},{"location":"CHANGELOG/changelog-0.4.x/#bugfixes_2","title":"Bugfixes","text":"<ul> <li>Fixed correct deletion of a InputManifests with multiple clusters where one of them failed.</li> </ul>"},{"location":"CHANGELOG/changelog-0.4.x/#knownissues","title":"KnownIssues","text":"<p>No new known issues since the last release</p>"},{"location":"CHANGELOG/changelog-0.5.x/","title":"Claudie <code>v0.5</code>","text":"<p>Due to a breaking change in swapping the CNI used in the Kubernetes cluster, the <code>v0.5.x</code> will not be backwards compatible with <code>v0.4.x</code></p>"},{"location":"CHANGELOG/changelog-0.5.x/#deployment","title":"Deployment","text":"<p>To deploy Claudie <code>v0.5.X</code>, please:</p> <ol> <li> <p>Download the archive and checksums from the release page</p> </li> <li> <p>Verify the archive with the <code>sha256</code> (optional)</p> <pre><code>sha256sum -c --ignore-missing checksums.txt\n</code></pre> <p>If valid, output is, depending on the archive downloaded</p> <pre><code>claudie.tar.gz: OK\n</code></pre> <p>or</p> <pre><code>claudie.zip: OK\n</code></pre> <p>or both.</p> </li> <li> <p>Lastly, unpack the archive and deploy using <code>kubectl</code></p> <p>We strongly recommend changing the default credentials for MongoDB, MinIO and DynamoDB before you deploy it. To do this, change contents of the files in <code>mongo/secrets</code>, <code>minio/secrets</code> and <code>dynamo/secrets</code> respectively.</p> <pre><code>kubectl apply -k .\n</code></pre> </li> </ol>"},{"location":"CHANGELOG/changelog-0.5.x/#v050","title":"v0.5.0","text":""},{"location":"CHANGELOG/changelog-0.5.x/#features","title":"Features","text":"<ul> <li>Use cilium as the cluster CNI #984</li> <li>Update to the latest longhorn version v1.5.1 #984</li> </ul>"},{"location":"CHANGELOG/changelog-0.5.x/#known-issues","title":"Known issues","text":"<ul> <li>No known issues since the last release</li> </ul>"},{"location":"CHANGELOG/changelog-0.5.x/#v051","title":"v0.5.1","text":""},{"location":"CHANGELOG/changelog-0.5.x/#bug-fixes","title":"Bug fixes","text":"<ul> <li>Fix issue when node deletion from the cluster wouldn't be idempotent #1008</li> </ul>"},{"location":"CHANGELOG/changelog-0.6.x/","title":"Claudie <code>v0.6</code>","text":"<p>Due to a breaking change in the terraform files the <code>v0.6.x</code> will not be backwards compatible with <code>v0.5.x</code></p>"},{"location":"CHANGELOG/changelog-0.6.x/#deployment","title":"Deployment","text":"<p>To deploy Claudie <code>v0.6.X</code>, please:</p> <ol> <li> <p>Download the archive and checksums from the release page</p> </li> <li> <p>Verify the archive with the <code>sha256</code> (optional)</p> <pre><code>sha256sum -c --ignore-missing checksums.txt\n</code></pre> </li> </ol> <p>If valid, output is, depending on the archive downloaded</p> <pre><code>```sh\nclaudie.tar.gz: OK\n```\n</code></pre> <p>or</p> <pre><code>```sh\nclaudie.zip: OK\n```\n</code></pre> <p>or both.</p> <ol> <li>Lastly, unpack the archive and deploy using <code>kubectl</code></li> </ol> <p>We strongly recommend changing the default credentials for MongoDB, MinIO and DynamoDB before you deploy it. To do this, change contents of the files in <code>mongo/secrets</code>, <code>minio/secrets</code> and <code>dynamo/secrets</code> respectively.</p> <pre><code>```sh\nkubectl apply -k .\n```\n</code></pre>"},{"location":"CHANGELOG/changelog-0.6.x/#v060","title":"v0.6.0","text":""},{"location":"CHANGELOG/changelog-0.6.x/#features","title":"Features","text":"<ul> <li>Updated network policies #1016</li> <li>Support flex instances #993</li> <li>De-duplication of terraform templates #1021</li> <li>Timestamp added as part of workflow when saved in mongoDB #1019</li> </ul>"},{"location":"CHANGELOG/changelog-0.6.x/#bugfixes","title":"Bugfixes","text":"<ul> <li>Resolved #598</li> </ul>"},{"location":"CHANGELOG/changelog-0.6.x/#other","title":"Other","text":"<ul> <li>Fix unknown AMIs and regions in docs #1009</li> <li>Update the Roadmap #1020</li> <li>Add hardening section to docs #1026</li> <li>Add updating section to docs #1028</li> </ul>"},{"location":"CHANGELOG/changelog-0.6.x/#v061","title":"v0.6.1","text":""},{"location":"CHANGELOG/changelog-0.6.x/#bugfixes_1","title":"Bugfixes","text":"<ul> <li>Fallback to use Kube-Proxy with Cilium, due to problems with network traffic  #1035</li> </ul>"},{"location":"CHANGELOG/changelog-0.6.x/#v062","title":"v0.6.2","text":""},{"location":"CHANGELOG/changelog-0.6.x/#features_1","title":"Features","text":"<ul> <li>Limits and Requests of each claudie-deployed pod were adjusted #1055</li> </ul>"},{"location":"CHANGELOG/changelog-0.6.x/#bugfixes_2","title":"Bugfixes","text":"<ul> <li>Clusters made out of static nodepools should be correctly destroyed #1038</li> <li>Issue when the hashes of current and desired state wouldn't match after config build sucessfully  #1041</li> <li>Wireguard is now removed from static nodepools when the config is deleted #1059</li> </ul>"},{"location":"CHANGELOG/changelog-0.6.x/#v063","title":"v0.6.3","text":""},{"location":"CHANGELOG/changelog-0.6.x/#features_2","title":"Features","text":"<ul> <li>Labels for unique node identification  #1064</li> <li>Observability via prometheus metrics #1095</li> </ul>"},{"location":"CHANGELOG/changelog-0.6.x/#bugfixes_3","title":"Bugfixes","text":"<ul> <li>Autoscaler crashloop #1062</li> <li>Tracking of partially build infra #1063</li> <li>Labels and Taints are now correctly applied for static nodes #1112</li> </ul>"},{"location":"CHANGELOG/changelog-0.6.x/#v064","title":"v0.6.4","text":""},{"location":"CHANGELOG/changelog-0.6.x/#features_3","title":"Features","text":"<ul> <li>Allow 0 disk size use for disabling additional volumes #1138</li> </ul>"},{"location":"CHANGELOG/changelog-0.6.x/#bugfixes_4","title":"Bugfixes","text":"<ul> <li>Add secret UTF-8 validation #1114</li> <li>Fix subprocesses not terminating #1137</li> <li>Add more informative Kubernetes.Version validation #1140</li> </ul>"},{"location":"CHANGELOG/changelog-0.6.x/#v065","title":"v0.6.5","text":""},{"location":"CHANGELOG/changelog-0.6.x/#features_4","title":"Features","text":"<ul> <li>Adjust requests and limits on <code>context-box</code>, <code>autoscaler-adapter</code> and <code>cluster-autoscaler</code> #1161</li> </ul>"},{"location":"CHANGELOG/changelog-0.6.x/#bugfixes_5","title":"Bugfixes","text":"<ul> <li>Add missing SSH private key and public IPs of LB nodes to Claudie's metadata secret #1164</li> </ul>"},{"location":"CHANGELOG/changelog-0.6.x/#v066","title":"v0.6.6","text":""},{"location":"CHANGELOG/changelog-0.6.x/#features_5","title":"Features","text":"<ul> <li>Add \"proxy_protocol on;\" to the LoadBalancer nginx config #1189</li> <li>Cluster-autoscaler tag validation #1176</li> </ul>"},{"location":"CHANGELOG/changelog-0.6.x/#bugfixes_6","title":"Bugfixes","text":"<ul> <li>Check for static nodes reuse #1184</li> </ul>"},{"location":"CHANGELOG/changelog-0.7.x/","title":"Claudie <code>v0.7</code>","text":"<p>Due to using the latest version of longhorn the <code>v0.7.x</code> will not be backwards compatible with <code>v0.6.x</code></p>"},{"location":"CHANGELOG/changelog-0.7.x/#deployment","title":"Deployment","text":"<p>To deploy Claudie <code>v0.7.X</code>, please:</p> <ol> <li> <p>Download claudie.yaml from release page</p> </li> <li> <p>Verify the checksum with <code>sha256</code> (optional)</p> <p>We provide checksums in <code>claudie_checksum.txt</code> you can verify the downloaded yaml files againts the provided checksums.</p> </li> <li> <p>Install claudie using <code>kubectl</code></p> </li> </ol> <p>We strongly recommend changing the default credentials for MongoDB, MinIO and DynamoDB before you deploy it.</p> <pre><code>kubectl apply -f https://github.com/berops/claudie/releases/latest/download/claudie.yaml\n</code></pre> <p>To further harden claudie, you may want to deploy our pre-defined network policies:    <pre><code># for clusters using cilium as their CNI\nkubectl apply -f https://github.com/berops/claudie/releases/latest/download/network-policy-cilium.yaml\n</code></pre> <pre><code># other\nkubectl apply -f https://github.com/berops/claudie/releases/latest/download/network-policy.yaml\n</code></pre></p>"},{"location":"CHANGELOG/changelog-0.7.x/#v070","title":"v0.7.0","text":"<p>Upgrade procedure: Before upgrading Claudie, upgrade Longhorn to 1.6.x as per this guide. In most cases this will boil down to running the following command: <code>kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v1.6.0/deploy/longhorn.yaml</code>.</p>"},{"location":"CHANGELOG/changelog-0.7.x/#features","title":"Features","text":"<ul> <li>Add possibility to use external s3/dynamo/mongo instances #1191</li> <li>Add Genesis Cloud support #1210</li> <li>Add annotations support for nodepools in Input Manifest #1238</li> <li>Update Longhorn to latest version #1213</li> </ul>"},{"location":"CHANGELOG/changelog-0.7.x/#bugfixes","title":"Bugfixes","text":"<ul> <li>Fix removing state lock from dynamodb #1211</li> <li>Fix operatur status message #1215</li> <li>Fix custom storage classes #1219</li> </ul>"},{"location":"CHANGELOG/changelog-0.7.x/#v071","title":"v0.7.1","text":"<p>Migrate from the legacy package repositories <code>apt.kubernetes.io, yum.kubernetes.io</code> to the Kubernetes community-hosted repositories <code>pkgs.k8s.io</code>. A detailed how to can be found in https://kubernetes.io/blog/2023/08/31/legacy-package-repository-deprecation/</p> <p>Kubernetes version 1.24 is no longer supported. 1.25.x 1.26.x 1.27.x are the currently supported versions.</p>"},{"location":"CHANGELOG/changelog-0.7.x/#bugfixes_1","title":"Bugfixes","text":"<ul> <li>Static Loadbalancer metadata secret #1249</li> <li>Update healthcheck endpoints #1245</li> </ul>"},{"location":"CHANGELOG/changelog-0.7.x/#v072","title":"v0.7.2","text":""},{"location":"CHANGELOG/changelog-0.7.x/#features_1","title":"Features","text":"<ul> <li>Target Nodepools #1241</li> </ul>"},{"location":"CHANGELOG/changelog-0.7.x/#v073","title":"v0.7.3","text":""},{"location":"CHANGELOG/changelog-0.7.x/#bugfixes_2","title":"Bugfixes","text":"<ul> <li>Fix endless queueing of manifests with static nodepools, #1282</li> </ul>"},{"location":"CHANGELOG/changelog-0.7.x/#v074","title":"v0.7.4","text":""},{"location":"CHANGELOG/changelog-0.7.x/#bugfixes_3","title":"Bugfixes","text":"<ul> <li>Loadbalancer Endpoint missing in current state when workflow fails #1284</li> <li>Prevent autoscaling request when manifest is in error #1288</li> <li>Update healthchecks for builder that resulting in frequent restarts #1293</li> </ul>"},{"location":"CHANGELOG/changelog-0.7.x/#v075","title":"v0.7.5","text":""},{"location":"CHANGELOG/changelog-0.7.x/#features_2","title":"Features","text":"<ul> <li>increase worker_connections per worker process for load balancers #1328</li> </ul>"},{"location":"CHANGELOG/changelog-0.7.x/#bugifxes","title":"Bugifxes","text":"<ul> <li>Fix connection issues across services #1331</li> </ul>"},{"location":"CHANGELOG/changelog-0.8.x/","title":"Claudie <code>v0.8</code>","text":"<p>Due to updating terraform files the <code>v0.8.x</code> clusters build with claudie version <code>v0.7.x</code> will be forced to be recreated.</p> <p>Nodepool/cluster names that do not meet the required length of 14 characters for nodepool names and 28 characters for cluster names must be adjusted or the new length validation will fail. You can achieve a rolling update by adding new nodepools with the new names and then removing the old nodepools before updating to version 0.8. </p> <p>Before updating make backups of your data\"</p>"},{"location":"CHANGELOG/changelog-0.8.x/#deployment","title":"Deployment","text":"<p>To deploy Claudie <code>v0.8.X</code>, please:</p> <ol> <li> <p>Download claudie.yaml from release page</p> </li> <li> <p>Verify the checksum with <code>sha256</code> (optional)</p> </li> </ol> <p>We provide checksums in <code>claudie_checksum.txt</code> you can verify the downloaded yaml files againts the provided checksums.</p> <ol> <li>Install claudie using <code>kubectl</code></li> </ol> <p>We strongly recommend changing the default credentials for MongoDB, MinIO and DynamoDB before you deploy it.</p> <pre><code>kubectl apply -f https://github.com/berops/claudie/releases/latest/download/claudie.yaml\n</code></pre> <p>To further harden claudie, you may want to deploy our pre-defined network policies:    <pre><code># for clusters using cilium as their CNI\nkubectl apply -f https://github.com/berops/claudie/releases/latest/download/network-policy-cilium.yaml\n</code></pre> <pre><code># other\nkubectl apply -f https://github.com/berops/claudie/releases/latest/download/network-policy.yaml\n</code></pre></p>"},{"location":"CHANGELOG/changelog-0.8.x/#v080","title":"v0.8.0","text":""},{"location":"CHANGELOG/changelog-0.8.x/#features","title":"Features","text":"<ul> <li>Allow to reapply manifest after ERROR #1337</li> <li>Allow other usernames with root access #1335</li> <li>Fix substring match resulting in deletion of wrong nodes #1350</li> <li>Add spec.providers validation #1352</li> <li>Correctly change the API endpoint #1366</li> <li>Restrict nodepool and cluster names to 14 and 28 characters respectively, and add the ability to define and use providers in a single cluster #1348</li> <li>Prohibit changing the cloud provider in a nodepool #1371</li> </ul>"},{"location":"CHANGELOG/changelog-0.8.x/#v081","title":"v0.8.1","text":"<p>Nodepools with genesis cloud provider will trigger a recreation of the cluster due to the change in terraform files. Make a backup of your data if your cluster constains genesis cloud nodepools.</p>"},{"location":"CHANGELOG/changelog-0.8.x/#features_1","title":"Features","text":"<ul> <li>disable deploying Node Local DNS by default #1382</li> <li>Add immutability to nodepools #1385</li> <li>More readable validation errors #1397</li> </ul>"},{"location":"CHANGELOG/changelog-0.8.x/#bugfixes","title":"Bugfixes","text":"<ul> <li>Fix mounting volume for longhorn on genesis cloud nodepools #1389</li> <li>Fix MountVolume.SetUp errors by updating multipath configuration #1386</li> </ul>"},{"location":"CHANGELOG/changelog-0.9.x/","title":"Claudie <code>v0.9</code>","text":"<p>Due to changes to the core of how Claudie works with terraform files and representation of the data in persistent storage the <code>v0.9.x</code> version will not be backwards compatible with clusters build using previous Claudie versions.</p>"},{"location":"CHANGELOG/changelog-0.9.x/#most-notable-changes-tldr","title":"Most notable changes (TL;DR)","text":"<ul> <li>Support for pluggable external terraform files was added, breaking the dependency of updated terraform files on a new Claudie version. The ability to arbitrarily change the templates used by Claudie was made available to the user. As a result, Claudie has implemented a rolling update of the infrastructure in case a change in the terraform templates is detected, by gradually updating the build cluster one nodepool at a time. </li> <li>Merged the Scheduler and Context-box service into a single called Manager.</li> <li>Each Nodepool now has its own SSH keys instead of sharing a single SSH key per kubernetes cluster.</li> </ul>"},{"location":"CHANGELOG/changelog-0.9.x/#experimental","title":"Experimental","text":"<ul> <li>We have added support for an HTTP proxy to be used when building Kubernetes clusters. This was mainly motivated by the issues we encountered while building multi-provider clusters, where some IP addresses assigned to some of the VMs were being misused and blacklisted/blocked in various registries. By using the HTTP proxy, it is possible to work around this and get the cluster built successfully.</li> </ul> <p>Currently the HTTP proxy is experimental, it is made available by modifying the <code>HTTP_PROXY_MODE</code> in the Claudie config map in the <code>claudie</code> namespace. The possible values are <code>(on|off|default)</code>. Default means that if a kubernetes cluster uses Hetzner nodepools, it will automatically switch to using the proxy, as we have encountered the most bad IP issues with Hetzner. By default the proxy is turned off.</p> <p>It should be noted that the proxy is still in an experimental phase, where the API for interacting with the proxy may change in the future. Therefore, clusters using this feature in this release run the risk of being backwards incompatible with future <code>0.9.x</code> releases, which will further stabilise the proxy API.</p>"},{"location":"CHANGELOG/changelog-0.9.x/#deployment","title":"Deployment","text":"<p>To deploy Claudie <code>v0.9.X</code>, please:</p> <ol> <li> <p>Download claudie.yaml from release page</p> </li> <li> <p>Verify the checksum with <code>sha256</code> (optional)</p> </li> </ol> <p>We provide checksums in <code>claudie_checksum.txt</code> you can verify the downloaded yaml files againts the provided checksums.</p> <ol> <li>Install Claudie using <code>kubectl</code></li> </ol> <p>We strongly recommend changing the default credentials for MongoDB, MinIO and DynamoDB before you deploy it.</p> <pre><code>kubectl apply -f https://github.com/berops/claudie/releases/latest/download/claudie.yaml\n</code></pre> <p>To further harden Claudie, you may want to deploy our pre-defined network policies:    <pre><code># for clusters using cilium as their CNI\nkubectl apply -f https://github.com/berops/claudie/releases/latest/download/network-policy-cilium.yaml\n</code></pre> <pre><code># other\nkubectl apply -f https://github.com/berops/claudie/releases/latest/download/network-policy.yaml\n</code></pre></p>"},{"location":"CHANGELOG/changelog-0.9.x/#v090","title":"v0.9.0","text":""},{"location":"CHANGELOG/changelog-0.9.x/#whats-changed","title":"What's changed","text":"<ul> <li> <p>Support added for Ubuntu 24.04 in Azure and Hetzner #1401</p> </li> <li> <p>Each nodepool now has its own SSH keys, a change from the previous state where all nodepools shared the same SSH keys.. #1442</p> </li> <li> <p>Added support for pluggable external terraform files, breaking the dependency of updated terraform files on a new Claudie version. #1460</p> </li> <li> <p>With the support of external terraform templates, the ability to arbitrarily change the templates used by Claudie was made available to the user. As a result, Claudie has implemented a rolling update of the infrastructure in case a change in the terraform templates is detected, by gradually updating the build cluster one nodepool at a time. #1525</p> </li> <li> <p>The Scheduler and Context-Box microservices were merged into a single service called Manager. This was done because these two services were tightly coupled, and parts of the context box service were causing state correctness issues within Claudie and needed to be fixed. #1498</p> </li> <li> <p>Latest supported kubernetes version is now  v1.30.x #1498</p> </li> <li> <p>Logs in all microservices have been changed to always log what is being executed, rather than only when the LOG_LEVEL is set to debug. #1507</p> </li> <li> <p>Longhron version was bumped from 1.6.0 to 1.7.0 #1511</p> </li> <li> <p>When building a Kubernetes cluster without a load balancer for the API server, the generated kubeconfig will now work for all control plane nodes defined in the input manifest, instead of just one. #1546</p> </li> </ul>"},{"location":"CHANGELOG/changelog-0.9.x/#experimental_1","title":"Experimental","text":"<ul> <li>Support for a HTTP proxy was added. The HTTP Proxy can be turned on by setting the <code>HTTP_PROXY_MODE</code> environment variable in the Claudie config map to <code>on</code> #1440</li> </ul>"},{"location":"CHANGELOG/changelog-0.9.x/#bug-fixes","title":"Bug fixes","text":"<ul> <li>In the case when the infrastructure fails to be build or is only partially build   the deletion process was stuck on acquiring a lock which was never created, this issue is no longer present #1463</li> <li>The init process was added to the Ansible microservice because previously spawned Ansible playbooks left behind zombie processes that consumed resources. The init process takes care of cleaning up these processes. #1527</li> <li>Fixed an edge case where part of the load balancer infrastructure was incorrectly destroyed when a failure occurred in the middle of the workflow. #1533</li> <li>The whitespace when generating keys will no longer be trimmed #1539</li> <li>GenesisCloud autoscaling will now correctly work #1543</li> </ul>"},{"location":"CHANGELOG/changelog-0.9.x/#v091","title":"v0.9.1","text":""},{"location":"CHANGELOG/changelog-0.9.x/#whats-changed_1","title":"What's Changed","text":"<ul> <li>Allow to overwrite the following default labels for static nodepools, which enables more customization for the static nodepools #1550 <pre><code>    claudie.io/provider=static-provider \n    claudie.io/provider-instance=static-provider\n    topology.kubernetes.io/region=static-region\n    topology.kubernetes.io/zone=static-zone\n</code></pre></li> <li>In the previous release proxy was introduced as an experimental feature. This release further stabilizes the proxy interface by introducing the following options to be set within the InputManifest #1540 <pre><code>    kubernetes:\n    clusters:\n      - name: proxy-example\n        version: \"1.30.0\"\n        network: 192.168.2.0/24\n        installationProxy:\n            mode: \"(on|off|default)\"\n</code></pre></li> <li>On  - proxy will be used across all nodes in the cluster at all times.</li> <li>Off - proxy will be turned of across the cluster.</li> <li> <p>Default - proxy will be turned on across the cluster for all nodes if the cluster contains at least one hetzner node.</p> <p>NOTE: if your cluster was build with the proxy turned on during the experimental phase, this change may or may not work, create backups before updating to the new version.</p> </li> <li> <p>When triggering a change of the the API endpoint of a cluster, an endless retry was added to the task executing the change as in the case of an error the cluster would endup malformed. This change will require user intervention to fix the underlying issue, if any occurs #1577</p> </li> <li> <p>Basic reconciliation was added for autoscaled events in case of an error during the execution #1582</p> <ul> <li>If error occurs during the addition of the node, claudie will rollback by deleting the added node and any associated infrastructure</li> <li>If errors occurs during the deletion of the node, claudie will retry the deletion multiple times</li> </ul> <p>For both of the cases it will retry the rollback or deletion of the node multiple times with an exponential backoff with up to an hour.</p> </li> </ul>"},{"location":"CHANGELOG/changelog-0.9.x/#bug-fixes_1","title":"Bug fixes","text":"<ul> <li> <p>Up until now, if there was any invalid input in the InputManifest or the infrastructure was able to be only partially created, the InputManifest would end up with an error where only manual deletion would help to remove the partially constructed infrastructure, This was fixed, so that if anything fails during the addition of new infrastructure into the cluster, claudie will rollback to the last working point, by removing the partially created infrastructure #1566</p> </li> <li> <p>Longhorn related issues, especially during node deletion resulted in many InputManifest issues, In this release we fixed the issues by switching to a different drain policy for longhorn replicas deployed across the nodes on the cluster, namely <code>block-for-eviction-if-last-replica</code>#1596 which results in:</p> <ul> <li>Protecting data by preventing the drain operation from completing until there is a healthy replica available for each volume available on another node.</li> <li>Automatically evicts replicas, so the user does not need to do it manually.</li> </ul> </li> </ul>"},{"location":"CHANGELOG/changelog-0.9.x/#v092","title":"v0.9.2","text":""},{"location":"CHANGELOG/changelog-0.9.x/#whats-changed_2","title":"What's Changed","text":"<ul> <li>Node local dns will be deployed on all newly build clusters #1603.   For existing clusters that were build using older Claudie version, this change will deploy the <code>node-local-dns</code> into the cluster   but it will not automatically work. Manual work needs to done, by first editing the <code>kubelet-config</code> ConfigMap in the <code>kube-system</code> namespace of the cluster   to change the DNS address to the address of the <code>node-local-dns</code> and then on each node the following changes need to be done: applying-kubelet-configuration-changes.</li> </ul>"},{"location":"CHANGELOG/changelog-0.9.x/#bug-fixes_2","title":"Bug fixes","text":"<ul> <li>Improved validation errors when zero nodes are defined in a nodepool #1605</li> <li>Claudie will now correctly recognize a change in the kubernetes version to perform an update #1607</li> <li>Kubernetes secrets with provider credentials that contain leading or trailing whitespace will now be trimmed, avoiding issues with generated terraform templates #1606</li> <li>Changing the API endpoint will now correctly work, after the recent kubeone version update #1619</li> </ul>"},{"location":"CHANGELOG/changelog-0.9.x/#v093","title":"v0.9.3","text":""},{"location":"CHANGELOG/changelog-0.9.x/#bug-fixes_3","title":"Bug fixes","text":"<ul> <li>Correctly turn HTTP proxy on/off #1636.   HTTP proxy feature introduced in v0.9.1 was not working correctly mostly when switching between the on/off mode.</li> </ul>"},{"location":"CHANGELOG/changelog-0.9.x/#v094","title":"v0.9.4","text":""},{"location":"CHANGELOG/changelog-0.9.x/#bug-fixes_4","title":"Bug fixes","text":"<ul> <li>Fix backwards compatibility with changes introduced in Claudie version 0.9.3 for clusters build using older versions 0.9.x #1651.  If you built your cluster using the Claudie version 0.9.3, you can ignore this minor release.</li> </ul>"},{"location":"CHANGELOG/changelog-0.9.x/#v095","title":"v0.9.5","text":""},{"location":"CHANGELOG/changelog-0.9.x/#bug-fixes_5","title":"Bug fixes","text":"<ul> <li>Correclty assign CIDR to loadbalancer nodepools #1654.   This issue was prelevant mostly when working with loadbalancer from cloud providers that were not hetzner.</li> </ul>"},{"location":"CHANGELOG/changelog-0.9.x/#v096","title":"v0.9.6","text":""},{"location":"CHANGELOG/changelog-0.9.x/#bug-fixes_6","title":"Bug fixes","text":"<ul> <li>Fixed issue where failing to build a load balancer would cause Claudie to hang if the DNS part failed #1660.   Claudie will now recover from this scenario and it is possible for the user to specify the correct DNS settings in the InputManifest to fixed the reported issue.</li> </ul>"},{"location":"CHANGELOG/changelog-0.9.x/#v097","title":"v0.9.7","text":""},{"location":"CHANGELOG/changelog-0.9.x/#whats-changed_3","title":"What's Changed","text":"<ul> <li>Additional settings were added to roles for LoadBalancers. #1685.</li> </ul> <p>It is now possible to configure adding/removing proxy protocol and sticky sessions.</p> <p><code>stickySessions</code> will always forward traffic to the same node based on the IP hash.</p> <p><code>proxyProtocol</code> will turn on the proxy protocol. If used, the application to which the traffic is redirected must support this protocol.</p> <pre><code>  loadBalancers:\n  roles:\n    - name: example-role\n      protocol: tcp\n      port: 6443\n      targetPort: 6443\n      targetPools:\n        - htz-kube-nodes\n      # added\n      settings:\n        proxyProtocol: off (default will be on)\n        stickySession: on. (default will be off)\n</code></pre>"},{"location":"CHANGELOG/changelog-0.9.x/#bug-fixes_7","title":"Bug fixes","text":"<ul> <li>If any of the nodes become unreachable, Claudie will report the problem and will not work on any changes until the connectivity issue is resolved. #1658</li> </ul> <p>For unreachable nodes within the kubernetes cluster, Claudie will give you the options of resolving the issue or removing the node from the InputManifest or via <code>kubectl</code>, Claudie will report the following issue   <pre><code>fix the unreachable nodes by either:\n - fixing the connectivity issue\n - if the connectivity issue cannot be resolved, you can:\n   - delete the whole nodepool from the kubernetes cluster in the InputManifest\n   - delete the selected unreachable node/s manually from the cluster via 'kubectl'\n     - if its a static node you will also need to remove it from the InputManifest\n     - if its a dynamic node claudie will replace it.\n     NOTE: if the unreachable node is the kube-apiserver, claudie will not be able to recover\n           after the deletion.\n</code></pre></p> <p>For unreachable nodes within the loadbalancer cluster, Claudie will give you the options of resolving the issue or removing the nodepool or load balancer from the InputManifest, Claudie will report the following issue   <pre><code>fix the unreachable nodes by either:\n - fixing the connectivity issue\n - if the connectivity issue cannot be resolved, you can:\n   - delete the whole nodepool from the loadbalancer cluster in the InputManifest\n   - delete the whole loadbalancer cluster from the InputManifest\n</code></pre></p> <ul> <li> <p>It may be the case that the cluster-autoscaler image may not share the same version as the specified kubernetes version in the InputManifest. Claudie will now correctly recognize this and pick the latest available cluster-autoscaler image #1680</p> </li> <li> <p>Claudie will now set the limits of max open file descriptors on each node to 65535 #1679</p> </li> </ul>"},{"location":"CHANGELOG/changelog-0.9.x/#v098","title":"v0.9.8","text":""},{"location":"CHANGELOG/changelog-0.9.x/#whats-changed_4","title":"What's Changed","text":"<ul> <li>Added support for alternative names for load balancers #1693</li> </ul> <pre><code>   dns:\n     dnsZone: example.com\n     provider: example\n     hostname: main\n     alternativeNames:\n       - other\n</code></pre> <p>Templates that Claudie uses by default, will be updated separately to make use of the alternative names.</p>"},{"location":"CHANGELOG/changelog-0.9.x/#bug-fixes_8","title":"Bug fixes","text":"<ul> <li>If the current state was not built and some of the nodes did not have an assigned IP address, Claudie would fail to correctly determine if the nodes were reachable. #1691</li> <li>Claudie will now increase the limits for <code>fs.inotify</code> to a higher number, as depending on the workload on each node, reaching the limits would result in an error from which Claudie would not recover. #1696 </li> <li>Annotations for static nodepools will now be correctly propagated. #1696 </li> </ul>"},{"location":"CHANGELOG/changelog-0.9.x/#v099","title":"v0.9.9","text":""},{"location":"CHANGELOG/changelog-0.9.x/#whats-changed_5","title":"What's Changed","text":"<ul> <li> <p>General maintenance release, updated dependencies used by Claudie #1709</p> </li> <li> <p>Upgrading Longhorn from version 1.7.0 to version 1.8.1 #1709</p> </li> </ul> <p>After upgrading Longhorn to the newer version, some pods of the old and new versions will coexist if your cluster uses a PVC that uses the Longhorn storage class (which is the default), as they would reference the old v1.7.0.</p> <p>To upgrade the volumes to the newer version, it's possible to use the Longhorn UI to set <code>Settings &gt; Concurrent Automatic Engine Upgrade Per Node Limit</code> to a value greater than 0 to upgrade old volumes.   This is a setting that controls how Longhorn automatically upgrades volumes\u2019 engines to the new default engine image after upgrading Longhorn manager. More on: https://longhorn.io/docs/1.8.1/deploy/upgrade/auto-upgrade-engine/</p> <p>Once the upgrade is complete, the old engine image pods and the instance manager will be terminated after ~60 minutes of non-use (after all volumes have been upgraded to use the latest Longhorn version) You can also follow the official Longhorn post on this: https://longhorn.io/kb/troubleshooting-some-old-instance-manager-pods-are-still-running-after-upgrade/</p>"},{"location":"autoscaling/autoscaling/","title":"Autoscaling in Claudie","text":"<p>Claudie supports autoscaling by installing Cluster Autoscaler for Claudie-made clusters, with a custom implementation of <code>external gRPC cloud provider</code>, in Claudie context called <code>autoscaler-adapter</code>. This, together with Cluster Autoscaler is automatically managed by Claudie, for any clusters, which have at least one node pool defined with <code>autoscaler</code> field. Whats more, you can change the node pool specification freely from autoscaler configuration to static count or vice versa. Claudie will seamlessly configure Cluster Autoscaler, or even remove it when it is no longer needed.</p>"},{"location":"autoscaling/autoscaling/#what-triggers-a-scale-up","title":"What triggers a scale up","text":"<p>The scale up is triggered if there are pods in the cluster, which are unschedulable and</p> <ul> <li>could be scheduled, if any of the node pools with autoscaling enabled would accommodate them if they would grow in size</li> <li>the node pools, which could accommodate them, are not yet at maximum size</li> </ul> <p>However, if pods' resource requests are larger than any new node would offer, the scale up will not be triggered. The cluster is scanned every 10 seconds for these pods, to assure quick response to the cluster needs. For more information, please have a look at official Cluster Autoscaler documentation.</p>"},{"location":"autoscaling/autoscaling/#what-triggers-a-scale-down","title":"What triggers a scale down","text":"<p>The scale down is triggered, if all following conditions are met</p> <ul> <li>the sum of CPU and memory requests of all pods running on node considered for scale down is below 50% (Claudie by default excludes DaemonSet pods and Mirror pods)</li> <li>all pods running on the node (except those that run on all nodes by default, like manifest-run pods or pods created by DaemonSets) considered for scale down,  can be scheduled to other nodes</li> <li>the node considered for scale down does not have scale-down disabled annotation</li> </ul> <p>For more information, please have a look at official Cluster Autoscaler documentation.</p>"},{"location":"autoscaling/autoscaling/#architecture","title":"Architecture","text":"<p>As stated earlier, Claudie deploys Cluster Autoscaler and Autoscaler Adapter for every Claudie-made cluster which enables it. These components are deployed within the same cluster as Claudie.</p> <p></p>"},{"location":"autoscaling/autoscaling/#considerations","title":"Considerations","text":"<p>As Claudie just extends Cluster Autoscaler, it is important that you follow their best practices. Furthermore, as number of nodes in autoscaled node pools can be volatile, you should carefully plan out how you will use the storage on such node pools. Longhorn support of Cluster Autoscaler is still in experimental phase (longhorn documentation).</p>"},{"location":"claudie-workflow/claudie-workflow/","title":"Claudie","text":""},{"location":"claudie-workflow/claudie-workflow/#a-single-platform-for-multiple-clouds","title":"A single platform for multiple clouds","text":""},{"location":"claudie-workflow/claudie-workflow/#microservices","title":"Microservices","text":"<ul> <li>Manager</li> <li>Builder</li> <li>Terraformer</li> <li>Ansibler</li> <li>Kube-eleven</li> <li>Kuber</li> <li>Claudie-operator</li> </ul>"},{"location":"claudie-workflow/claudie-workflow/#data-stores","title":"Data stores","text":"<ul> <li>MongoDB</li> <li>Minio</li> <li>DynamoDB</li> </ul>"},{"location":"claudie-workflow/claudie-workflow/#tools-used","title":"Tools used","text":"<ul> <li>Terraform</li> <li>Ansible</li> <li>KubeOne</li> <li>Longhorn</li> <li>Nginx</li> <li>Calico</li> <li>gRPC</li> </ul>"},{"location":"claudie-workflow/claudie-workflow/#manager","title":"Manager","text":"<p>Manger is the brain and main entry point for claudie. To build clusters users/services submit their configs to the manager service. The manager creates the desired state and schedules a number of jobs to be executed in order to achieve the desired state based on the current state. The jobs are then picked up by the builder service.</p> <p>For the API see the GRPC definitions.</p>"},{"location":"claudie-workflow/claudie-workflow/#flow","title":"Flow","text":"<p>Each newly created manifest starts in the Pending state. Pending manifests are periodically checked and based on the specification provided in the applied configs, the desired state for each cluster, along with the tasks to be performed to achieve the desired state are created, after which the manifest is moved to the  scheduled state. Tasks from Scheduled manifests are picked up by builder services gradually building the desired state. From this state, the manifest can end up in the  Done or Error state. Any changes to the input manifest while it is in the Scheduled state will be reflected after  it is moved to the Done state. After which the cycle repeats.</p> <p>Each cluster has a current state and desired state based on which tasks are created. The desired state is created only once, when changes to the configuration are detected. Several tasks can be created that will gradually converge the current state to the desired state. Each time a task is picked up by the builder service the relevant state from the current state is transferred to the task so that each task has up-to-date information about current infrastructure and its up to the builder service to build/modify/delete the missing pieces in the picked up task.</p> <p>Once a task is done building, either in error or successfully, the current state should be updated by the builder service so that the manager has the actual information about the current state of the infrastructure. When the manager receives a request for the update of the current state it transfers relevant information to the desired state that was created at the beginning, before the tasks were scheduled. This is the only point where the desired state is updated, and we only transfer information from current state (such as newly build nodes, ips, etc...). After all tasks have finished successfully the current and desired state should match.</p>"},{"location":"claudie-workflow/claudie-workflow/#rolling-updates","title":"Rolling updates","text":"<p>Unless otherwise specified, the default is to use the external templates located at https://github.com/berops/claudie-config to build the infrastructure for the dynamic nodepools. The templates provide reasonable defaults that anyone can use to build multi-provider clusters.</p> <p>As we understand that someone may need more specific scenarios, we allow these external templates to be overridden by the user, see https://docs.claudie.io/latest/input-manifest/external-templates/ for more information. By providing the ability to specify the templates that should be used when building the infrastructure of the InputManifest, there is one common scenario that we decided should be handled by the manager service, which is rolling updates.</p> <p>Rolling updates of nodepools are performed when a change to a provider's external templates is registered. The manager then checks that the external repository of the new templates exists and uses them to perform a rolling update of the already built infrastructure. The rolling update is performed in the following steps</p> <p></p> <p>If a failure occurs during the rolling update of a single Nodepool, the state is rolled back to the last possible working state. Rolling updates have a retry strategy that results in endless processing of rolling updates until it succeeds.</p> <p>If the rollback to the last working state fails, it will also be retried indefinitely, in which case it is up to the claudie user to repair the cluster so that the rolling update can continue.</p> <p>The individual states of the Input Manifest and how they are processed within manager are further visually described in the following sections.</p>"},{"location":"claudie-workflow/claudie-workflow/#pending-state","title":"Pending State","text":""},{"location":"claudie-workflow/claudie-workflow/#scheduled-state","title":"Scheduled State","text":""},{"location":"claudie-workflow/claudie-workflow/#doneerror-state","title":"Done/Error State","text":""},{"location":"claudie-workflow/claudie-workflow/#builder","title":"Builder","text":"<p>Processed tasks scheduled by the manager gradually building the desired state of the infrastructure. It communicates with <code>terraformer</code>, <code>ansibler</code>, <code>kube-eleven</code> and <code>kuber</code> services in order to manage the infrastructure. </p>"},{"location":"claudie-workflow/claudie-workflow/#flow_1","title":"Flow","text":"<ul> <li>Periodically polls Manager for available tasks to be worked on.</li> <li>Communicates with Terraformer, Ansibler, Kube-eleven and Kuber</li> <li>After a task is completed, either successfully or not, the current state is updated along with the status, if errored.</li> </ul>"},{"location":"claudie-workflow/claudie-workflow/#terraformer","title":"Terraformer","text":"<p>Terraformer creates or destroys infrastructure via Terraform calls.</p> <p>For the API see the GRPC definitions.</p>"},{"location":"claudie-workflow/claudie-workflow/#ansibler","title":"Ansibler","text":"<p>Ansibler uses Ansible to:</p> <ul> <li>set up Wireguard VPN between the infrastructure spawned in the Terraformer service. </li> <li>set up nginx load balancer for the infrastructure</li> <li>install dependencies for required by nodes in a kubernetes cluster</li> </ul> <p>For the API see the GRPC definitions.</p>"},{"location":"claudie-workflow/claudie-workflow/#kube-eleven","title":"Kube-eleven","text":"<p>Kube-eleven uses KubeOne to spin up a kubernetes clusters, out of the spawned and pre-configured infrastructure.</p> <p>For the API see the GRPC definitions.</p>"},{"location":"claudie-workflow/claudie-workflow/#kuber","title":"Kuber","text":"<p>Kuber manipulates the cluster resources using <code>kubectl</code>.</p> <p>For the API see the GRPC definitions.</p>"},{"location":"claudie-workflow/claudie-workflow/#claudie-operator","title":"Claudie-operator","text":"<p>Claudie-operator is a layer between the user and Claudie. It is a <code>InputManifest</code> Custom Resource Definition controller,  that will communicate with the <code>manager</code> service to communicate changes to the config made by the user.</p>"},{"location":"claudie-workflow/claudie-workflow/#flow_2","title":"Flow","text":"<ul> <li>User applies a new InputManifest crd holding a configuration of the desired clusters</li> <li>Claudie-operator detects it and processes the created/modified input manifest</li> <li>Upon deletion of user-created InputManifest, Claudie-operator initiates a deletion process of the manifest</li> </ul>"},{"location":"commands/commands/","title":"Command Cheat Sheet","text":"<p>In this section, we'll describe <code>kubectl</code> commands to interact with Claudie.</p>"},{"location":"commands/commands/#monitoring-the-cluster-state","title":"Monitoring the cluster state","text":"<p>Watch the cluster state in the <code>InputManifest</code> that is provisioned. <pre><code>watch -n 2 'kubectl get inputmanifests.claudie.io manifest-name -ojsonpath='{.status}' | jq .'\n{\n  \"clusters\": {\n    \"my-super-cluster\": {\n      \"phase\": \"NONE\",\n      \"state\": \"DONE\"\n    }\n  },\n  \"state\": \"DONE\"\n}   \n</code></pre></p>"},{"location":"commands/commands/#viewing-the-cluster-metadata","title":"Viewing the cluster metadata","text":"<p>Each secret created by Claudie has following labels:</p> Key Value <code>claudie.io/project</code> Name of the project. <code>claudie.io/cluster</code> Name of the cluster. <code>claudie.io/cluster-id</code> ID of the cluster. <code>claudie.io/output</code> Output type, either <code>kubeconfig</code> or <code>metadata</code>. <p>Claudie creates kubeconfig secret in claudie namespace:</p> <p><pre><code>kubectl get secrets -n claudie -l claudie.io/output=kubeconfig\n</code></pre> <pre><code>NAME                                  TYPE     DATA   AGE\nmy-super-cluster-6ktx6rb-kubeconfig   Opaque   1      134m\n</code></pre></p> <p>You can recover kubeconfig for your cluster with the following command:</p> <pre><code>kubectl get secrets -n claudie -l claudie.io/output=kubeconfig,claudie.io/cluster=$YOUR-CLUSTER-NAME -o jsonpath='{.items[0].data.kubeconfig}' | base64 -d &gt; my-super-cluster-kubeconfig.yaml\n</code></pre> <p>If you want to connect to your dynamic k8s nodes via SSH, you can recover private SSH key for each nodepool:</p> <pre><code>kubectl get secrets -n claudie -l claudie.io/output=metadata,claudie.io/cluster=$YOUR-CLUSTER-NAME -ojsonpath='{.items[0].data.metadata}' | base64 -d | jq '.dynamic_nodepools | map_values(.nodepool_private_key)'\n</code></pre> <p>To recover public IP of your dynamic k8s nodes to connect to via SSH:   <pre><code>kubectl get secrets -n claudie -l claudie.io/output=metadata,claudie.io/cluster=$YOUR-CLUSTER-NAME -ojsonpath='{.items[0].data.metadata}' | base64 -d | jq '.dynamic_nodepools | map_values(.node_ips)'\n</code></pre></p> <p>You can display all dynamic load balancer nodes metadata by:</p> <pre><code>kubectl get secrets -n claudie -l claudie.io/output=metadata,claudie.io/cluster=$YOUR-CLUSTER-NAME -ojsonpath='{.items[0].data.metadata}' | base64 -d | jq -r .dynamic_load_balancer_nodepools\n</code></pre> <p>In case you want to connect to your dynamic load balancer nodes via SSH, you can recover private SSH key:</p> <pre><code>kubectl get secrets -n claudie -l claudie.io/output=metadata,claudie.io/cluster=$YOUR-CLUSTER-NAME -ojsonpath='{.items[0].data.metadata}' | base64 -d | jq '.dynamic_load_balancer_nodepools | .[]'\n</code></pre> <p>To recover public IP of your dynamic load balancer nodes to connect to via SSH:</p> <pre><code>kubectl get secrets -n claudie -l claudie.io/output=metadata,claudie.io/cluster=$YOUR-CLUSTER-NAME -ojsonpath='{.items[0].data.metadata}' | base64 -d | jq '.dynamic_load_balancer_nodepools | .[] | map_values(.node_ips)'\n</code></pre> <p>You can display all static load balancer nodes metadata by:   <pre><code>kubectl get secrets -n claudie -l claudie.io/output=metadata,claudie.io/cluster=$YOUR-CLUSTER-NAME -ojsonpath='{.items[0].data.metadata}' | base64 -d | jq -r .static_load_balancer_nodepools\n</code></pre></p> <p>In order to display public IPs and private SSH keys of your static load balancer nodes by:</p> <pre><code>kubectl get secrets -n claudie -l claudie.io/output=metadata,claudie.io/cluster=$YOUR-CLUSTER-NAME -ojsonpath='{.items[0].data.metadata}' | base64 -d | jq -r '.static_load_balancer_nodepools | .[] | map_values(.node_info)'\n</code></pre> <p>To connect to one of your static load balancer nodes via SSH, you can recover private SSH key:</p> <pre><code>kubectl get secrets -n claudie -l claudie.io/output=metadata,claudie.io/cluster=$YOUR-CLUSTER-NAME -ojsonpath='{.items[0].data.metadata}' | base64 -d | jq -r '.static_load_balancer_nodepools | .[]'\n</code></pre>"},{"location":"contributing/contributing/","title":"Contributing","text":""},{"location":"contributing/contributing/#bug-reports","title":"Bug reports","text":"<p>When you encounter a bug, please create a new issue and use our bug template. Before you submit, please check:</p> <ul> <li>...that the issue you want to open is not a duplicate</li> <li>...that you submitted the logs/screenshots of any errors and a concise way to reproduce the issue</li> <li>...the input manifest you used </li> </ul> <p>be careful not to include your cloud credentials</p>"},{"location":"contributing/local-testing/","title":"Local testing of Claudie","text":"<p>In order to speed up the development, Claudie can be run locally for initial testing purposes. However, it's important to note that running Claudie locally has limitations compared to running it in a Kubernetes cluster.</p>"},{"location":"contributing/local-testing/#limitations-of-claudie-when-running-locally","title":"Limitations of Claudie when running locally","text":""},{"location":"contributing/local-testing/#claudie-operatorcrd-testing","title":"Claudie Operator/CRD testing","text":"<p>The Operator component as well as CRDs heavily relies on the Kubernetes cluster. However, with a little hacking, you can test them, by creating local cluster (minikube/kind/...), and exporting environment variable <code>KUBECONFIG</code> pointing to the local cluster Kubeconfig. Once you start the Claudie Operator, it should pick up the Kubeconfig and you can use local cluster to deploy and test CRDs.</p>"},{"location":"contributing/local-testing/#autoscaling-testing","title":"Autoscaling testing","text":"<p>Testing or simulating the Claudie autoscaling is not feasible when running Claudie locally because it dynamically deploys Cluster Autoscaler and Autoscaler Adapter in the management cluster.</p>"},{"location":"contributing/local-testing/#claudie-outputs","title":"Claudie outputs","text":"<p>Since Claudie generates two types of output per cluster (node metadata and kubeconfig), testing these outputs is not possible because they are created as Kubernetes Secrets.</p>"},{"location":"contributing/local-testing/#requirements-to-run-claudie-locally","title":"Requirements to run Claudie locally","text":"<p>As Claudie uses number of external tools to build and manage clusters, it is important these tools are installed on your local system.</p> <ul> <li><code>go</code> - check current version used in <code>go.mod</code> file</li> <li><code>terraform</code> - check current version used in Terraformer Dockerfile</li> <li><code>ansible</code> - check current version used in Ansibler Dockerfile</li> <li><code>kubeone</code> - check current version used in Kube-eleven Dockerfile</li> <li><code>kubectl</code> - check current version used in Kuber Dockerfile</li> <li><code>mongo</code> - when running locally, we recommend to run <code>mongo</code> as a container, check current version used in manifests for Mongo</li> <li><code>dynamo</code> - when running locally, we recommend to run <code>dynamo</code> as a container, check current version used in manifests for Dynamo</li> <li><code>minio</code> - when running locally, we recommend to run <code>minio</code> as a container, check current version used in manifests for Minio</li> </ul>"},{"location":"contributing/local-testing/#how-to-run-claudie-locally","title":"How to run Claudie locally","text":"<p>To simplify the deployment of Claudie into local system, we recommend to use rules defined in Makefile.</p> <p>To start all the datastores, simply run <code>make datastoreStart</code>, which will create containers for each required datastore with preconfigured port-forwarding.</p> <p>To start all services, run <code>make &lt;service name&gt;</code>, in separate shells. In case you will make some changes to the code, to apply them, please kill the process and start it again using <code>make &lt;service name&gt;</code>.</p>"},{"location":"contributing/local-testing/#how-to-test-claudie-locally","title":"How to test Claudie locally","text":"<p>Once Claudie is up and running, there are three main ways to test it locally.</p>"},{"location":"contributing/local-testing/#test-claudie-using-testing-framework","title":"Test Claudie using Testing-framework","text":"<p>You can test Claudie deployed locally via custom made testing framework. It was designed to support testing from local so the code itself does not require any changes. However, in order to supply testing input manifest, you have to create directory called <code>test-sets</code> in the <code>./testing-framework</code>, which will contain the input manifests. Bear in mind that these manifest are not CRDs, rather they are raw YAML file which is described in <code>/internal/manifest/manifest.go</code>.</p> <p>This way of testing brings benefits like automatic verification of Longhorn deployment or automatic clean up of the infrastructure upon failure.</p> <p>To run the Testing-framework locally, use <code>make test</code> rule which will start the testing. If you wish to disable the automatic clean up, set the environment variable <code>AUTO_CLEAN_UP</code> to <code>FALSE</code>.</p> <p>Example of directory structure:</p> <pre><code>services/testing-framework/\n\u251c\u2500\u2500 ...\n\u2514\u2500\u2500 test-sets\n    \u2514\u2500\u2500 test-set-dev\n        \u251c\u2500\u2500 1.yaml\n        \u251c\u2500\u2500 2.yaml\n        \u2514\u2500\u2500 3.yaml\n</code></pre> <p>Example of raw YAML input manifest:</p> <pre><code>name: TestSetDev\n\nproviders:\n  hetzner:\n    - name: hetzner-1\n      credentials: \"api token\"\n  gcp:\n    - name: gcp-1\n      credentials: |\n        service account key as JSON\n      gcpProject: \"project id\"\n  oci:\n    - name: oci-1\n      privateKey: |\n        -----BEGIN RSA PRIVATE KEY-----\n        ..... put the private key here ....\n        -----END RSA PRIVATE KEY-----\n      keyFingerprint: \"key fingerprint\"\n      tenancyOcid: \"tenancy ocid\"\n      userOcid: \"user ocid\"\n      compartmentOcid: \"compartment ocid\"\n  aws:\n    - name: aws-1\n      accessKey: \"access key\"\n      secretKey: \"secret key\"\n  azure:\n    - name: azure-1\n      subscriptionId: \"subscription id\"\n      tenantId: \"tenant id\"\n      clientId: \"client id\"\n      clientSecret: \"client secret\"\n  hetznerdns:\n    - name: hetznerdns-1\n      apiToken: \"api token\"\n  cloudflare:\n    - name: cloudflare-1\n      apiToken: \"api token\"\n\nnodePools:\n  dynamic:\n    - name: htz-compute\n      providerSpec:\n        name: hetzner-1\n        region: nbg1\n        zone: nbg1-dc3\n      count: 1\n      serverType: cpx11\n      image: ubuntu-22.04\n      storageDiskSize: 50\n\n    - name: hetzner-lb\n      providerSpec:\n        name: hetzner-1\n        region: nbg1\n        zone: nbg1-dc3\n      count: 1\n      serverType: cpx11\n      image: ubuntu-22.04\n\n  static:\n    - name: static-pool\n      nodes:\n        - endpoint: \"192.168.52.1\"\n          username: root\n          privateKey: |\n            -----BEGIN RSA PRIVATE KEY-----\n            ...... put the private key here .....\n            -----END RSA PRIVATE KEY-----\n        - endpoint: \"192.168.52.2\"\n          username: root\n          privateKey: |\n            -----BEGIN RSA PRIVATE KEY-----\n            ...... put the private key here .....\n            -----END RSA PRIVATE KEY-----\n\nkubernetes:\n  clusters:\n    - name: dev-test\n      version: v1.27.0\n      network: 192.168.2.0/24\n      pools:\n        control:\n          - static-pool\n        compute:\n          - htz-compute\n\nloadBalancers:\n  roles:\n    - name: apiserver-lb\n      protocol: tcp\n      port: 6443\n      targetPort: 6443\n      targetPools: \n        - static-pool\n  clusters:\n    - name: miro-lb\n      roles:\n        - apiserver-lb\n      dns:\n        dnsZone: zone.com\n        provider: cloudflare-1\n      targetedK8s: dev-test\n      pools:\n        - hetzner-lb\n</code></pre>"},{"location":"contributing/local-testing/#test-claudie-using-manual-manifest-injection","title":"Test Claudie using manual manifest injection","text":"<p>To test Claudie in a more \"manual\" way, you can use the specified GRPC API to inject/delete/modify an input manifest. </p> <p>When using this technique, you most likely will omit the initial step of the InputManifest being passed through the operator. If this is the case, you will need to add templates to the providers listed in the InputManifest otherwise the workflow will panic at an early stage due to unset templates.</p> <p>To specify templates you add them to the provider definition as shown in the snippet below: <pre><code>  hetzner:\n    - name: hetzner-1\n      credentials: \"api token\"\n      templates:\n        repository: \"https://github.com/berops/claudie-config\"\n        path: \"templates/terraformer/hetzner\"\n</code></pre></p> <p>We provide ready-to-use terraform templates, which can be used by claudie at https://github.com/berops/claudie-config, If you would like to use your own, you can fork the repo, or write your own templates and modify the provider definition in the InputManifest to point to your templates</p>"},{"location":"contributing/local-testing/#deploy-claudie-in-the-local-cluster-for-testing","title":"Deploy Claudie in the local cluster for testing","text":"<p>Claudie can be also tested on a local cluster by following these steps.</p> <ol> <li> <p>Spin up a local cluster using a tool like Kind, Minikube, or any other preferred method.</p> </li> <li> <p>Build the images for Claudie from the current source code by running the command <code>make containerimgs</code>. This command will build all the necessary images for Claudie and assign a new tag; a short hash from the most recent commit.</p> </li> <li> <p>Update the new image tag in the relevant <code>kustomization.yaml</code> files. These files can be found in the <code>./manifests</code> directory. Additionally, set the <code>imagePullPolicy</code> to <code>Never</code>.</p> </li> <li> <p>Import the built images into your local cluster. This step will vary depending on the specific tool you're using for the local cluster. Refer to the documentation of the cluster tool for instructions on importing custom images.</p> </li> <li> <p>Apply the Claudie manifests to the local cluster.</p> </li> </ol> <p>By following these steps, you can set up and test Claudie on a local cluster using the newly built images. Remember, these steps are going to be repeated if you will make changes to the source code.</p>"},{"location":"contributing/release/","title":"How to release a new version of Claudie","text":"<p>The release process of Claudie consists of a few manual steps and a few automated steps.</p>"},{"location":"contributing/release/#manual-steps","title":"Manual steps","text":"<p>Whoever is responsible for creating a new release has to:</p> <ol> <li>Write a new entry to a relevant Changelog document</li> <li>Add release notes to the Releases page</li> <li>Publish a release</li> </ol>"},{"location":"contributing/release/#automated-steps","title":"Automated steps","text":"<p>After a new release is published, a release pipeline and a release-docs pipeline runs.</p> <p>A release pipeline consists of the following steps:</p> <ol> <li>Build new images tagged with the release tag</li> <li>Push them to the container registry where anyone can pull them</li> <li>Add Claudie manifest files to the release assets, with image tags referencing this release</li> </ol> <p>A release-docs pipeline consists of the following steps:</p> <ol> <li>If there is a new Changelog file:<ol> <li>Checkout to a new feature branch</li> <li>Add reference to the new Changelog file in mkdocs.yml</li> <li>Create a PR to merge changes from new feature branch to master (PR needs to be created to update changes in <code>master</code> branch and align with branch protection)</li> </ol> </li> <li>Deploy new version of docs on docs.claudie.io</li> </ol>"},{"location":"creating-claudie-backup/creating-claudie-backup/","title":"Creating Claudie Backup","text":"<p>In this section we'll explain where the state of Claudie is and backing up the necessary components and restoring them on a completely new cluster.</p>"},{"location":"creating-claudie-backup/creating-claudie-backup/#claudie-state","title":"Claudie state","text":"<p>Claudie stores its state in 3 different places. </p> <ul> <li>Input Manifests are stored in Mongo.</li> <li>Terraform state files are stored in MinIO</li> <li>Locking Mechanism for the state files is implemented via DynamoDB</li> </ul> <p>These are the only services that will have a PVC attached to it, the other are stateless.</p>"},{"location":"creating-claudie-backup/creating-claudie-backup/#backing-up-claudie","title":"Backing up Claudie","text":""},{"location":"creating-claudie-backup/creating-claudie-backup/#using-velero","title":"Using Velero","text":"<p>This is the primary backup and restore method.</p> <p>Velero does not support HostPath volumes. If the PVCs in your management cluster are attached to such volumes (e.g. when running on Kind or MiniKube), the backup will not work. In this case, use the below backup method.</p> <p>All resources that are deployed or created by Claudie can be identified with the following label:</p> <pre><code>    app.kubernetes.io/part-of: claudie\n</code></pre> <p>If you want to include your deployed Input Manifests to be part of the backup you'll have to add the same label to them.</p> <p>We'll walk through the following scenario step-by-step to back up claudie and then restore it. </p> <p>Claudie is already deployed on an existing Management Cluster and at least 1 Input Manifest has been applied. The state is backed up and the Management Cluster is replaced by a new one on which we restore the state.</p> <p>To back up the resources we'll be using Velero version v1.11.0.</p> <p>The following steps will all be executed with the existing Management Cluster in context.</p> <ol> <li> <p>To create a backup, Velero needs to store the state to external storage. The list of supported    providers for the external storage can be found in the link.    In this guide we'll be using AWS S3 object storage for our backup.</p> </li> <li> <p>Prepare the S3 bucket by following the first two steps in this setup guide, excluding the installation step, as this will be different for our use-case.</p> </li> </ol> <p>If you do not have the <code>aws</code> CLI locally installed, follow the user guide to set it up.</p> <ol> <li>Execute the following command to install Velero on the Management Cluster. <pre><code>velero install \\\n--provider aws \\\n--plugins velero/velero-plugin-for-aws:v1.6.0 \\\n--bucket $BUCKET \\\n--secret-file ./credentials-velero \\\n--backup-location-config region=$REGION \\\n--snapshot-location-config region=$REGION \\\n--use-node-agent \\\n--default-volumes-to-fs-backup\n</code></pre></li> </ol> <p>Following the instructions in step 2, you should have a <code>credentials-velero</code> file with the access and secret keys for the aws setup. The env variables <code>$BUCKET</code> and <code>$REGION</code> should be set to the name and region for the bucket created in AWS S3.</p> <p>By default Velero will use your default config <code>$HOME/.kube/config</code>, if this is not the config that points to your Management Cluster, you can override it with the <code>--kubeconfig</code> argument.</p> <ol> <li>Backup claudie by executing <pre><code>velero backup create claudie-backup --selector app.kubernetes.io/part-of=claudie\n</code></pre></li> </ol> <p>To track the progress of the backup execute <pre><code>velero backup describe claudie-backup --details\n</code></pre></p> <p>From this point the new Management Cluster for Claudie is in context. We expect that your default <code>kubeconfig</code> points to the new Management Cluster, if it does not, you can override it in the following commands using <code>--kubeconfig ./path-to-config</code>.</p> <ol> <li>Repeat the step to install Velero, but now on the new Management Cluster.</li> <li>Install cert manager to the new Management Cluster by executing: <pre><code>kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.12.0/cert-manager.yaml\n</code></pre></li> <li>To restore the state that was stored in the S3 bucket execute <pre><code>velero restore create --from-backup claudie-backup\n</code></pre></li> </ol> <p>Once all resources are restored, you should be able to deploy new input manifests and also modify existing infrastructure  without any problems.</p>"},{"location":"creating-claudie-backup/creating-claudie-backup/#manual-backup","title":"Manual backup","text":"<p>Claudie is already deployed on an existing Management Cluster and at least 1 Input Manifest has been applied.</p> <p>Create a directory where the backup of the state will be stored.</p> <pre><code>mkdir claudie-backup\n</code></pre> <p>Put your Claudie inputmanifests into the created folder, e.g. <code>kubectl get InputManifest -A -oyaml &gt; ./claudie-backup/all.yaml</code></p> <p>We will now back up the state of the respective input manifests from MongoDB and MinIO.</p> <pre><code>kubectl get pods -n claudie\n\nNAME                                READY   STATUS      RESTARTS      AGE\nansibler-6f4557cf74-b4dts           1/1     Running     0             18m\nbuilder-5d68987c86-qdfd5            1/1     Running     0             18m\nclaudie-operator-6d9ddc7f8b-hv84c   1/1     Running     0             18m\nmanager-5d75bfffc6-d9qfm            1/1     Running     0             18m\ncreate-table-job-ghb9f              0/1     Completed   1             18m\ndynamodb-6d65df988-c626j            1/1     Running     0             18m\nkube-eleven-556cfdfd98-jq6hl        1/1     Running     0             18m\nkuber-7f8cd4cd89-6ds2w              1/1     Running     0             18m\nmake-bucket-job-9mjft               0/1     Completed   0             18m\nminio-0                             1/1     Running     0             18m\nminio-1                             1/1     Running     0             18m\nminio-2                             1/1     Running     0             18m\nminio-3                             1/1     Running     0             18m\nmongodb-6ccb5f5dff-ptdw2            1/1     Running     0             18m\nterraformer-66c6f67d98-pwr9t        1/1     Running     0             18m\n</code></pre> <p>To backup state from MongoDB execute the following command</p> <pre><code>kubectl exec -n claudie mongodb-&lt;your-mongdb-pod&gt; -- sh -c 'mongoexport --uri=mongodb://$MONGO_INITDB_ROOT_USERNAME:$MONGO_INITDB_ROOT_PASSWORD@localhost:27017/claudie -c inputManifests --authenticationDatabase admin' &gt; claudie-backup/inputManifests\n</code></pre> <p>Next we need to backup the state from MinIO. Port-forward the MinIO service so that it is accessible from localhost.</p> <pre><code>kubectl port-forward -n claudie svc/minio 9000:9000\n</code></pre> <p>Setup an alias for the mc command line tool.</p> <pre><code>mc alias set claudie-minio http://127.0.0.1:9000 &lt;ACCESSKEY&gt; &lt;SECRETKEY&gt;\n</code></pre> <p>Provide the access and secret key for minio. The default can be found in the github repository in the <code>manifests/claudie/minio/secrets</code> folder. If you have not changed them, we strongly encourage you to do so!</p> <p>Download the state into the backup folder</p> <pre><code>mc mirror claudie-minio/claudie-tf-state-files ./claudie-backup\n</code></pre> <p>You now have everything you need to restore your input manifests to a new management cluster.</p> <p>These files will contain your credentials, DO NOT STORE THEM OUT IN THE PUBLIC!</p> <p>To restore the state on your new management cluster you can follow these commands. We expect that your default <code>kubeconfig</code> points to the new Management Cluster, if it does not, you can override it in the following commands using <code>--kubeconfig ./path-to-config</code>.</p> <p>Copy the collection into the MongoDB pod.</p> <pre><code>kubectl cp ./claudie-backup/inputManifests mongodb-&lt;your-mongodb-pod&gt;:/tmp/inputManifests -n claudie\n</code></pre> <p>Import the state to MongoDB.</p> <pre><code>kubectl exec -n claudie mongodb-&lt;your-mongodb-pod&gt; -- sh -c 'mongoimport --uri=mongodb://$MONGO_INITDB_ROOT_USERNAME:$MONGO_INITDB_ROOT_PASSWORD@localhost:27017/claudie -c inputManifests --authenticationDatabase admin --file /tmp/inputManifests'\n</code></pre> <p>Don't forget to delete the <code>/tmp/inputManifests</code> file</p> <p>Port-forward the MinIO service and import the backed up state.</p> <pre><code>mc cp --recursive ./claudie-backup/&lt;your-folder-name-downloaded-from-minio&gt; claudie-minio/claudie-tf-state-files\n</code></pre> <p>You can now apply your Claudie inputmanifests which will be immediately in the <code>DONE</code> stage. You can verify this with</p> <pre><code>kubectl get inputmanifests -A\n</code></pre> <p>Now you can make any new changes to your inputmanifests on the new management cluster and the state will be re-used. </p> <p>The secrets for the clusters, namely kubeconfig and cluster-metadata, are re-created after the workflow with the changes has finished.</p> <p>Alternatively you may also use any GUI clients for MongoDB and Minio for more straightforward backup of the state. All you need to backup is the bucket <code>claudie-tf-state-files</code> in MinIO and the collection <code>inputManifests</code> from MongoDB</p> <p>Once all data is restored, you should be able to deploy new input manifests and also modify existing infrastructure  without any problems.</p>"},{"location":"docs-guides/deployment-workflow/","title":"Documentation deployment","text":"<p>Our documentation is hosted on GitHub Pages. Whenever a new push to gh-pages branch happens, it will deploy a new version of the doc. All the commits and pushes to this branch are automated through our release-docs.yml pipeline with the usage of mike tool.</p> <p>That's also the reason, why we do not recommend making any manual changes in gh-pages branch. However, in case you have to, use the commands below.</p>"},{"location":"docs-guides/deployment-workflow/#generate-a-new-version-of-the-docs","title":"Generate a new version of the docs","text":"<ul> <li>To create new version of docs</li> </ul> <pre><code>mike deploy &lt;version&gt;\n</code></pre> <ul> <li>To deploy new version to live page</li> </ul> <pre><code>mike deploy &lt;version&gt; --push\n</code></pre> <ul> <li>To make new version the default version when visiting the docs page</li> </ul> <pre><code>mike set-default &lt;version&gt;\n</code></pre>"},{"location":"docs-guides/deployment-workflow/#deploy-docs-manually-from-some-older-github-tags","title":"Deploy docs manually from some older GitHub tags","text":"<ul> <li>Checkout to the desired tag</li> </ul> <pre><code>git checkout tags/&lt;tag&gt;\n</code></pre> <ul> <li>Create new version of <code>mkdocs.yml</code></li> </ul> <p>To find out how, follow the mkdocs documentation</p> <ul> <li>Create python virtual environment</li> </ul> <pre><code>python3 -m venv ./venv\n</code></pre> <ul> <li>Activate python virtual environment</li> </ul> <pre><code>source ./venv/bin/activate\n</code></pre> <ul> <li>Install python requirements</li> </ul> <pre><code>pip install -r requirements.txt\n</code></pre> <ul> <li>Deploy new version of docs</li> </ul> <pre><code>mike deploy &lt;version&gt; --push\n</code></pre>"},{"location":"docs-guides/deployment-workflow/#deploy-docs-for-a-new-release-manually","title":"Deploy docs for a new release manually","text":"<p>In case the release-docs.yml fails, you can deploy the new version manually by following this steps:</p> <ul> <li>Checkout to a new branch</li> </ul> <pre><code>git checkout tags/&lt;release tag&gt;\n</code></pre> <ul> <li>Create python virtual environment</li> </ul> <pre><code>python3 -m venv ./venv\n</code></pre> <ul> <li>Activate python virtual environment</li> </ul> <pre><code>source ./venv/bin/activate\n</code></pre> <ul> <li>Install python requirements</li> </ul> <pre><code>pip install -r requirements.txt\n</code></pre> <ul> <li>Deploy new version of docs</li> </ul> <pre><code>mike deploy &lt;release tag&gt; latest --push -u\n</code></pre> <p> Don't forget to use the <code>latest</code> tag in the last command, because otherwise the new version will not be loaded as default one, when visiting docs.claudie.io </p> <p>Find more about how to work with mike.</p>"},{"location":"docs-guides/deployment-workflow/#automatic-update-of-the-latest-documentation-version","title":"Automatic update of the latest documentation version","text":"<p>The <code>automatic-docs-update.yml</code> pipeline will update the docs automatically, in case you add the label <code>refresh-docs</code> or comment <code>/refresh-docs</code> on your PR. In order to trigger this pipeline again you have to re-add <code>refresh-docs</code> label or once again comment <code>/refresh-docs</code> in your PR.</p> <p>[!NOTE] <code>/refresh-docs</code> comment triggers automatic update only when the <code>automatic-docs-update.yml</code> file is in the default branch.</p>"},{"location":"docs-guides/development/","title":"Development of the Claudie official docs","text":"<p>First of all, it is worth to mention, that we are using MkDocs to generate HTML documents from markdown ones. To make our documentation prettier, we have used Material theme for MkDocs. Regarding the version of our docs we are using mike.</p>"},{"location":"docs-guides/development/#how-to-run","title":"How to run","text":"<p>First install the dependencies from requirements.txt in your local machine. However before doing that we recommend creating a virtual environment by running the command below.</p> <pre><code>python3 -m venv ./venv\n</code></pre> <p>After that you want to activate that newly create virtual environment by running:</p> <pre><code>source ./venv/bin/activate\n</code></pre> <p>Now, we can install the docs dependencies, which we mentioned before.</p> <pre><code>pip install -r requirements.txt\n</code></pre> <p>After successfull instalation, you can run command below, which generates HTML files for the docs and host in on your local server.</p> <pre><code>mkdocs serve\n</code></pre>"},{"location":"docs-guides/development/#how-to-test-changes","title":"How to test changes","text":"<p>Whenever you make some changes in docs folder or in mkdocs.yml file, you can see if the changes were applied as you expected by running the command below, which starts the server with newly generated docs.</p> <pre><code>mkdocs serve\n</code></pre> <p> Using this command you will not see the docs versioning, because we are using mike tool for this. </p> <p>In case you want to test the docs versioning, you will have to run:</p> <pre><code>mike serve\n</code></pre> <p>Keep in mind, that mike takes the docs versions from gh-pages branch. That means, you will not be able to see your changes, in case you didn't run the command below before.</p> <pre><code>mike deploy &lt;version&gt;\n</code></pre> <p> Be careful, because this command creates a new version of the docs in your local gh-pages branch. </p>"},{"location":"faq/FAQ/","title":"Frequently Asked Question","text":"<p>We have prepared some of our most frequently asked question to help you out!</p>"},{"location":"faq/FAQ/#does-claudie-make-sense-as-a-pure-k8s-orchestration-on-a-single-cloud-provider-iaas","title":"Does Claudie make sense as a pure K8s orchestration on a single cloud-provider IaaS?","text":"<p>Since Claudie specializes in multicloud, you will likely face some drawbacks, such as the need for a public IPv4 address for each node. Otherwise it works well in a single-provider mode. Using Claudie will also give you some advantages, such as scaling to multi-cloud as your needs change, or the autoscaler that Claudie provides.</p>"},{"location":"faq/FAQ/#which-scenarios-make-sense-for-using-claudie-and-which-dont","title":"Which scenarios make sense for using Claudie and which don't?","text":"<p>Claudie aims to address the following scenarios, described in more detail on the use-cases page:</p> <ul> <li>Cost savings</li> <li>Data locality</li> <li>Compliance (e.g. GDPR)</li> <li>Managed Kubernetes for cloud providers that do not offer it</li> <li>Cloud bursting</li> <li>Service interconnect</li> </ul> <p>Using Claudie doesn't make sense when you rely on specific features of a cloud provider and necessarily tying yourself to that cloud provider.</p>"},{"location":"faq/FAQ/#is-there-any-networking-performance-impact-due-to-the-introduction-of-the-vpn-layer","title":"Is there any networking performance impact due to the introduction of the VPN layer?","text":"<p>We compared the use of the VPN layer with other solutions and concluded that the impact on performance is negligible. \u2028If you are interested in performed benchmarks, we summarized the results in our blog post.</p>"},{"location":"faq/FAQ/#what-is-the-performance-impact-of-a-geographically-distributed-control-plane-in-claudie","title":"What is the performance impact of a geographically distributed control plane in Claudie?","text":"<p>We have performed several tests and problems start to appear when the control nodes are geographically about 600 km apart. Although this is not an answer that fits all scenarios and should only be taken as a reference point.</p> <p>If you are interested in the tests we have run and a more detailed answer, you can read more in our blog post.</p>"},{"location":"faq/FAQ/#does-the-cloud-provider-traffic-egress-bill-represent-a-significant-part-on-the-overall-running-costs","title":"Does the cloud provider traffic egress bill represent a significant part on the overall running costs?","text":"<p>Costs are individual and depend on the cost of the selected cloud provider and the type of workload running on the cluster based on the user's needs. Networking expenses can exceed 50% of your provider bill, therefore we recommend making your workload geography and provider aware (e.g. using taints and affinities).</p>"},{"location":"faq/FAQ/#should-i-be-worried-about-giving-claudie-provider-credentials-including-ssh-keys","title":"Should I be worried about giving Claudie provider credentials, including ssh keys?","text":"<p>Provider credentials are created as secrets in the Management Cluster for Claudie which you then reference when creating the input manifest, that is passed to Claudie. Claudie only uses the credentials to create a connection to nodes in the case of static nodepools or to provision the required infrastructure in the case of dynamic nodepools. The credentials are as secure as your secret management allows.</p> <p>We are transparent and all of our code is open-sourced, if in doubt you can always check for yourself.</p>"},{"location":"faq/FAQ/#does-each-node-need-a-public-ip-address","title":"Does each node need a public IP address?","text":"<p>For dynamic nodepools, nodes created by Claudie in specified cloud providers, each node needs a public IP, for static nodepools no public IP is needed.</p>"},{"location":"faq/FAQ/#is-a-guicliclusterapi-providerterraform-provider-planned","title":"Is a GUI/CLI/ClusterAPI provider/Terraform provider planned?","text":"<p>A GUI is not actively considered at this point in time. Other possibilities are openly discussed in this github issue.</p>"},{"location":"faq/FAQ/#what-is-the-roadmap-for-adding-support-for-new-cloud-iaas-providers","title":"What is the roadmap for adding support for new cloud IaaS providers?","text":"<p>Adding support for a new cloud provider is an easy task. Let us know your needs.</p>"},{"location":"feedback/feedback-form/","title":"Feedback form","text":"Your message:                       Send"},{"location":"getting-started/detailed-guide/","title":"Detailed guide","text":"<p>This detailed guide for Claudie serves as a resource for providing an overview of Claudie's features, installation instructions, customization options, and its role in provisioning and managing clusters. We'll start by guiding you through the process of setting up a management cluster, where Claudie will be installed, enabling you to effortlessly monitor and control clusters across multiple hyperscalers.</p> <p>Tip!</p> <p>Claudie offers extensive customization options for your Kubernetes cluster across multiple hyperscalers. This detailed guide assumes you have AWS and Hetzner accounts. You can customize your deployment across different supported providers. If you wish to use different providers, we recommend to follow this guide anyway and create your own input manifest file based on the provided example. Refer to the supported provider table for the input manifest configuration of each provider.</p>"},{"location":"getting-started/detailed-guide/#supported-providers","title":"Supported providers","text":"Supported Provider Node Pools DNS AWS Azure GCP OCI Hetzner Cloudflare N/A GenesisCloud N/A <p>For adding support for other cloud providers, open an issue or propose a PR.</p>"},{"location":"getting-started/detailed-guide/#prerequisites","title":"Prerequisites","text":"<ol> <li>Install Kind by following the Kind documentation.</li> <li>Install kubectl tool to communicate with your management cluster by following the Kubernetes documentation. </li> <li>Install Kustomize by following Kustomize documentation.</li> <li>Install Docker by following Docker documentation.</li> </ol>"},{"location":"getting-started/detailed-guide/#claudie-deployment","title":"Claudie deployment","text":"<ol> <li> <p>Create a Kind cluster where you will deploy Claudie, also referred to as the Management Cluster.</p> <pre><code>kind create cluster --name=claudie\n</code></pre> <p>Management cluster consideration.</p> <p>We recommend using a non-ephemeral management cluster! Deleting the management cluster prevents autoscaling of Claudie node pools as well as loss of state! We recommended to use a managed Kubernetes offerings to ensure management cluster resiliency. Kind cluster is sufficient for this guide.</p> </li> <li> <p>Check if have the correct current kubernetes context. The context should be <code>kind-claudie</code>.</p> <pre><code>kubectl config current-context\n</code></pre> </li> <li> <p>If context is not <code>kind-claudie</code>, switch to it:</p> <pre><code>kubectl config use-context kind-claudie\n</code></pre> </li> <li> <p>One of the prerequisites is <code>cert-manager</code>, deploy it with the following command:</p> <pre><code>kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.12.0/cert-manager.yaml\n</code></pre> </li> <li> <p>Download latest Claudie release:</p> <pre><code>wget https://github.com/berops/claudie/releases/latest/download/claudie.yaml\n</code></pre> <p>Tip!</p> <p>For the initial attempt, it's highly recommended to enable debug logs, especially when creating a large cluster with DNS. This helps identify and resolve any permission issues that may occur across different hyperscalers. Locate <code>ConfigMap</code> with <code>GOLANG_LOG</code> variable in <code>claudie.yaml</code> file, and change <code>GOLANG_LOG: info</code> to <code>GOLANG_LOG: debug</code> to enable debug logging, for more customization refer to this table.</p> </li> <li> <p>Deploy Claudie using Kustomize plugin:     <pre><code>kubectl apply -f claudie.yaml\n</code></pre></p> <p>Claudie Hardening</p> <p>By default network policies are not included in claudie.yaml, instead they're provided as standalone to be deployed separately as the Management cluster to where Claudie is deployed may use different CNI plugin. You can deploy our predefined network policies to further harden claudie: <pre><code># for clusters using cilium as their CNI\nkubectl apply -f https://github.com/berops/claudie/releases/latest/download/network-policy-cilium.yaml\n</code></pre> <pre><code># other\nkubectl apply -f https://github.com/berops/claudie/releases/latest/download/network-policy.yaml\n</code></pre></p> <ol> <li>Claudie will be deployed into <code>claudie</code> namespace, you can view if all pods are running:</li> </ol> <p><pre><code>kubectl get pods -n claudie \n</code></pre> <pre><code>NAME                           READY   STATUS      RESTARTS        AGE\nansibler-5c6c776b75-82c2q      1/1     Running     0               8m10s\nbuilder-59f9d44596-n2qzm       1/1     Running     0               8m10s\nmanager-5d76c89b4d-tb6h4       1/1     Running     1 (6m37s ago)   8m10s\ncreate-table-job-jvs9n         0/1     Completed   1               8m10s\ndynamodb-68777f9787-8wjhs      1/1     Running     0               8m10s\nclaudie-operator-5755b7bc69-5l84h      1/1     Running     0               8m10s\nkube-eleven-64468cd5bd-qp4d4   1/1     Running     0               8m10s\nkuber-698c4564c-dhsvg          1/1     Running     0               8m10s\nmake-bucket-job-fb5sp          0/1     Completed   0               8m10s\nminio-0                        1/1     Running     0               8m10s\nminio-1                        1/1     Running     0               8m10s\nminio-2                        1/1     Running     0               8m10s\nminio-3                        1/1     Running     0               8m10s\nmongodb-67bf769957-9ct5z       1/1     Running     0               8m10s\nterraformer-fd664b7ff-dd2h7    1/1     Running     0               8m9s\n</code></pre></p> <p>Changing the namespace</p> <p>By default, Claudie will monitor all namespaces, and it will watch for <code>Input Manifest</code> and provider <code>Secrets</code> in the cluster. If you would like limit the namespaces to watch - overwrite <code>CLAUDIE_NAMESPACES</code> environment variable in <code>claudie-operator</code> deployment. Example: <pre><code>env:\n  - name: CLAUDIE_NAMESPACES\n    value: \"claudie,different-namespace\"\n</code></pre></p> <p>Troubleshoot!</p> <p>If you experience problems refer to our troubleshooting guide. </p> </li> <li> <p>Let's create a AWS high availability cluster which we'll expand later on with Hetzner bursting capacity. Let's start by creating providers secrets for the infrastructure, and next we will reference them in <code>inputmanifest-bursting.yaml</code>.</p> <pre><code># AWS provider requires the secrets to have fields: accesskey and secretkey\nkubectl create secret generic aws-secret-1 --namespace=mynamespace --from-literal=accesskey='SLDUTKSHFDMSJKDIALASSD' --from-literal=secretkey='iuhbOIJN+oin/olikDSadsnoiSVSDsacoinOUSHD'\nkubectl create secret generic aws-secret-dns --namespace=mynamespace --from-literal=accesskey='ODURNGUISNFAIPUNUGFINB' --from-literal=secretkey='asduvnva+skd/ounUIBPIUjnpiuBNuNipubnPuip'    \n</code></pre> <pre><code># inputmanifest-bursting.yaml\n\napiVersion: claudie.io/v1beta1\nkind: InputManifest\nmetadata:\n  name: cloud-bursting\n  labels:\n    app.kubernetes.io/part-of: claudie\nspec:\n  providers:\n    - name: aws-1\n      providerType: aws\n      secretRef:\n        name: aws-secret-1\n        namespace: mynamespace\n    - name: aws-dns\n      providerType: aws\n      secretRef:\n        name: aws-secret-dns\n        namespace: mynamespace    \n  nodePools:\n    dynamic:\n      - name: aws-control\n        providerSpec:\n            name: aws-1\n            region: eu-central-1\n            zone: eu-central-1a\n        count: 3\n        serverType: t3.medium\n        image: ami-0965bd5ba4d59211c\n      - name: aws-worker\n        providerSpec:\n            name: aws-1\n            region: eu-north-1\n            zone: eu-north-1a\n        count: 3\n        serverType: t3.medium\n        image: ami-03df6dea56f8aa618\n        storageDiskSize: 200\n      - name: aws-lb\n        providerSpec:\n            name: aws-1\n            region: eu-central-2\n            zone: eu-central-2a\n        count: 2\n        serverType: t3.small\n        image: ami-0e4d1886bf4bb88d5\n  kubernetes:\n    clusters:\n      - name: my-super-cluster\n        version: v1.27.0\n        network: 192.168.2.0/24\n        pools:\n            control:\n            - aws-control\n            compute:\n            - aws-worker\n  loadBalancers:\n    roles:\n      - name: apiserver\n        protocol: tcp\n        port: 6443\n        targetPort: 6443\n        targetPools:\n            - aws-control\n    clusters:\n      - name: loadbalance-me\n        roles:\n            - apiserver\n        dns:\n            dnsZone: domain.com # hosted zone domain name where claudie creates dns records for this cluster\n            provider: aws-dns\n            hostname: supercluster # the sub domain of the new cluster\n        targetedK8s: my-super-cluster\n        pools:\n            - aws-lb\n</code></pre> <p>Tip!</p> <p>In this example, two AWS providers are used \u2014 one with access to compute resources and the other with access to DNS. However, it is possible to use a single AWS provider with permissions for both services.</p> </li> <li> <p>Apply the <code>InputManifest</code> crd with your cluster configuration file:</p> <pre><code>kubectl apply -f ./inputmanifest-bursting.yaml\n</code></pre> <p>Tip!</p> <p>InputManifests serve as a single source of truth for both Claudie and the user, which makes creating infrastructure via input manifests as infrastructure as a code and can be easily integrated into a GitOps workflow.</p> <p>Errors in input manifest</p> <p>Validation webhook will reject the InputManifest at this stage if it finds errors within the manifest. Refer to our API guide for details.</p> </li> <li> <p>View logs from <code>claudie-operator</code> service to see the InputManifest reconcile process:</p> <p>View the <code>InputManifest</code> state with <code>kubectl</code></p> <p><pre><code>kubectl get inputmanifests.claudie.io cloud-bursting -o jsonpath={.status} | jq .\n</code></pre> Here\u2019s an example of <code>.status</code> fields in the <code>InputManifest</code> resource type:</p> <pre><code>  {\n    \"clusters\": {\n      \"my-super-cluster\": {\n        \"message\": \" installing VPN\",\n        \"phase\": \"ANSIBLER\",\n        \"state\": \"IN_PROGRESS\"\n      }\n    },\n    \"state\": \"IN_PROGRESS\"\n  }\n</code></pre> <p>Claudie architecture</p> <p>Claudie utilizes multiple services for cluster provisioning, refer to our workflow documentation as to how it works under the hood.</p> <p>Provisioning times may vary!</p> <p>Please note that cluster creation time may vary due to provisioning capacity and machine provisioning times of selected hyperscalers.</p> <p>After finishing the <code>InputManifest</code> state reflects that the cluster is provisioned.</p> <pre><code>kubectl get inputmanifests.claudie.io cloud-bursting -o jsonpath={.status} | jq .\n  {\n    \"clusters\": {\n      \"my-super-cluster\": {\n        \"phase\": \"NONE\",\n        \"state\": \"DONE\"\n      }\n    },\n    \"state\": \"DONE\"\n  }    \n</code></pre> </li> <li> <p>Claudie creates kubeconfig secret in claudie namespace:</p> <p><pre><code>kubectl get secrets -n claudie -l claudie.io/output=kubeconfig\n</code></pre> <pre><code>NAME                                  TYPE     DATA   AGE\nmy-super-cluster-6ktx6rb-kubeconfig   Opaque   1      134m\n</code></pre></p> <p>You can recover kubeconfig for your cluster with the following command:</p> <pre><code>kubectl get secrets -n claudie -l claudie.io/output=kubeconfig -o jsonpath='{.items[0].data.kubeconfig}' | base64 -d &gt; my-super-cluster-kubeconfig.yaml\n</code></pre> <p>If you want to connect to your dynamic k8s nodes via SSH, you can recover private SSH key:</p> <pre><code>kubectl get secrets -n claudie -l claudie.io/output=metadata -ojsonpath='{.items[0].data.metadata}' | base64 -d | jq '.dynamic_nodepools | map_values(.nodepool_private_key)'\n</code></pre> <p>To recover public IP of your dynamic k8s nodes to connect to via SSH: <pre><code>kubectl get secrets -n claudie -l claudie.io/output=metadata -ojsonpath='{.items[0].data.metadata}' | base64 -d | jq -r .dynamic_nodepools.node_ips\n</code></pre></p> <p>In case you want to connect to your dynamic load balancer nodes via SSH, you can recover private SSH key:</p> <pre><code>kubectl get secrets -n claudie -l claudie.io/output=metadata -ojsonpath='{.items[0].data.metadata}' | base64 -d | jq '.dynamic_load_balancer_nodepools | .[]'\n</code></pre> <p>To recover public IP addresses of your dynamic load balancer nodes to connect to via SSH:</p> <pre><code>kubectl get secrets -n claudie -l claudie.io/output=metadata -ojsonpath='{.items[0].data.metadata}' | base64 -d | jq -r '.dynamic_load_balancer_nodepools[] | .node_ips'\n</code></pre> <p>Each secret created by Claudie has following labels:</p> Key Value <code>claudie.io/project</code> Name of the project. <code>claudie.io/cluster</code> Name of the cluster. <code>claudie.io/cluster-id</code> ID of the cluster. <code>claudie.io/output</code> Output type, either <code>kubeconfig</code> or <code>metadata</code>. </li> <li> <p>Use your new kubeconfig to see what\u2019s in your new cluster</p> <pre><code>kubectl get pods -A --kubeconfig=my-super-cluster-kubeconfig.yaml\n</code></pre> </li> <li> <p>Let's add a bursting autoscaling node pool in Hetzner cloud. In order to use other hyperscalers, we'll need to add a new provider with appropriate credentials. First we will create a provider secret for Hetzner Cloud, then we open <code>inputmanifest-bursting.yaml</code> input manifest again and append the new Hetzner node pool configuration.</p> <pre><code># Hetzner provider requires the secrets to have field: credentials\nkubectl create secret generic hetzner-secret-1 --namespace=mynamespace --from-literal=credentials='kslISA878a6etYAfXYcg5iYyrFGNlCxcICo060HVEygjFs21nske76ksjKko21lp'\n</code></pre> <p>Claudie autoscaling</p> <p>Autoscaler in Claudie is deployed in Claudie management cluster and provisions additional resources remotely at the time of need. For more information check out how Claudie autoscaling works.</p> <pre><code># inputmanifest-bursting.yaml\n\napiVersion: claudie.io/v1beta1\nkind: InputManifest\nmetadata:\n  name: cloud-bursting\n  labels:\n    app.kubernetes.io/part-of: claudie\nspec:\n  providers:\n    - name: hetzner-1         # add under nodePools.dynamic section\n      providerType: hetzner\n      secretRef:\n        name: hetzner-secret-1\n        namespace: mynamespace        \n  nodePools:\n    dynamic:\n    ...\n      - name: hetzner-worker  # add under nodePools.dynamic section\n        providerSpec:\n            name: hetzner-1   # use your new hetzner provider hetzner-1 to create these nodes\n            region: hel1\n            zone: hel1-dc2\n        serverType: cpx51\n        image: ubuntu-22.04\n        autoscaler:           # this node pool uses a claudie autoscaler instead of static count of nodes\n            min: 1\n            max: 10\n    kubernetes:\n      clusters:\n      - name: my-super-cluster\n        version: v1.27.0\n        network: 192.168.2.0/24\n        pools:\n            control:\n            - aws-control\n            compute:\n            - aws-worker\n            - hetzner-worker  # add it to the compute list here\n...\n</code></pre> </li> <li> <p>Update the crd with the new InputManifest to incorporate the desired changes.</p> <p>Deleting existing secrets!</p> <p>Deleting or replacing existing input manifest secrets triggers cluster deletion! To add new components to your existing clusters, generate a new secret value and apply it using the following command.</p> <pre><code>kubectl apply -f ./inputmanifest-bursting.yaml\n</code></pre> </li> <li> <p>You can also passthrough additional ports from load balancers to control plane and or worker node pools by adding additional roles under <code>roles</code>.     <pre><code># inputmanifest-bursting.yaml\n\napiVersion: claudie.io/v1beta1\nkind: InputManifest\nmetadata:\n  name: cloud-bursting\n  labels:\n    app.kubernetes.io/part-of: claudie\nspec:\n  ...\n  loadBalancers:\n    roles:\n      - name: apiserver\n        protocol: tcp\n        port: 6443\n        targetPort: 6443\n        targetPools: # only loadbalances for port 6443 for the aws-control nodepool\n            - aws-control\n      - name: https\n        protocol: tcp\n        port: 443\n        targetPort: 443\n        targetPools: # only loadbalances for port 443 for the aws-worker nodepool\n            - aws-worker\n            # possible to add other nodepools, hetzner-worker, for example\n    clusters:\n      - name: loadbalance-me\n        roles:\n            - apiserver\n            - https # define it here\n        dns:\n            dnsZone: domain.com\n            provider: aws-dns\n            hostname: supercluster\n        targetedK8s: my-super-cluster\n        pools:\n            - aws-lb\n</code></pre>     !!! note Load balancing         Please refer how our load balancing works by reading our documentation.</p> </li> <li> <p>Update the InputManifest again with the new configuration.     <pre><code>kubectl apply -f ./inputmanifest-bursting.yaml\n</code></pre></p> </li> <li> <p>To delete the cluster just simply delete the secret and wait for Claudie to destroy it.</p> <pre><code>kubectl delete -f ./inputmanifest-bursting.yaml\n</code></pre> <p>Removing clusters</p> <p>Deleting Claudie or the management cluster does not remove the Claudie managed clusters. Delete the secret first to initiate Claudie's deletion process.</p> </li> <li> <p>After Claudie-operator finished deletion workflow delete minikube cluster      <pre><code>kind delete cluster\n</code></pre></p> </li> </ol>"},{"location":"getting-started/detailed-guide/#general-tips","title":"General tips","text":""},{"location":"getting-started/detailed-guide/#control-plane-considerations","title":"Control plane considerations","text":"<ul> <li>Single Control Plane Node: Node pool with one machine manages your cluster.</li> <li>Multiple Control Plane Nodes: Control plane node pool that has more than one node.<ul> <li>Load Balancer Requirement: A load balancer is optional for high availability setup, however we recommend it. Include an additional node pool for load balancers.</li> <li>DNS Requirement: If you want to use load balancing, you will need a registered domain name, and a hosted zone. Claudie creates a failover DNS record for the load balancer machines.<ul> <li>Supported DNS providers: If your DNS provider is not supported, delegate a subdomain to a supported DNS provider, refer to supported DNS providers.</li> </ul> </li> <li>Egress Traffic: Hyperscalers charge for outbound data and multi-region infrastructure. To avoid egress traffic deploy control plane node pools in the same region to one hypoerscaler. If availability is more important than egress traffic costs, you can have multiple control plane node pools spanning across different hyperscalers.</li> </ul> </li> </ul>"},{"location":"getting-started/detailed-guide/#egress-traffic","title":"Egress traffic","text":"<p>Hyperscalers charge for outbound data and multi-region infrastructure.</p> <ul> <li> <p>Control plane: To avoid egress traffic deploy control plane node pools in the same region to one hyperscaler. If availability is more important than egress traffic costs, you can have multiple control plane node pools spanning across different hyperscalers.</p> </li> <li> <p>Workloads: Egress costs associated with workloads are more complicated as they depend on each use case. What we recommend it to try and use localised workloads where possible. </p> </li> </ul> <p>Example</p> <p>Consider a scenario where you have a workload that involves processing extensive datasets from GCP storage using Claudie managed AWS GPU instances. To minimize egress network traffic costs, it is recommended to host the datasets in an S3 bucket and limit egress traffic from GCP and keep the workload localised.</p>"},{"location":"getting-started/detailed-guide/#on-your-own-path","title":"On your own path","text":"<p>Once you've gained a comprehensive understanding of how Claudie operates through this guide, you can deploy it to a reliable management cluster, this could be a cluster that you already have. Tailor your input manifest file to suit your specific requirements and explore a detailed example showcasing providers, load balancing, and DNS records across various hyperscalers by visiting this comprehensive example.</p>"},{"location":"getting-started/detailed-guide/#claudie-customization","title":"Claudie customization","text":"<p>All of the customisable settings can be found in <code>claudie/.env</code> file.</p> Variable Default Type Description <code>GOLANG_LOG</code> <code>info</code> string Log level for all services. Can be either <code>info</code> or <code>debug</code>. <code>HTTP_PROXY_MODE</code> <code>default</code> string <code>default</code>, <code>on</code> or <code>off</code>. <code>default</code> utilizes HTTP proxy only when there's at least one node in the K8s cluster from the Hetzner cloud provider. <code>on</code> uses HTTP proxy even when the K8s cluster doesn't have any nodes from the Hetzner. <code>off</code> turns off the usage of HTTP proxy. If the value isn't set or differs from <code>on</code> or <code>off</code> it always works with the <code>default</code>. <code>HTTP_PROXY_URL</code> <code>http://proxy.claudie.io:8880</code> string HTTP proxy URL used in kubeone proxy configuration to build the K8s cluster. <code>DATABASE_HOSTNAME</code> <code>mongodb</code> string Database hostname used for Claudie configs. <code>MANAGER_HOSTNAME</code> <code>manager</code> string Manager service hostname. <code>TERRAFORMER_HOSTNAME</code> <code>terraformer</code> string Terraformer service hostname. <code>ANSIBLER_HOSTNAME</code> <code>ansibler</code> string Ansibler service hostname. <code>KUBE_ELEVEN_HOSTNAME</code> <code>kube-eleven</code> string Kube-eleven service hostname. <code>KUBER_HOSTNAME</code> <code>kuber</code> string Kuber service hostname. <code>MINIO_HOSTNAME</code> <code>minio</code> string MinIO hostname used for state files. <code>DYNAMO_HOSTNAME</code> <code>dynamo</code> string DynamoDB hostname used for lock files. <code>DYNAMO_TABLE_NAME</code> <code>claudie</code> string Table name for DynamoDB lock files. <code>AWS_REGION</code> <code>local</code> string Region for DynamoDB lock files. <code>DATABASE_PORT</code> 27017 int Port of the database service. <code>TERRAFORMER_PORT</code> 50052 int Port of the Terraformer service. <code>ANSIBLER_PORT</code> 50053 int Port of the Ansibler service. <code>KUBE_ELEVEN_PORT</code> 50054 int Port of the Kube-eleven service. <code>MANAGER_PORT</code> 50055 int Port of the MANAGER service. <code>KUBER_PORT</code> 50057 int Port of the Kuber service. <code>MINIO_PORT</code> 9000 int Port of the MinIO service. <code>DYNAMO_PORT</code> 8000 int Port of the DynamoDB service."},{"location":"getting-started/get-started-using-claudie/","title":"Getting started","text":""},{"location":"getting-started/get-started-using-claudie/#get-started-using-claudie","title":"Get started using Claudie","text":""},{"location":"getting-started/get-started-using-claudie/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, please make sure you have the following prerequisites installed and set up:</p> <ol> <li> <p>Claudie needs to be installed on an existing Kubernetes cluster, referred to as the Management Cluster, which it uses to manage the clusters it provisions. For testing, you can use ephemeral clusters like Minikube or Kind. However, for production environments, we recommend using a more resilient solution since Claudie maintains the state of the infrastructure it creates.</p> </li> <li> <p>Claudie requires the installation of cert-manager in your Management Cluster. To install cert-manager, use the following command:     <pre><code>kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.12.0/cert-manager.yaml\n</code></pre></p> </li> </ol>"},{"location":"getting-started/get-started-using-claudie/#supported-providers","title":"Supported providers","text":"Supported Provider Node Pools DNS AWS Azure GCP OCI Hetzner Cloudflare N/A GenesisCloud N/A <p>For adding support for other cloud providers, open an issue or propose a PR.</p>"},{"location":"getting-started/get-started-using-claudie/#install-claudie","title":"Install Claudie","text":"<ol> <li>Deploy Claudie to the Management Cluster:     <pre><code>kubectl apply -f https://github.com/berops/claudie/releases/latest/download/claudie.yaml\n</code></pre></li> </ol> <p>To further harden claudie, you may want to deploy our pre-defined network policies:    <pre><code># for clusters using cilium as their CNI\nkubectl apply -f https://github.com/berops/claudie/releases/latest/download/network-policy-cilium.yaml\n</code></pre> <pre><code># other\nkubectl apply -f https://github.com/berops/claudie/releases/latest/download/network-policy.yaml\n</code></pre></p>"},{"location":"getting-started/get-started-using-claudie/#deploy-your-cluster","title":"Deploy your cluster","text":"<ol> <li> <p>Create Kubernetes Secret resource for your provider configuration.</p> <pre><code>kubectl create secret generic example-aws-secret-1 \\\n  --namespace=mynamespace \\\n  --from-literal=accesskey='myAwsAccessKey' \\\n  --from-literal=secretkey='myAwsSecretKey'\n</code></pre> <p>Check the supported providers for input manifest examples. For an input manifest spanning all supported hyperscalers checkout out this example.</p> </li> <li> <p>Deploy InputManifest resource which Claudie uses to create infrastructure, include the created secret in <code>.spec.providers</code> as follows:     <pre><code>kubectl apply -f - &lt;&lt;EOF\napiVersion: claudie.io/v1beta1\nkind: InputManifest\nmetadata:\n  name: examplemanifest\n  labels:\n    app.kubernetes.io/part-of: claudie\nspec:\n  providers:\n      - name: aws-1\n      providerType: aws\n      secretRef:\n          name: example-aws-secret-1 # reference the secret name\n          namespace: mynamespace     # reference the secret namespace\n  nodePools:\n      dynamic:\n      - name: control-aws\n          providerSpec:\n            name: aws-1\n            region: eu-central-1\n            zone: eu-central-1a\n          count: 1\n          serverType: t3.medium\n          image: ami-0965bd5ba4d59211c\n      - name: compute-1-aws\n          providerSpec:\n            name: aws-1\n            region: eu-west-3\n            zone: eu-west-3a\n          count: 2\n          serverType: t3.medium\n          image: ami-029c608efaef0b395\n          storageDiskSize: 50\n  kubernetes:\n      clusters:\n      - name: aws-cluster\n          version: 1.27.0\n          network: 192.168.2.0/24\n          pools:\n            control:\n                - control-aws\n            compute:\n                - compute-1-aws        \nEOF\n</code></pre></p> <p>Deleting existing InputManifest resource deletes provisioned infrastructure!</p> </li> </ol>"},{"location":"getting-started/get-started-using-claudie/#connect-to-your-cluster","title":"Connect to your cluster","text":"<p>Claudie outputs base64 encoded kubeconfig secret <code>&lt;cluster-name&gt;-&lt;cluster-hash&gt;-kubeconfig</code> in the namespace where it is deployed:</p> <ol> <li>Recover kubeconfig of your cluster by running:     <pre><code>kubectl get secrets -n claudie -l claudie.io/output=kubeconfig -o jsonpath='{.items[0].data.kubeconfig}' | base64 -d &gt; your_kubeconfig.yaml\n</code></pre></li> <li>Use your new kubeconfig:     <pre><code>kubectl get pods -A --kubeconfig=your_kubeconfig.yaml\n</code></pre></li> </ol>"},{"location":"getting-started/get-started-using-claudie/#cleanup","title":"Cleanup","text":"<ol> <li>To remove your cluster and its associated infrastructure, delete the cluster definition block from the InputManifest:     <pre><code>kubectl apply -f - &lt;&lt;EOF\napiVersion: claudie.io/v1beta1\nkind: InputManifest\nmetadata:\n  name: examplemanifest\n  labels:\n    app.kubernetes.io/part-of: claudie\nspec:\n  providers:\n      - name: aws-1\n      providerType: aws\n      secretRef:\n          name: example-aws-secret-1 # reference the secret name\n          namespace: mynamespace     # reference the secret namespace\n  nodePools:\n      dynamic:\n      - name: control-aws\n          providerSpec:\n            name: aws-1\n            region: eu-central-1\n            zone: eu-central-1a\n          count: 1\n          serverType: t3.medium\n          image: ami-0965bd5ba4d59211c\n      - name: compute-1-aws\n          providerSpec:\n            name: aws-1\n            region: eu-west-3\n            zone: eu-west-3a\n          count: 2\n          serverType: t3.medium\n          image: ami-029c608efaef0b395\n          storageDiskSize: 50\n  kubernetes:\n    clusters:\n#      - name: aws-cluster\n#          version: 1.27.0\n#          network: 192.168.2.0/24\n#          pools:\n#            control:\n#                - control-aws\n#            compute:\n#                - compute-1-aws         \nEOF\n</code></pre></li> <li> <p>To delete all clusters defined in the input manifest, delete the InputManifest. This triggers the deletion process, removing the infrastructure and all data associated with the manifest.</p> <pre><code>kubectl delete inputmanifest examplemanifest\n</code></pre> </li> </ol>"},{"location":"hardening/hardening/","title":"Claudie Hardening","text":"<p>In this section we'll describe how to further configure security hardening of the default deployment for claudie.</p>"},{"location":"hardening/hardening/#passwords","title":"Passwords","text":"<p>When deploying the default manifests claudie uses simple passwords for MongoDB, DynamoDB and MinIO.</p> <p>You can find the passwords at these paths:</p> <pre><code>manifests/claudie/mongo/secrets\nmanifests/claudie/minio/secrets\nmanifests/claudie/dynamo/secrets\n</code></pre> <p>It is highly recommended that you change these passwords to more secure ones.</p>"},{"location":"hardening/hardening/#network-policies","title":"Network Policies","text":"<p>The default deployment of claudie comes without any network policies, as based on the CNI on the Management cluster the network policies may not be fully supported.</p> <p>We have a set of network policies pre-defined that can be found in:</p> <pre><code>manifests/network-policies\n</code></pre> <p>Currently, we have a cilium specific network policy that's using <code>CiliumNetworkPolicy</code> and another that  uses <code>NetworkPolicy</code> which should be supported by most network plugins.</p> <p>To install network policies you can simply execute one the following commands:</p> <pre><code># for clusters using cilium as their CNI\nkubectl apply -f https://github.com/berops/claudie/releases/latest/download/network-policy-cilium.yaml\n</code></pre> <pre><code># other\nkubectl apply -f https://github.com/berops/claudie/releases/latest/download/network-policy.yaml\n</code></pre>"},{"location":"http-proxy/http-proxy/","title":"Usage of HTTP proxy","text":"<p>In this section, we'll describe the default HTTP proxy setup and its the further customization.</p>"},{"location":"http-proxy/http-proxy/#default-setup","title":"Default setup","text":"<p>By default installation proxy mode is set to <code>default</code>, thus Claudie utilizes the HTTP proxy when building a K8s cluster with at least one node from the Hetzner cloud provider. This means, that if you have a cluster with one master node in Azure and one worker node in AWS Claudie won't use the HTTP proxy to build the K8s cluster. However, if you add another worker node from Hetzner the whole process of building the K8s cluster will utilize the HTTP proxy.</p> <p>This approach was implemented to address the following issues:</p> <ul> <li>https://github.com/berops/claudie/issues/783</li> <li>https://github.com/berops/claudie/issues/1272</li> </ul>"},{"location":"http-proxy/http-proxy/#further-customization","title":"Further customization","text":"<p>In case you don't want to utilize the HTTP proxy at all (even when there are nodes in the K8s cluster from the Hetzner cloud provider) you can turn off the installation proxy by setting the proxy mode to <code>off</code> in the InputManifest (see the example below).</p> <pre><code>kubernetes:\n    clusters:\n      - name: proxy-example\n        version: \"1.30.0\"\n        network: 192.168.2.0/24\n        installationProxy:\n            mode: \"off\"\n</code></pre> <p>On the other hand, if you wish to use the HTTP proxy whenever building a K8s cluster (even when there aren't any nodes in the K8s cluster from the Hetzner cloud provider) you can set the proxy mode to <code>on</code> in the InputManifest (again, see the example below).</p> <pre><code>kubernetes:\n    clusters:\n      - name: proxy-example\n        version: \"1.30.0\"\n        network: 192.168.2.0/24\n        installationProxy:\n            mode: \"on\"\n</code></pre> <p>If you want to utilize your own HTTP proxy you can set its URL in <code>endpoint</code> (see the example below).</p> <pre><code>kubernetes:\n    clusters:\n      - name: proxy-example\n        version: \"1.30.0\"\n        network: 192.168.2.0/24\n        installationProxy:\n            mode: \"on\"\n            endpoint: http://&lt;my-endpoint-domain-name&gt;:&lt;my-endpoint-port&gt;\n</code></pre> <p>By default, <code>endpoint</code> value is set to <code>http://proxy.claudie.io:8880</code>. In case your HTTP proxy runs on <code>myproxy.com</code> and is exposed on port <code>3128</code> the <code>endpoint</code> has to be set to <code>http://myproxy.com:3128</code>. This means you always have to specify the whole URL with the protocol (HTTP or HTTPS), domain name, and port. </p>"},{"location":"input-manifest/api-reference/","title":"InputManifest API reference","text":"<p>InputManifest is a definition of the user's infrastructure. It contains cloud provider specification, nodepool specification, Kubernetes and loadbalancer clusters.</p>"},{"location":"input-manifest/api-reference/#status","title":"Status","text":"<p>Most recently observed status of the InputManifest</p>"},{"location":"input-manifest/api-reference/#spec","title":"Spec","text":"<p>Specification of the desired behavior of the InputManifest</p> <ul> <li><code>providers</code> Providers</li> </ul> <p>Providers is a list of defined cloud provider configuration that will be used in infrastructure provisioning.</p> <ul> <li><code>nodepools</code> Nodepools</li> </ul> <p>Describes nodepools used for either kubernetes clusters or loadbalancer cluster defined in this manifest.</p> <ul> <li><code>kubernetes</code> Kubernetes</li> </ul> <p>List of Kubernetes cluster this manifest will manage.</p> <ul> <li><code>loadBalancers</code> Loadbalancer</li> </ul> <p>List of loadbalancer clusters the Kubernetes clusters may use.</p>"},{"location":"input-manifest/api-reference/#providers","title":"Providers","text":"<p>Contains configurations for supported cloud providers. At least one provider needs to be defined.</p> <ul> <li><code>name</code></li> </ul> <p>The name of the provider specification. The name is limited to 15 characters. It has to be unique across all providers.</p> <ul> <li><code>providerType</code></li> </ul> <p>Type of a provider. The providerType defines mandatory fields that has to be included for a specific provider. A list of available providers can be found at providers section. Allowed values are:</p> Value Description <code>aws</code> AWS provider type <code>azure</code> Azure provider type <code>cloudflare</code> Cloudflare provider type <code>gcp</code> GCP provider type <code>hetzner</code> Hetzner provider type <code>hetznerdns</code> Hetzner DNS provider type <code>oci</code> OCI provider type <code>genesiscloud</code> GenesisCloud provider type <ul> <li><code>secretRef</code> SecretRef</li> </ul> <p>Represents a Secret Reference. It has enough information to retrieve secret in any namespace.</p> <p>Support for more cloud providers is in the roadmap.</p> <p>For static nodepools a provider is not needed, refer to the static section for more detailed information.</p>"},{"location":"input-manifest/api-reference/#secretref","title":"SecretRef","text":"<p>SecretReference represents a Kubernetes Secret Reference. It has enough information to retrieve secret in any namespace.</p> <ul> <li><code>name</code></li> </ul> <p>Name of the secret, which holds data for the particular cloud provider instance.</p> <ul> <li><code>namespace</code></li> </ul> <p>Namespace of the secret which holds data for the particular cloud provider instance.</p>"},{"location":"input-manifest/api-reference/#cloudflare","title":"Cloudflare","text":"<p>The fields that need to be included in a Kubernetes Secret resource to utilize the Cloudflare provider. To find out how to configure Cloudflare follow the instructions here</p> <ul> <li><code>apitoken</code></li> </ul> <p>Credentials for the provider (API token).</p> <ul> <li><code>templates</code></li> <li><code>repository</code>: specifies the location from where the external template are to be acquired. Must be a publicly available git repository.</li> <li><code>tag</code>: Optional. If set when the git repository is downloaded, the commit hash from the tag version is used.</li> <li><code>path</code>: specifies the path for a specific provider within the <code>repository</code> where the source template files are located.</li> </ul>"},{"location":"input-manifest/api-reference/#hetznerdns","title":"HetznerDNS","text":"<p>The fields that need to be included in a Kubernetes Secret resource to utilize the HetznerDNS provider. To find out how to configure HetznerDNS follow the instructions here</p> <ul> <li><code>apitoken</code></li> </ul> <p>Credentials for the provider (API token).</p> <ul> <li><code>templates</code></li> <li><code>repository</code>: specifies the location from where the external template are to be acquired. Must be a publicly available git repository.</li> <li><code>tag</code>: Optional. If set when the git repository is downloaded, the commit hash from the tag version is used.</li> <li><code>path</code>: specifies the path for a specific provider within the <code>repository</code> where the source template files are located.</li> </ul>"},{"location":"input-manifest/api-reference/#gcp","title":"GCP","text":"<p>The fields that need to be included in a Kubernetes Secret resource to utilize the GCP provider. To find out how to configure GCP provider and service account, follow the instructions here.</p> <ul> <li><code>credentials</code></li> </ul> <p>Credentials for the provider. Stringified JSON service account key.</p> <ul> <li><code>gcpproject</code></li> </ul> <p>Project id of an already existing GCP project where the infrastructure is to be created.</p> <ul> <li><code>templates</code></li> <li><code>repository</code>: specifies the location from where the external template are to be acquired. Must be a publicly available git repository.</li> <li><code>tag</code>: Optional. If set when the git repository is downloaded, the commit hash from the tag version is used.</li> <li><code>path</code>: specifies the path for a specific provider within the <code>repository</code> where the source template files are located.</li> </ul>"},{"location":"input-manifest/api-reference/#genesiscloud","title":"GenesisCloud","text":"<p>The fields that need to be included in a Kubernetes Secret resource to utilize the Genesis Cloud provider. To find out how to configure Genesis Cloud provider, follow the instructions here.</p> <ul> <li><code>apitoken</code></li> </ul> <p>API token for the provider.</p> <ul> <li><code>templates</code></li> <li><code>repository</code>: specifies the location from where the external template are to be acquired. Must be a publicly available git repository.</li> <li><code>tag</code>: Optional. If set when the git repository is downloaded, the commit hash from the tag version is used.</li> <li><code>path</code>: specifies the path for a specific provider within the <code>repository</code> where the source template files are located.</li> </ul>"},{"location":"input-manifest/api-reference/#hetzner","title":"Hetzner","text":"<p>The fields that need to be included in a Kubernetes Secret resource to utilize the Hetzner provider. To find out how to configure Hetzner provider and service account, follow the instructions here.</p> <ul> <li><code>credentials</code></li> </ul> <p>Credentials for the provider (API token).</p> <ul> <li><code>templates</code></li> <li><code>repository</code>: specifies the location from where the external template are to be acquired. Must be a publicly available git repository.</li> <li><code>tag</code>: Optional. If set when the git repository is downloaded, the commit hash from the tag version is used.</li> <li><code>path</code>: specifies the path for a specific provider within the <code>repository</code> where the source template files are located.</li> </ul>"},{"location":"input-manifest/api-reference/#oci","title":"OCI","text":"<p>The fields that need to be included in a Kubernetes Secret resource to utilize the OCI provider. To find out how to configure OCI provider and service account, follow the instructions here.</p> <ul> <li><code>privatekey</code></li> </ul> <p>Private key used to authenticate to the OCI.</p> <ul> <li><code>keyfingerprint</code></li> </ul> <p>Fingerprint of the user-supplied private key.</p> <ul> <li><code>tenancyocid</code></li> </ul> <p>OCID of the tenancy where <code>privateKey</code> is added as an API key</p> <ul> <li><code>userocid</code></li> </ul> <p>OCID of the user in the supplied tenancy</p> <ul> <li><code>compartmentocid</code></li> </ul> <p>OCID of the compartment where VMs/VCNs/... will be created</p> <ul> <li><code>templates</code></li> <li><code>repository</code>: specifies the location from where the external template are to be acquired. Must be a publicly available git repository.</li> <li><code>tag</code>: Optional. If set when the git repository is downloaded, the commit hash from the tag version is used.</li> <li><code>path</code>: specifies the path for a specific provider within the <code>repository</code> where the source template files are located.</li> </ul>"},{"location":"input-manifest/api-reference/#aws","title":"AWS","text":"<p>The fields that need to be included in a Kubernetes Secret resource to utilize the AWS provider. To find out how to configure AWS provider and service account, follow the instructions here.</p> <ul> <li><code>accesskey</code></li> </ul> <p>Access key ID for your AWS account.</p> <ul> <li><code>secretkey</code></li> </ul> <p>Secret key for the Access key specified above.</p> <ul> <li><code>templates</code></li> <li><code>repository</code>: specifies the location from where the external template are to be acquired. Must be a publicly available git repository.</li> <li><code>tag</code>: Optional. If set when the git repository is downloaded, the commit hash from the tag version is used.</li> <li><code>path</code>: specifies the path for a specific provider within the <code>repository</code> where the source template files are located.</li> </ul>"},{"location":"input-manifest/api-reference/#azure","title":"Azure","text":"<p>The fields that need to be included in a Kubernetes Secret resource to utilize the Azure provider. To find out how to configure Azure provider and service account, follow the instructions here.</p> <ul> <li><code>subscriptionid</code></li> </ul> <p>Subscription ID of your subscription in Azure.</p> <ul> <li><code>tenantid</code></li> </ul> <p>Tenant ID of your tenancy in Azure.</p> <ul> <li><code>clientid</code></li> </ul> <p>Client ID of your client. The Claudie is design to use a service principal with appropriate permissions.</p> <ul> <li><code>clientsecret</code></li> </ul> <p>Client secret generated for your client.</p> <ul> <li><code>templates</code></li> <li><code>repository</code>: specifies the location from where the external template are to be acquired. Must be a publicly available git repository.</li> <li><code>tag</code>: Optional. If set when the git repository is downloaded, the commit hash from the tag version is used.</li> <li><code>path</code>: specifies the path for a specific provider within the <code>repository</code> where the source template files are located.</li> </ul>"},{"location":"input-manifest/api-reference/#nodepools","title":"Nodepools","text":"<p>Collection of static and dynamic nodepool specification, to be referenced in the <code>kubernetes</code> or <code>loadBalancer</code> clusters.</p> <ul> <li><code>dynamic</code> Dynamic</li> </ul> <p>List of dynamically to-be-created nodepools of not yet existing machines, used for Kubernetes or loadbalancer clusters.</p> <p>These are only blueprints, and will only be created per reference in <code>kubernetes</code> or <code>loadBalancer</code> clusters. E.g. if the nodepool isn't used, it won't even be created. Or if the same nodepool is used in two different clusters, it will be created twice. In OOP analogy, a dynamic nodepool would be a class that would get instantiated <code>N &gt;= 0</code> times depending on which clusters reference it.</p> <ul> <li><code>static</code> Static</li> </ul> <p>List of static nodepools of already existing machines, not provisioned by Claudie, used for Kubernetes (see requirements) or loadbalancer clusters. These can be baremetal servers or VMs with IPs assigned. Claudie is able to join them into existing clusters, or provision clusters solely on the static nodepools. Typically we'll find these being used in on-premises scenarios, or hybrid-cloud clusters.</p>"},{"location":"input-manifest/api-reference/#dynamic","title":"Dynamic","text":"<p>Dynamic nodepools are defined for cloud provider machines that Claudie is expected to provision.</p> <ul> <li><code>name</code></li> </ul> <p>Name of the nodepool. The name is limited by 14 characters. Each nodepool will have a random hash appended to the name, so the whole name will be of format <code>&lt;name&gt;-&lt;hash&gt;</code>.</p> <ul> <li><code>provideSpec</code> Provider spec</li> </ul> <p>Collection of provider data to be used while creating the nodepool.</p> <ul> <li><code>count</code></li> </ul> <p>Number of the nodes in the nodepool. Maximum value of 255.  Mutually exclusive with <code>autoscaler</code>.</p> <ul> <li><code>serverType</code></li> </ul> <p>Type of the machines in the nodepool.</p> <p>Currently, only AMD64 machines are supported.</p> <ul> <li><code>machineSpec</code></li> </ul> <p>Further describes the selected server type, if available by the cloud provider.</p> <ul> <li><code>cpuCount</code>: specifies the number of cpu to be used by the <code>serverType</code></li> <li> <p><code>memory</code>: specifies the memory in GB to be used by the <code>serverType</code></p> </li> <li> <p><code>image</code></p> </li> </ul> <p>OS image of the machine.</p> <p>Currently, only Ubuntu 22.04 AMD64 images are supported.</p> <ul> <li><code>storageDiskSize</code></li> </ul> <p>The size of the storage disk on the nodes in the node pool is specified in <code>GB</code>. The OS disk is created automatically with a predefined size of <code>100GB</code> for Kubernetes nodes and <code>50GB</code> for LoadBalancer nodes.</p> <p>This field is optional; however, if a compute node pool does not define it, the default value will be used for the creation of the storage disk. Control node pools and LoadBalancer node pools ignore this field.</p> <p>The default value for this field is <code>50</code>, with a minimum value also set to <code>50</code>. This value is only applicable to compute nodes. If the disk size is set to <code>0</code>, no storage disk will be created for any nodes in the particular node pool.</p> <ul> <li><code>autoscaler</code> Autoscaler Configuration</li> </ul> <p>Autoscaler configuration for this nodepool. Mutually exclusive with <code>count</code>.</p> <ul> <li><code>labels</code></li> </ul> <p>Map of user defined labels, which will be applied on every node in the node pool. This field is optional.</p> <p>To see the default labels Claudie applies on each node, refer to this section.</p> <ul> <li><code>annotations</code></li> </ul> <p>Map of user defined annotations, which will be applied on every node in the node pool. This field is optional.</p> <p>You can use Kubernetes annotations to attach arbitrary non-identifying metadata. Clients such as tools and libraries can retrieve this metadata.</p> <ul> <li><code>taints</code> v1.Taint</li> </ul> <p>Array of user defined taints, which will be applied on every node in the node pool. This field is optional.</p> <p>To see the default taints Claudie applies on each node, refer to this section.</p>"},{"location":"input-manifest/api-reference/#provider-spec","title":"Provider Spec","text":"<p>Provider spec is an additional specification built on top of the data from any of the provider instance. Here are provider configuration examples for each individual provider: aws, azure, gcp, cloudflare, hetzner and oci.</p> <ul> <li><code>name</code></li> </ul> <p>Name of the provider instance specified in providers</p> <ul> <li><code>region</code></li> </ul> <p>Region of the nodepool.</p> <ul> <li><code>zone</code></li> </ul> <p>Zone of the nodepool.</p>"},{"location":"input-manifest/api-reference/#autoscaler-configuration","title":"Autoscaler Configuration","text":"<p>Autoscaler configuration on per nodepool basis. Defines the number of nodes, autoscaler will scale up or down specific nodepool.</p> <ul> <li><code>min</code></li> </ul> <p>Minimum number of nodes in nodepool.</p> <ul> <li><code>max</code></li> </ul> <p>Maximum number of nodes in nodepool.</p>"},{"location":"input-manifest/api-reference/#static","title":"Static","text":"<p>Static nodepools are defined for static machines which Claudie will not manage. Used for on premise nodes.</p> <p>In case you want to use your static nodes in the Kubernetes cluster, make sure they meet the requirements.</p> <ul> <li><code>name</code></li> </ul> <p>Name of the static nodepool. The name is limited  by 14 characters.</p> <ul> <li><code>nodes</code> Static Node</li> </ul> <p>List of static nodes for a particular static nodepool.</p> <ul> <li><code>labels</code></li> </ul> <p>Map of user defined labels, which will be applied on every node in the node pool. This field is optional.</p> <p>To see the default labels Claudie applies on each node, refer to this section.</p> <ul> <li><code>annotations</code></li> </ul> <p>Map of user defined annotations, which will be applied on every node in the node pool. This field is optional.</p> <p>You can use Kubernetes annotations to attach arbitrary non-identifying metadata. Clients such as tools and libraries can retrieve this metadata.</p> <ul> <li><code>taints</code> v1.Taint</li> </ul> <p>Array of user defined taints, which will be applied on every node in the node pool. This field is optional.</p> <p>To see the default taints Claudie applies on each node, refer to this section.</p>"},{"location":"input-manifest/api-reference/#static-node","title":"Static node","text":"<p>Static node defines single static node from a static nodepool.</p> <ul> <li><code>endpoint</code></li> </ul> <p>Endpoint under which Claudie will access this node.</p> <ul> <li><code>username</code></li> </ul> <p>Name of a user with root privileges, will be used to SSH into this node and install dependencies. This attribute is optional. In case it isn't specified a <code>root</code> username is used.</p> <ul> <li><code>secretRef</code> SecretRef</li> </ul> <p>Secret from which private key will be taken used to SSH into the machine (as root or as a user specificed in the username attribute).</p> <p>The field in the secret must be <code>privatekey</code>, i.e.</p> <pre><code>apiVersion: v1\ntype: Opaque\nkind: Secret\n  name: private-key-node-1\n  namespace: claudie-secrets\ndata:\n  privatekey: &lt;base64 encoded private key&gt;\n</code></pre>"},{"location":"input-manifest/api-reference/#kubernetes","title":"Kubernetes","text":"<p>Defines Kubernetes clusters.</p> <ul> <li><code>clusters</code> Cluster-k8s</li> </ul> <p>List of Kubernetes clusters Claudie will create.</p>"},{"location":"input-manifest/api-reference/#cluster-k8s","title":"Cluster-k8s","text":"<p>Collection of data used to define a Kubernetes cluster.</p> <ul> <li><code>name</code></li> </ul> <p>Name of the Kubernetes cluster. The name is limited by 28 characters. Each cluster will have a random hash appended to the name, so the whole name will be of format <code>&lt;name&gt;-&lt;hash&gt;</code>.</p> <ul> <li><code>version</code></li> </ul> <p>Kubernetes version of the cluster.</p> <p>Version should be defined in format <code>vX.Y</code>. In terms of supported versions of Kubernetes, Claudie follows <code>kubeone</code> releases and their supported versions. The current <code>kubeone</code> version used in Claudie is <code>1.8</code>. To see the list of supported versions, please refer to <code>kubeone</code> documentation.</p> <ul> <li><code>network</code></li> </ul> <p>Network range for the VPN of the cluster. The value should be defined in format <code>A.B.C.D/mask</code>.</p> <ul> <li><code>pools</code></li> </ul> <p>List of nodepool names this cluster will use. Remember that nodepools defined in nodepools are only \"blueprints\". The actual nodepool will be created once referenced here.</p> <ul> <li><code>installationProxy</code></li> </ul> <p>Installation proxy settings used by this cluster. You can learn more about the setting here.</p>"},{"location":"input-manifest/api-reference/#loadbalancer","title":"LoadBalancer","text":"<p>Defines loadbalancer clusters.</p> <ul> <li><code>roles</code> Role</li> </ul> <p>List of roles loadbalancers use to forward the traffic. Single role can be used in multiple loadbalancer clusters.</p> <ul> <li><code>clusters</code> Cluster-lb</li> </ul> <p>List of loadbalancer clusters used in the Kubernetes clusters defined under clusters.</p>"},{"location":"input-manifest/api-reference/#role","title":"Role","text":"<p>Role defines a concrete loadbalancer configuration. Single loadbalancer can have multiple roles.</p> <ul> <li><code>name</code></li> </ul> <p>Name of the role. Used as a reference in clusters.</p> <ul> <li><code>protocol</code></li> </ul> <p>Protocol of the rule. Allowed values are:</p> Value Description <code>tcp</code> Role will use TCP protocol <code>udp</code> Role will use UDP protocol <ul> <li><code>port</code></li> </ul> <p>Port of the incoming traffic on the loadbalancer.</p> <ul> <li><code>targetPort</code></li> </ul> <p>Port where loadbalancer forwards the traffic.</p> <ul> <li> <p><code>targetPools</code>   Defines from which nodepools, nodes will be targeted by the Load Balancer</p> </li> <li> <p><code>settings</code>    Optional settings that can be configured for a role</p> <ul> <li> <p><code>proxyProtocol</code>: Default value: <code>true</code></p> <p>Specifies whether to enable the proxy protocol. The Proxy protocol forwards connection information from the client, such as the IP address, to the target pools. The application to which the traffic is forwarded must support the proxy protocol.</p> </li> <li> <p><code>stickySessions</code>: Default value: <code>false</code></p> <p>Specifies whether incoming traffic should be sent to the same node each time, rather than load balancing between available nodes. A hash of the IP is used to determine which node the traffic is routed to. </p> </li> </ul> </li> </ul>"},{"location":"input-manifest/api-reference/#cluster-lb","title":"Cluster-lb","text":"<p>Collection of data used to define a loadbalancer cluster.</p> <ul> <li><code>name</code></li> </ul> <p>Name of the loadbalancer. The name is limited by 28 characters.</p> <ul> <li><code>roles</code></li> </ul> <p>List of roles the loadbalancer uses.</p> <ul> <li><code>dns</code> DNS</li> </ul> <p>Specification of the loadbalancer's DNS record.</p> <ul> <li><code>targetedK8s</code></li> </ul> <p>Name of the Kubernetes cluster targetted by this loadbalancer.</p> <ul> <li><code>pools</code></li> </ul> <p>List of nodepool names this loadbalancer will use. Remember, that nodepools defined in nodepools are only \"blueprints\". The actual nodepool will be created once referenced here.</p>"},{"location":"input-manifest/api-reference/#dns","title":"DNS","text":"<p>Collection of data Claudie uses to create a DNS record for the loadbalancer.</p> <ul> <li><code>dnsZone</code></li> </ul> <p>DNS zone inside which the records will be created. GCP/AWS/OCI/Azure/Cloudflare/Hetzner DNS zone is accepted.</p> <p>The record created in this zone must be accessible to the public. Therefore, a public DNS zone is required.</p> <ul> <li><code>provider</code></li> </ul> <p>Name of provider to be used for creating an A record entry in defined DNS zone.</p> <ul> <li><code>hostname</code></li> </ul> <p>Custom hostname for your A record. If left empty, the hostname will be a random hash.</p> <ul> <li><code>alternativeNames</code></li> </ul> <p>Additional hostnames for which A records will be created</p>"},{"location":"input-manifest/api-reference/#default-labels","title":"Default labels","text":"<p>By default, Claudie applies following labels on every node in the cluster, together with those defined by the user.</p> Key Value <code>claudie.io/nodepool</code> Name of the node pool. <code>claudie.io/provider</code> Cloud provider name. <code>claudie.io/provider-instance</code> User defined provider name. <code>claudie.io/node-type</code> Type of the node. Either <code>control</code> or <code>compute</code>. <code>topology.kubernetes.io/region</code> Region where the node resides. <code>topology.kubernetes.io/zone</code> Zone of the region where node resides. <code>kubernetes.io/os</code> Os family of the node. <code>kubernetes.io/arch</code> Architecture type of the CPU. <code>v1.kubeone.io/operating-system</code> Os type of the node."},{"location":"input-manifest/api-reference/#default-taints","title":"Default taints","text":"<p>By default, Claudie applies only <code>node-role.kubernetes.io/control-plane</code> taint for control plane nodes, with effect <code>NoSchedule</code>, together with those defined by the user.</p>"},{"location":"input-manifest/example/","title":"Example yaml file","text":"example.yaml<pre><code>apiVersion: claudie.io/v1beta1\nkind: InputManifest\nmetadata:\n  name: example-manifest\n  labels:\n    app.kubernetes.io/part-of: claudie\nspec:\n  # Providers field is used for defining the providers.\n  # It is referencing a secret resource in Kubernetes cluster.\n  # Each provider haves its own mandatory fields that are defined in the secret resource.\n  # Every supported provider has an example in this input manifest.\n  # providers:\n  #   - name:\n  #       providerType:   # Type of the provider secret [aws|azure|gcp|oci|hetzner|hetznerdns|cloudflare].\n  #       templates:      # external templates used to build the infrastructure by that given provider. If omitted default templates will be used.\n  #         repository:   # publicly available git repository where the templates can be acquired\n  #         tag:          # optional tag. If set is used to checkout to a specific hash commit of the git repository.\n  #         path:         # path where the templates for the specific provider can be found.\n  #       secretRef:      # Secret reference specification.\n  #         name:         # Name of the secret resource.\n  #         namespace:    # Namespace of the secret resource.\n  providers:\n    # Hetzner DNS provider.\n    - name: hetznerdns-1\n      providerType: hetznerdns\n      templates:\n        repository: \"https://github.com/berops/claudie-config\"\n        path: \"templates/terraformer/hetznerdns\"\n      secretRef:\n        name: hetznerdns-secret-1\n        namespace: example-namespace\n\n    # Cloudflare DNS provider.\n    - name: cloudflare-1\n      providerType: cloudflare\n      # templates: ... using default templates\n      secretRef:\n        name: cloudflare-secret-1\n        namespace: example-namespace\n\n    # Hetzner Cloud provider.\n    - name: hetzner-1\n      providerType: hetzner\n      secretRef:\n        name: hetzner-secret-1\n        namespace: example-namespace\n\n    # GCP cloud provider.\n    - name: gcp-1\n      providerType: gcp\n      secretRef:\n        name: gcp-secret-1\n        namespace: example-namespace\n\n    # OCI cloud provider.\n    - name: oci-1\n      providerType: oci\n      secretRef:\n        name: oci-secret-1\n        namespace: example-namespace\n\n    # AWS cloud provider.\n    - name: aws-1\n      providerType: aws\n      secretRef:\n        name: aws-secret-1\n        namespace: example-namespace\n\n    # Azure cloud provider.\n    - name: azure-1\n      providerType: azure\n      secretRef:\n        name: azure-secret-1\n        namespace: example-namespace\n\n\n  # Nodepools field is used for defining the nodepool specification.\n  # You can think of them as a blueprints, not actual nodepools that will be created.\n  nodePools:\n    # Dynamic nodepools are created by Claudie, in one of the cloud providers specified.\n    # Definition specification:\n    # dynamic:\n    #   - name:             # Name of the nodepool, which is used as a reference to it. Needs to be unique.\n    #     providerSpec:     # Provider specification for this nodepool.\n    #       name:           # Name of the provider instance, referencing one of the providers define above.\n    #       region:         # Region of the nodepool.\n    #       zone:           # Zone of the nodepool.\n    #     count:            # Static number of nodes in this nodepool.\n    #     serverType:       # Machine type of the nodes in this nodepool.\n    #     image:            # OS image of the nodes in the nodepool.\n    #     storageDiskSize:  # Disk size of the storage disk for compute nodepool. (optional)\n    #     autoscaler:       # Autoscaler configuration. Mutually exclusive with Count.\n    #       min:            # Minimum number of nodes in nodepool.\n    #       max:            # Maximum number of nodes in nodepool.\n    #     labels:           # Map of custom user defined labels for this nodepool. This field is optional and is ignored if used in Loadbalancer cluster. (optional)\n    #     annotations:      # Map of user defined annotations, which will be applied on every node in the node pool. (optional)\n    #     taints:           # Array of custom user defined taints for this nodepool. This field is optional and is ignored if used in Loadbalancer cluster. (optional)\n    #       - key:          # The taint key to be applied to a node.\n    #         value:        # The taint value corresponding to the taint key.\n    #         effect:       # The effect of the taint on pods that do not tolerate the taint.\n    #\n    # Example definitions for each provider\n    dynamic:\n      - name: control-htz\n        providerSpec:\n          name: hetzner-1\n          region: hel1\n          zone: hel1-dc2\n        count: 3\n        serverType: cpx11\n        image: ubuntu-24.04\n        labels:\n          country: finland\n          city: helsinki\n        annotations:\n          node.longhorn.io/default-node-tags: '[\"finland\"]'\n        taints:\n          - key: country\n            value: finland\n            effect: NoSchedule\n\n      - name: compute-htz\n        providerSpec:\n          name: hetzner-1\n          region: hel1\n          zone: hel1-dc2\n        count: 2\n        serverType: cpx11\n        image: ubuntu-24.04\n        storageDiskSize: 50\n        labels:\n          country: finland\n          city: helsinki\n        annotations:\n          node.longhorn.io/default-node-tags: '[\"finland\"]'\n\n      - name: htz-autoscaled\n        providerSpec:\n          name: hetzner-1\n          region: hel1\n          zone: hel1-dc2\n        serverType: cpx11\n        image: ubuntu-24.04\n        storageDiskSize: 50\n        autoscaler:\n          min: 1\n          max: 5\n        labels:\n          country: finland\n          city: helsinki\n        annotations:\n          node.longhorn.io/default-node-tags: '[\"finland\"]'\n\n      - name: control-gcp\n        providerSpec:\n          name: gcp-1\n          region: europe-west1\n          zone: europe-west1-c\n        count: 3\n        serverType: e2-medium\n        image: ubuntu-minimal-2404-noble-amd64-v20241116\n        labels:\n          country: germany\n          city: frankfurt\n        annotations:\n          node.longhorn.io/default-node-tags: '[\"germany\"]'\n\n      - name: compute-gcp\n        providerSpec:\n          name: gcp-1\n          region: europe-west1\n          zone: europe-west1-c\n        count: 2\n        serverType: e2-small\n        image: ubuntu-minimal-2404-noble-amd64-v20241116\n        storageDiskSize: 50\n        labels:\n          country: germany\n          city: frankfurt\n        taints:\n          - key: city\n            value: frankfurt\n            effect: NoExecute\n        annotations:\n          node.longhorn.io/default-node-tags: '[\"germany\"]'\n\n      - name: control-oci\n        providerSpec:\n          name: oci-1\n          region: eu-milan-1\n          zone: hsVQ:EU-MILAN-1-AD-1\n        count: 3\n        serverType: VM.Standard2.1\n        image: ocid1.image.oc1.eu-milan-1.aaaaaaaa2ixn6kthb7vn6mom6bv7fts4omou5sowilrqfub2e7ouweiirkbq\n\n      - name: compute-oci\n        providerSpec:\n          name: oci-1\n          region: eu-milan-1\n          zone: hsVQ:EU-MILAN-1-AD-1\n        count: 2\n        serverType: VM.Standard2.1\n        image: ocid1.image.oc1.eu-milan-1.aaaaaaaa2ixn6kthb7vn6mom6bv7fts4omou5sowilrqfub2e7ouweiirkbq\n        storageDiskSize: 50\n\n      - name: control-aws\n        providerSpec:\n          name: aws-1\n          region: eu-central-1\n          zone: eu-central-1c\n        count: 2\n        serverType: t3.medium\n        image: ami-07eef52105e8a2059\n\n      - name: compute-aws\n        providerSpec:\n          name: aws-1\n          region: eu-central-1\n          zone: eu-central-1c\n        count: 2\n        serverType: t3.medium\n        image: ami-07eef52105e8a2059\n        storageDiskSize: 50\n\n      - name: control-azure\n        providerSpec:\n          name: azure-1\n          region: North Europe\n          zone: \"1\"\n        count: 2\n        serverType: Standard_B2s\n        image: Canonical:ubuntu-24_04-lts:server:24.04.202502210\n\n      - name: compute-azure\n        providerSpec:\n          name: azure-1\n          region: North Europe\n          zone: \"1\"\n        count: 2\n        serverType: Standard_B2s\n        image: Canonical:ubuntu-24_04-lts:server:24.04.202502210\n        storageDiskSize: 50\n\n      - name: loadbalancer-1\n        provider:\n        providerSpec:\n          name: gcp-1\n          region: europe-west1\n          zone: europe-west1-c\n        count: 2\n        serverType: e2-small\n        image: ubuntu-minimal-2404-noble-amd64-v20241116\n\n      - name: loadbalancer-2\n        providerSpec:\n          name: hetzner-1\n          region: hel1\n          zone: hel1-dc2\n        count: 2\n        serverType: cpx11\n        image: ubuntu-24.04\n\n    # Static nodepools are created by user beforehand.\n    # In case you want to use them in the Kubernetes cluster, make sure they meet the requirements. https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/#before-you-begin\n    # Definition specification:\n    # static:\n    #   - name:             # Name of the nodepool, which is used as a reference to it. Needs to be unique.\n    #     nodes:            # List of nodes which will be access under this nodepool.\n    #       - endpoint:     # IP under which Claudie will access this node. Can be private as long as Claudie will be able to access it.\n    #         username:     # Username of a user with root privileges (optional). If not specified user with name \"root\" will be used\n    #         secretRef:    # Secret reference specification, holding private key which will be used to SSH into the node (as root or as a user specificed in the username attribute).\n    #           name:       # Name of the secret resource.\n    #           namespace:  # Namespace of the secret resource.\n    #     labels:           # Map of custom user defined labels for this nodepool. This field is optional and is ignored if used in Loadbalancer cluster. (optional)\n    #     annotations:      # Map of user defined annotations, which will be applied on every node in the node pool. (optional)\n    #     taints:           # Array of custom user defined taints for this nodepool. This field is optional and is ignored if used in Loadbalancer cluster. (optional)\n    #       - key:          # The taint key to be applied to a node.\n    #         value:        # The taint value corresponding to the taint key.\n    #         effect:       # The effect of the taint on pods that do not tolerate the taint.\n    #\n    # Example definitions\n    static:\n      - name: datacenter-1\n        nodes:\n          - endpoint: \"192.168.10.1\"\n            secretRef:\n              name: datacenter-1-key\n              namespace: example-namespace\n\n          - endpoint: \"192.168.10.2\"\n            secretRef:\n              name: datacenter-1-key\n              namespace: example-namespace\n\n          - endpoint: \"192.168.10.3\"\n            username: admin\n            secretRef:\n              name: datacenter-1-key\n              namespace: example-namespace\n        labels:\n          datacenter: datacenter-1\n        annotations:\n          node.longhorn.io/default-node-tags: '[\"datacenter-1\"]'\n        taints:\n          - key: datacenter\n            effect: NoExecute\n\n\n  # Kubernetes field is used to define the kubernetes clusters.\n  # Definition specification:\n  #\n  # clusters:\n  #   - name:           # Name of the cluster. The name will be appended to the created node name.\n  #     version:        # Kubernetes version in semver scheme, must be supported by KubeOne.\n  #     network:        # Private network IP range.\n  #     pools:          # Nodepool names which cluster will be composed of. User can reuse same nodepool specification on multiple clusters.\n  #       control:      # List of nodepool names, which will be used as control nodes.\n  #       compute:      # List of nodepool names, which will be used as compute nodes.\n  #\n  # Example definitions:\n  kubernetes:\n    clusters:\n      - name: dev-cluster\n        version: 1.27.0\n        network: 192.168.2.0/24\n        pools:\n          control:\n            - control-htz\n            - control-gcp\n          compute:\n            - compute-htz\n            - compute-gcp\n            - compute-azure\n            - htz-autoscaled\n        installationProxy: # learn [more](https://docs.claudie.io/latest/http-proxy)\n          mode: \"on\" # can be on, off or default\n          endpoint: http://proxy.claudie.io:8880 # you can use your own HTTP proxy. If not specified http://proxy.claudie.io:8880 is the default value.\n\n      - name: prod-cluster\n        version: 1.27.0\n        network: 192.168.2.0/24\n        pools:\n          control:\n            - control-htz\n            - control-gcp\n            - control-oci\n            - control-aws\n            - control-azure\n          compute:\n            - compute-htz\n            - compute-gcp\n            - compute-oci\n            - compute-aws\n            - compute-azure\n        installationProxy: # learn [more](https://docs.claudie.io/latest/http-proxy)\n          mode: \"off\" # can be on, off or default\n\n      - name: hybrid-cluster\n        version: 1.27.0\n        network: 192.168.2.0/24\n        pools:\n          control:\n            - datacenter-1\n          compute:\n            - compute-htz\n            - compute-gcp\n            - compute-azure\n        installationProxy: # learn [more](https://docs.claudie.io/latest/http-proxy)\n          mode: \"on\" # can be on, off or default\n          endpoint: http://proxy.claudie.io:8880 # you can use your own HTTP proxy. If not specified http://proxy.claudie.io:8880 is the default value.\n\n  # Loadbalancers field defines loadbalancers used for the kubernetes clusters and roles for the loadbalancers.\n  # Definition specification for role:\n  #\n  # roles:\n  #   - name:         # Name of the role, used as a reference later. Must be unique.\n  #     protocol:     # Protocol, this role will use.\n  #     port:         # Port, where traffic will be coming.\n  #     targetPort:   # Port, where loadbalancer will forward traffic to.\n  #     targetPools:  # Targeted nodes on kubernetes cluster. Specify a nodepool that is used in the targeted K8s cluster.\n  #     settings:     # Optional settings that further configures the role.\n  #       proxyProtocol:    # Turns on the proxy protocol, can be true, false. Default is true.\n  #       stickySessions:   # Turn on sticky sessions that will hash the source ip to always choose the same node to which the traffic will be forwarded to. Can be true, false. Default is false.\n  #\n  # Definition specification for loadbalancer:\n  #\n  # clusters:\n  #   - name:                 # Loadbalancer cluster name\n  #     roles:                # List of role names this loadbalancer will fulfil.\n  #     dns:                  # DNS specification, where DNS records will be created.\n  #       dnsZone:            # DNS zone name in your provider.\n  #       provider:           # Provider name for the DNS.\n  #       hostname:           # Hostname for the DNS record. Keep in mind the zone will be included automatically. If left empty the Claudie will create random hash as a hostname.\n  #       alternativeNames:   # Alternative hostnames for which A records will be created in addition to the specified hostname.\n  #         - other           #\n  #     targetedK8s:  # Name of the targeted kubernetes cluster\n  #     pools:        # List of nodepool names used for loadbalancer\n  #\n  # Example definitions:\n  loadBalancers:\n    roles:\n      - name: apiserver\n        protocol: tcp\n        port: 6443\n        targetPort: 6443\n        targetPools:\n            - control-htz # make sure that this nodepools is acutally used by the targeted `dev-cluster` cluster.\n      - name: https\n        protocol: tcp\n        port: 443\n        targetPort: 30143 # make sure there is a NodePort service.\n        targetPools:\n            - compute-htz # make sure that this nodepools is acutally used by the targeted `dev-cluster` cluster.\n        settings:\n          proxyProtocol: true\n    clusters:\n      - name: apiserver-lb-dev\n        roles:\n          - apiserver\n          - https\n        dns:\n          dnsZone: dns-zone\n          provider: hetznerdns-1\n        targetedK8s: dev-cluster\n        pools:\n          - loadbalancer-1\n      - name: apiserver-lb-prod\n        roles:\n          - apiserver\n        dns:\n          dnsZone: dns-zone\n          provider: cloudflare-1\n          hostname: my.fancy.url\n          alternativeNames:\n            - app1\n            - app2\n        targetedK8s: prod-cluster\n        pools:\n          - loadbalancer-2\n</code></pre>"},{"location":"input-manifest/external-templates/","title":"External Templates","text":"<p>Claudie allows to plug in your own templates for spawning the infrastructure. Specifying which templates are to be used is done at the provider level in the Input Manifest, for example:</p> <pre><code>apiVersion: claudie.io/v1beta1\nkind: InputManifest\nmetadata:\n  name: genesis-example\n  labels:\n    app.kubernetes.io/part-of: claudie\nspec:\n  providers:\n    - name: genesiscloud\n      providerType: genesiscloud\n      templates:\n        repository: \"https://github.com/berops/claudie-config\"\n        tag: \"v0.9.8\" # optional\n        path: \"templates/terraformer/genesiscloud\"\n      secretRef:\n        name: genesiscloud-secret\n        namespace: secrets\n...\n</code></pre> <ul> <li> <p>if no templates are specified it will always default to the latest commit on the Master/Main branch of the respective cloudprovider on the berops repository (i.e. <code>https://github.com/berops/claudie-config</code>).</p> </li> <li> <p>if templates are specified, but no tag is present it will default to the latest commit of the Master/Main branch of the respective repository.</p> </li> </ul> <p>The template repository need to follow a certain convention to work properly. For example: If we consider an external template repository accessible via a public git repository at:</p> <pre><code>https://github.com/berops/claudie-config\n</code></pre> <p>The repository can either contain only the necessary template files, or they can be stored in a subtree. To handle this, you need to pass a path within the public git repository, such as</p> <pre><code>templates/terraformer/gcp\n</code></pre> <p>This denotes that the necessary templates for Google Cloud Platform can be found in the subtree at:</p> <pre><code>claudie-config/templates/terraformer/gcp\n</code></pre> <p>To only deal with the necessary template files a sparse-checkout is used when downloading the external repository to have a local mirror present which will then be used to generate the terraform files. When using the template files for generation the subtree present at the above given example <code>claudie-config/templates/terraformer/gcp</code> the directory is traversed and the following rules apply:</p> <ul> <li> <p>if a subdirectory with name \"provider\" is present, all files within this directory will be considered as related to   Providers for interacting with the API of respective Cloud Providers, SaaS providers etc. When using the templates   for generation, the struct templates.Provider will be passed for each file individually.</p> </li> <li> <p>if a subdirectory with name \"networking\" is present all files within this directory will be considered as related   spawning a common networking infrastructure for all nodepools from a single provider. The files in this subdirectory   will use the providers generated in the previous step. When using the templates the struct templates.Networking   will be passed for each file individually.</p> </li> <li> <p>if a subdirectory with name \"nodepool\" is present all files within this directory will be considered as related   to spawning the VM instances along with attached disk and related resources for a single node coming from a specific   nodepool. When using the templates the struct templates.Nodepools will be passed for each file individually.</p> </li> <li> <p>if a subdirectory with name \"dns\" is present, all files within this directory will be considered as related to DNS.   Thus, the templates.DNS struct will be passed for each file when generating the templates.   Note: This subdirectory should contain its own file that will generate the Provider needed for interacting with   the necessary API of the respective cloud providers (the ones that will be generated from the \"provider\" subdirectory   will not be used in this case).</p> </li> </ul> <p>The complete structure of a subtree for a single provider for external templates located at claudie-config/templates/terraformer/gcp can look as follows:</p> <pre><code>\u2514\u2500\u2500 terraformer\n    |\u2500\u2500 gcp\n    \u2502   \u251c\u2500\u2500 dns\n    \u2502       \u2514\u2500\u2500 dns.tpl\n    \u2502   \u251c\u2500\u2500 networking\n    \u2502       \u2514\u2500\u2500 networking.tpl\n    \u2502   \u251c\u2500\u2500 nodepool\n    \u2502       \u251c\u2500\u2500 node.tpl\n    \u2502       \u2514\u2500\u2500 node_networking.tpl\n    \u2502   \u2514\u2500\u2500 provider\n    \u2502       \u2514\u2500\u2500 provider.tpl\n    ...\n</code></pre> <p>Examples of external templates can be found on:  https://github.com/berops/claudie-config</p>"},{"location":"input-manifest/external-templates/#rolling-update","title":"Rolling update","text":"<p>To handle more specific scenarios where the default templates provided by claudie do not fit the use case, we allow these external templates to be changed/adapted by the user.</p> <p>By providing this ability to specify the templates to be used when building the InputManifest infrastructure, there is one common scenario that should be handled by claudie, which is rolling updates.</p> <p>Rolling updates of nodepools are performed when a change to a provider's external templates is registered. Claudie checks that the external repository of the new templates exists and uses them to perform a rolling update of the infrastructure already built. In the below example, when the templates of provider Hetzner-1 are changed the rolling update of all the nodepools which reference that provider will start by doing an update on a single nodepool at a time.</p> <pre><code>apiVersion: claudie.io/v1beta1\nkind: InputManifest\nmetadata:\n  name: hetzner-example-manifest\n  labels:\n    app.kubernetes.io/part-of: claudie\nspec:\n  providers:\n    - name: hetzner-1\n      providerType: hetzner\n      templates:\n-       repository: \"https://github.com/berops/claudie-config\"\n-       path: \"templates/terraformer/hetzner\"\n+       repository: \"https://github.com/YouRepository/claudie-config\"\n+       path: \"templates/terraformer/hetzner\"\n      secretRef:\n        name: hetzner-secret-1\n        namespace: mynamespace\n\n  nodePools:\n    dynamic:\n      - name: control-htz\n        providerSpec:\n          # Name of the provider instance.\n          name: hetzner-1\n          # Region of the nodepool.\n          region: hel1\n          # Datacenter of the nodepool.\n          zone: hel1-dc2\n        count: 1\n        # Machine type name.\n        serverType: cpx11\n        # OS image name.\n        image: ubuntu-22.04\n\n      - name: compute-1-htz\n        providerSpec:\n          # Name of the provider instance.\n          name: hetzner-1\n          # Region of the nodepool.\n          region: fsn1\n          # Datacenter of the nodepool.\n          zone: fsn1-dc14\n        count: 2\n        # Machine type name.\n        serverType: cpx11\n        # OS image name.\n        image: ubuntu-22.04\n        storageDiskSize: 50\n\n      - name: compute-2-htz\n        providerSpec:\n          # Name of the provider instance.\n          name: hetzner-1\n          # Region of the nodepool.\n          region: nbg1\n          # Datacenter of the nodepool.\n          zone: nbg1-dc3\n        count: 2\n        # Machine type name.\n        serverType: cpx11\n        # OS image name.\n        image: ubuntu-22.04\n        storageDiskSize: 50\n\n  kubernetes:\n    clusters:\n      - name: hetzner-cluster\n        version: v1.27.0\n        network: 192.168.2.0/24\n        pools:\n          control:\n            - control-htz\n          compute:\n            - compute-1-htz\n            - compute-2-htz\n</code></pre> <p>The rolling update is also triggered if only the tag of the template is changed.</p> <pre><code>apiVersion: claudie.io/v1beta1\nkind: InputManifest\nmetadata:\n  name: hetzner-example-manifest\n  labels:\n    app.kubernetes.io/part-of: claudie\nspec:\n  providers:\n    - name: hetzner-1\n      providerType: hetzner\n      templates:\n-       repository: \"https://github.com/berops/claudie-config\"\n-       path: \"templates/terraformer/hetzner\"\n+       repository: \"https://github.com/berops/claudie-config\"\n+       tag: v0.9.8\n+       path: \"templates/terraformer/hetzner\"\n      secretRef:\n        name: hetzner-secret-1\n        namespace: mynamespace\n</code></pre>"},{"location":"input-manifest/gpu-example/","title":"GPUs example","text":"<p>We will follow the guide from Nvidia to deploy the <code>gpu-operator</code> into a claudie build kubernetes cluster. Make sure you fulfill the necessary listed requirements in prerequisites before continuing, if you decide to use a different cloud provider.</p> <p>In this example we will be using GenesisCloud as our provider, with the following config:</p> <pre><code>apiVersion: claudie.io/v1beta1\nkind: InputManifest\nmetadata:\n  name: genesis-example\n  labels:\n    app.kubernetes.io/part-of: claudie\nspec:\n  providers:\n    - name: genesiscloud\n      providerType: genesiscloud\n      templates:\n        repository: \"https://github.com/berops/claudie-config\"\n        tag: \"v0.9.8\"\n        path: \"templates/terraformer/genesiscloud\"\n      secretRef:\n        name: genesiscloud-secret\n        namespace: secrets\n\n  nodePools:\n    dynamic:\n    - name: gencloud-cpu\n      providerSpec:\n        name: genesiscloud\n        region: ARC-IS-HAF-1\n      count: 1\n      serverType: vcpu-2_memory-4g_disk-80g\n      image: \"Ubuntu 22.04\"\n      storageDiskSize: 50\n\n    - name: gencloud-gpu\n      providerSpec:\n        name: genesiscloud\n        region: ARC-IS-HAF-1\n      count: 2\n      serverType: vcpu-4_memory-12g_disk-80g_nvidia3080-1\n      image: \"Ubuntu 22.04\"\n      storageDiskSize: 50\n\n  kubernetes:\n    clusters:\n      - name: gpu-example\n        version: v1.27.0\n        network: 172.16.2.0/24\n        pools:\n          control:\n            - gencloud-cpu\n          compute:\n            - gencloud-gpu\n</code></pre> <p>After the <code>InputManifest</code> was successfully build by claudie, we deploy the <code>gpu-operator</code> to the <code>gpu-examepl</code>kubernetes cluster.</p> <ol> <li>Create a namespace for the gpu-operator.</li> </ol> <pre><code>kubectl create ns gpu-operator\n</code></pre> <pre><code>kubectl label --overwrite ns gpu-operator pod-security.kubernetes.io/enforce=privileged\n</code></pre> <ol> <li>Add Nvidia Helm repository.</li> </ol> <pre><code>helm repo add nvidia https://helm.ngc.nvidia.com/nvidia \\\n    &amp;&amp; helm repo update\n</code></pre> <ol> <li>Install the operator.</li> </ol> <pre><code>helm install --wait --generate-name \\\n    -n gpu-operator --create-namespace \\\n    nvidia/gpu-operator\n</code></pre> <ol> <li>Wait for the pods in the <code>gpu-operator</code> namespace to be ready.</li> </ol> <pre><code>NAME                                                              READY   STATUS      RESTARTS      AGE\ngpu-feature-discovery-4lrbz                                       1/1     Running     0              10m\ngpu-feature-discovery-5x88d                                       1/1     Running     0              10m\ngpu-operator-1708080094-node-feature-discovery-gc-84ff8f47tn7cd   1/1     Running     0              10m\ngpu-operator-1708080094-node-feature-discovery-master-757c27tm6   1/1     Running     0              10m\ngpu-operator-1708080094-node-feature-discovery-worker-495z2       1/1     Running     0              10m\ngpu-operator-1708080094-node-feature-discovery-worker-n8fl6       1/1     Running     0              10m\ngpu-operator-1708080094-node-feature-discovery-worker-znsk4       1/1     Running     0              10m\ngpu-operator-6dfb9bd487-2gxzr                                     1/1     Running     0              10m\nnvidia-container-toolkit-daemonset-jnqwn                          1/1     Running     0              10m\nnvidia-container-toolkit-daemonset-x9t56                          1/1     Running     0              10m\nnvidia-cuda-validator-l4w85                                       0/1     Completed   0              10m\nnvidia-cuda-validator-lqxhq                                       0/1     Completed   0              10m\nnvidia-dcgm-exporter-l9nzt                                        1/1     Running     0              10m\nnvidia-dcgm-exporter-q7c2x                                        1/1     Running     0              10m\nnvidia-device-plugin-daemonset-dbjjl                              1/1     Running     0              10m\nnvidia-device-plugin-daemonset-x5kfs                              1/1     Running     0              10m\nnvidia-driver-daemonset-dcq4g                                     1/1     Running     0              10m\nnvidia-driver-daemonset-sjjlb                                     1/1     Running     0              10m\nnvidia-operator-validator-jbc7r                                   1/1     Running     0              10m\nnvidia-operator-validator-q59mc                                   1/1     Running     0              10m\n</code></pre> <p>When all pods are ready you should be able to verify if the GPUs can be used</p> <pre><code>kubectl get nodes -o json | jq -r '.items[] | {name:.metadata.name, gpus:.status.capacity.\"nvidia.com/gpu\"}'\n</code></pre> <ol> <li>Deploy an example manifest that uses one of the available GPUs from the worker nodes.</li> </ol> <pre><code>apiVersion: v1\nkind: Pod\nmetadata:\n  name: cuda-vectoradd\nspec:\n  restartPolicy: OnFailure\n  containers:\n    - name: cuda-vectoradd\n      image: \"nvcr.io/nvidia/k8s/cuda-sample:vectoradd-cuda11.7.1-ubuntu20.04\"\n      resources:\n        limits:\n          nvidia.com/gpu: 1\n</code></pre> <p>From the logs of the pods you should be able to see</p> <pre><code>kubectl logs cuda-vectoradd\n[Vector addition of 50000 elements]\nCopy input data from the host memory to the CUDA device\nCUDA kernel launch with 196 blocks of 256 threads\nCopy output data from the CUDA device to the host memory\nTest PASSED\nDone\n</code></pre>"},{"location":"input-manifest/providers/aws/","title":"AWS","text":"<p>AWS cloud provider requires you to input the credentials as an <code>accesskey</code> and a <code>secretkey</code>.</p>"},{"location":"input-manifest/providers/aws/#compute-and-dns-example","title":"Compute and DNS example","text":"<pre><code>apiVersion: v1\nkind: Secret\nmetadata:\n  name: aws-secret\ndata:\n  accesskey: U0xEVVRLU0hGRE1TSktESUFMQVNTRA==\n  secretkey: aXVoYk9JSk4rb2luL29saWtEU2Fkc25vaVNWU0RzYWNvaW5PVVNIRA==\ntype: Opaque\n</code></pre>"},{"location":"input-manifest/providers/aws/#create-aws-credentials","title":"Create AWS credentials","text":""},{"location":"input-manifest/providers/aws/#prerequisites","title":"Prerequisites","text":"<ol> <li>Install AWS CLI tools by following this guide.</li> <li>Setup AWS CLI on your machine by following this guide.</li> <li>Ensure that the regions you're planning to use are enabled in your AWS account. You can check the available regions using this guide, and you can enable them using this guide. Otherwise, you may encounter a misleading error suggesting your STS token is invalid.</li> </ol>"},{"location":"input-manifest/providers/aws/#creating-aws-credentials-for-claudie","title":"Creating AWS credentials for Claudie","text":"<ol> <li> <p>Create a user using AWS CLI:     <pre><code>aws iam create-user --user-name claudie\n</code></pre></p> </li> <li> <p>Create a policy document with compute and DNS permissions required by Claudie:     <pre><code>cat &gt; policy.json &lt;&lt;EOF\n{\n   \"Version\":\"2012-10-17\",\n   \"Statement\":[\n      {\n         \"Effect\":\"Allow\",\n         \"Action\":[\n            \"ec2:*\"\n         ],\n         \"Resource\":\"*\"\n      },\n      {\n         \"Effect\":\"Allow\",\n         \"Action\":[\n            \"route53:*\"\n         ],\n         \"Resource\":\"*\"\n      }\n   ]\n}\nEOF\n</code></pre></p> <p>DNS permissions</p> <p>Exclude route53 permissions from the policy document, if you prefer not to use AWS as the DNS provider.</p> </li> <li> <p>Attach the policy to the claudie user:     <pre><code>aws iam put-user-policy --user-name claudie --policy-name ec2-and-dns-access --policy-document file://policy.json\n</code></pre></p> </li> <li> <p>Create access keys for claudie user:     <pre><code>aws iam create-access-key --user-name claudie\n</code></pre> <pre><code>{\n   \"AccessKey\":{\n      \"UserName\":\"claudie\",\n      \"AccessKeyId\":\"AKIAIOSFODNN7EXAMPLE\",\n      \"Status\":\"Active\",\n      \"SecretAccessKey\":\"wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\",\n      \"CreateDate\":\"2018-12-14T17:34:16Z\"\n   }\n}\n</code></pre></p> </li> </ol>"},{"location":"input-manifest/providers/aws/#dns-setup","title":"DNS setup","text":"<p>If you wish to use AWS as your DNS provider where Claudie creates DNS records pointing to Claudie managed clusters, you will need to create a public hosted zone by following this guide.</p> <p>AWS is not my domain registrar</p> <p>If you haven't acquired a domain via AWS and wish to utilize AWS for hosting your zone, you can refer to this guide on AWS nameservers. However, if you prefer not to use the entire domain, an alternative option is to delegate a subdomain to AWS.</p>"},{"location":"input-manifest/providers/aws/#input-manifest-examples","title":"Input manifest examples","text":""},{"location":"input-manifest/providers/aws/#create-a-secret-for-aws-provider","title":"Create a secret for AWS provider","text":"<p>The secret for an AWS provider must include the following mandatory fields: <code>accesskey</code> and <code>secretkey</code>.</p> <pre><code>kubectl create secret generic aws-secret-1 --namespace=mynamespace --from-literal=accesskey='SLDUTKSHFDMSJKDIALASSD' --from-literal=secretkey='iuhbOIJN+oin/olikDSadsnoiSVSDsacoinOUSHD'\n</code></pre>"},{"location":"input-manifest/providers/aws/#single-provider-multi-region-cluster-example","title":"Single provider, multi region cluster example","text":"<pre><code>apiVersion: claudie.io/v1beta1\nkind: InputManifest\nmetadata:\n  name: aws-example-manifest\n  labels:\n    app.kubernetes.io/part-of: claudie\nspec:\n\n  providers:\n    - name: aws-1\n      providerType: aws\n      secretRef:\n        name: aws-secret-1\n        namespace: mynamespace\n\n  nodePools:\n    dynamic:\n      - name: control-aws\n        providerSpec:\n          # Name of the provider instance.\n          name: aws-1\n          # Region of the nodepool.\n          region: eu-central-1\n          # Availability zone of the nodepool.\n          zone: eu-central-1a\n        count: 1\n        # Instance type name.\n        serverType: t3.medium\n        # AMI ID of the image ubuntu 24.04.\n        # Make sure to update it according to the region.\n        image: ami-07eef52105e8a2059\n\n      - name: compute-1-aws\n        providerSpec:\n          # Name of the provider instance.\n          name: aws-1\n          # Region of the nodepool.\n          region: eu-west-2\n          # Availability zone of the nodepool.\n          zone: eu-west-2a\n        count: 2\n        # Instance type name.\n        serverType: t3.medium\n        # AMI ID of the image ubuntu 24.04.\n        # Make sure to update it according to the region.\n        image: ami-091f18e98bc129c4e\n        storageDiskSize: 50\n\n      - name: compute-2-aws\n        providerSpec:\n          # Name of the provider instance.\n          name: aws-1\n          # Region of the nodepool.\n          region: eu-west-2\n          # Availability zone of the nodepool.\n          zone: eu-west-2a\n        count: 2\n        # Instance type name.\n        serverType: t3.medium\n        # AMI ID of the image ubuntu 24.04.\n        # Make sure to update it according to the region.\n        image: ami-091f18e98bc129c4e\n        storageDiskSize: 50\n\n  kubernetes:\n    clusters:\n      - name: aws-cluster\n        version: v1.27.0\n        network: 192.168.2.0/24\n        pools:\n          control:\n            - control-aws\n          compute:\n            - compute-1-aws\n            - compute-2-aws\n</code></pre>"},{"location":"input-manifest/providers/aws/#multi-provider-multi-region-clusters-example","title":"Multi provider, multi region clusters example","text":"<pre><code>kubectl create secret generic aws-secret-1 --namespace=mynamespace --from-literal=accesskey='SLDUTKSHFDMSJKDIALASSD' --from-literal=secretkey='iuhbOIJN+oin/olikDSadsnoiSVSDsacoinOUSHD'\nkubectl create secret generic aws-secret-2 --namespace=mynamespace --from-literal=accesskey='ODURNGUISNFAIPUNUGFINB' --from-literal=secretkey='asduvnva+skd/ounUIBPIUjnpiuBNuNipubnPuip'\n</code></pre> <pre><code>apiVersion: claudie.io/v1beta1\nkind: InputManifest\nmetadata:\n  name: aws-example-manifest\n  labels:\n    app.kubernetes.io/part-of: claudie\nspec:\n\n  providers:\n    - name: aws-1\n      providerType: aws\n      secretRef:\n        name: aws-secret-1\n        namespace: mynamespace\n    - name: aws-2\n      providerType: aws\n      secretRef:\n        name: aws-secret-2\n        namespace: mynamespace\n\n  nodePools:\n    dynamic:\n      - name: control-aws-1\n        providerSpec:\n          # Name of the provider instance.\n          name: aws-1\n          region: eu-central-1\n          # Availability zone of the nodepool.\n          zone: eu-central-1a\n        count: 1\n        # Instance type name.\n        serverType: t3.medium\n        # AMI ID of the image ubuntu 24.04.\n        # Make sure to update it according to the region.\n        image: ami-07eef52105e8a2059\n\n      - name: control-aws-2\n        providerSpec:\n          # Name of the provider instance.\n          name: aws-2\n          # Region of the nodepool.\n          region: eu-north-1\n          # Availability zone of the nodepool.\n          zone: eu-north-1a\n        count: 2\n        # Instance type name.\n        serverType: t3.medium\n        # AMI ID of the image ubuntu 24.04.\n        # Make sure to update it according to the region.\n        image: ami-09a9858973b288bdd\n\n      - name: compute-aws-1\n        providerSpec:\n          # Name of the provider instance.\n          name: aws-1\n          # Region of the nodepool.\n          region: eu-central-1\n          # Availability zone of the nodepool.\n          zone: eu-central-1a\n        count: 2\n        # Instance type name.\n        serverType: t3.medium\n        # AMI ID of the image ubuntu 24.04.\n        # Make sure to update it according to the region.\n        image: ami-07eef52105e8a2059\n        storageDiskSize: 50\n\n      - name: compute-aws-2\n        providerSpec:\n          # Name of the provider instance.\n          name: aws-2\n          # Region of the nodepool.\n          region: eu-west-3\n          # Availability zone of the nodepool.\n          zone: eu-west-3a\n        count: 2\n        # Instance type name.\n        serverType: t3.medium\n        # AMI ID of the image ubuntu 24.04.\n        # Make sure to update it according to the region.\n        image: ami-06e02ae7bdac6b938\n        storageDiskSize: 50\n\n  kubernetes:\n    clusters:\n      - name: aws-cluster\n        version: v1.27.0\n        network: 192.168.2.0/24\n        pools:\n          control:\n            - control-aws-1\n            - control-aws-2\n          compute:\n            - compute-aws-1\n            - compute-aws-2\n</code></pre>"},{"location":"input-manifest/providers/azure/","title":"Azure","text":"<p>Azure provider requires you to input <code>clientsecret</code>, <code>subscriptionid</code>, <code>tenantid</code>, and <code>clientid</code>.</p>"},{"location":"input-manifest/providers/azure/#compute-and-dns-example","title":"Compute and DNS example","text":"<pre><code>apiVersion: v1\nkind: Secret\nmetadata:\n  name: azure-secret\ndata:\n  clientid: QWJjZH5FRmd+SDZJamtsc35BQkMxNXNFRkdLNTRzNzhYfk9sazk=\n  # all resources you define will be charged here\n  clientsecret: NmE0ZGZzZzctc2Q0di1mNGFkLWRzdmEtYWQ0djYxNmZkNTEy\n  subscriptionid: NTRjZGFmYTUtc2R2cy00NWRzLTU0NnMtZGY2NTFzZmR0NjE0\n  tenantid: MDI1NXNjMjMtNzZ3ZS04N2c2LTk2NGYtYWJjMWRlZjJnaDNs\ntype: Opaque\n</code></pre>"},{"location":"input-manifest/providers/azure/#create-azure-credentials","title":"Create Azure credentials","text":""},{"location":"input-manifest/providers/azure/#prerequisites","title":"Prerequisites","text":"<ol> <li>Install Azure CLI by following this guide.</li> <li>Login to Azure this guide.</li> </ol>"},{"location":"input-manifest/providers/azure/#creating-azure-credentials-for-claudie","title":"Creating Azure credentials for Claudie","text":"<ol> <li> <p>Login to Azure with the following command:     <pre><code>az login\n</code></pre></p> </li> <li> <p>Permissions file for the new role that claudie service principal will use:     <pre><code>cat &gt; policy.json &lt;&lt;EOF\n{\n   \"Name\":\"Resource Group Management\",\n   \"Id\":\"bbcd72a7-2285-48ef-bn72-f606fba81fe7\",\n   \"IsCustom\":true,\n   \"Description\":\"Create and delete Resource Groups.\",\n   \"Actions\":[\n      \"Microsoft.Resources/subscriptions/resourceGroups/write\",\n      \"Microsoft.Resources/subscriptions/resourceGroups/delete\"\n   ],\n   \"AssignableScopes\":[\"/\"]\n}\nEOF\n</code></pre></p> </li> <li> <p>Create a role based on the policy document:     <pre><code>az role definition create --role-definition policy.json\n</code></pre></p> </li> <li> <p>Create a service account to access virtual machine resources as well as DNS:     <pre><code>az ad sp create-for-rbac --name claudie-sp\n</code></pre> <pre><code>{\n  \"clientId\": \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\",\n  \"displayName\": \"claudie-sp\",\n  \"clientSecret\": \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\",\n  \"tenant\": \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n}\n</code></pre></p> </li> <li> <p>Assign required roles for the service principal:     <pre><code>{\n  az role assignment create --assignee claudie-sp --role \"Virtual Machine Contributor\"\n  az role assignment create --assignee claudie-sp --role \"Network Contributor\"\n  az role assignment create --assignee claudie-sp --role \"Resource Group Management\"\n}\n</code></pre></p> </li> </ol>"},{"location":"input-manifest/providers/azure/#dns-requirements","title":"DNS requirements","text":"<p>If you wish to use Azure as your DNS provider where Claudie creates DNS records pointing to Claudie managed clusters, you will need to create a public DNS zone by following this guide.</p> <p>Azure is not my domain registrar</p> <p>If you haven't acquired a domain via Azure and wish to utilize Azure for hosting your zone, you can refer to this guide on Azure nameservers. However, if you prefer not to use the entire domain, an alternative option is to delegate a subdomain to Azure.</p>"},{"location":"input-manifest/providers/azure/#input-manifest-examples","title":"Input manifest examples","text":""},{"location":"input-manifest/providers/azure/#single-provider-multi-region-cluster-example","title":"Single provider, multi region cluster example","text":""},{"location":"input-manifest/providers/azure/#create-a-secret-for-azure-provider","title":"Create a secret for Azure provider","text":"<p>The secret for an Azure provider must include the following mandatory fields: <code>clientsecret</code>, <code>subscriptionid</code>, <code>tenantid</code>, and <code>clientid</code>.</p> <pre><code>kubectl create secret generic azure-secret-1 --namespace=mynamespace --from-literal=clientsecret='Abcd~EFg~H6Ijkls~ABC15sEFGK54s78X~Olk9' --from-literal=subscriptionid='6a4dfsg7-sd4v-f4ad-dsva-ad4v616fd512' --from-literal=tenantid='54cdafa5-sdvs-45ds-546s-df651sfdt614' --from-literal=clientid='0255sc23-76we-87g6-964f-abc1def2gh3l'\n</code></pre> <pre><code>apiVersion: claudie.io/v1beta1\nkind: InputManifest\nmetadata:\n  name: azure-example-manifest\n  labels:\n    app.kubernetes.io/part-of: claudie\nspec:\n  providers:\n    - name: azure-1\n      providerType: azure\n      secretRef:\n        name: azure-secret-1\n        namespace: mynamespace\n  nodePools:\n    dynamic:\n      - name: control-az\n        providerSpec:\n          # Name of the provider instance.\n          name: azure-1\n          # Location of the nodepool.\n          region: North Europe\n          # Zone of the nodepool.\n          zone: \"1\"\n        count: 2\n        # VM size name.\n        serverType: Standard_B2s\n        # URN of the image.\n        image: Canonical:ubuntu-24_04-lts:server:24.04.202502210\n\n      - name: compute-1-az\n        providerSpec:\n          # Name of the provider instance.\n          name: azure-1\n          # Location of the nodepool.\n          region: Germany West Central\n          # Zone of the nodepool.\n          zone: \"1\"\n        count: 2\n        # VM size name.\n        serverType: Standard_B2s\n        # URN of the image.\n        image: Canonical:ubuntu-24_04-lts:server:24.04.202502210\n        storageDiskSize: 50\n\n      - name: compute-2-az\n        providerSpec:\n          # Name of the provider instance.\n          name: azure-1\n          # Location of the nodepool.\n          region: North Europe\n          # Zone of the nodepool.\n          zone: \"1\"\n        count: 2\n        # VM size name.\n        serverType: Standard_B2s\n        # URN of the image.\n        image: Canonical:ubuntu-24_04-lts:server:24.04.202502210\n        storageDiskSize: 50\n\n  kubernetes:\n    clusters:\n      - name: azure-cluster\n        version: v1.27.0\n        network: 192.168.2.0/24\n        pools:\n          control:\n            - control-az\n          compute:\n            - compute-2-az\n            - compute-1-az\n</code></pre>"},{"location":"input-manifest/providers/azure/#multi-provider-multi-region-clusters-example","title":"Multi provider, multi region clusters example","text":"<pre><code>kubectl create secret generic azure-secret-1 --namespace=mynamespace --from-literal=clientsecret='Abcd~EFg~H6Ijkls~ABC15sEFGK54s78X~Olk9' --from-literal=subscriptionid='6a4dfsg7-sd4v-f4ad-dsva-ad4v616fd512' --from-literal=tenantid='54cdafa5-sdvs-45ds-546s-df651sfdt614' --from-literal=clientid='0255sc23-76we-87g6-964f-abc1def2gh3l'\n\nkubectl create secret generic azure-secret-2 --namespace=mynamespace --from-literal=clientsecret='Efgh~ijkL~on43noi~NiuscviBUIds78X~UkL7' --from-literal=subscriptionid='0965bd5b-usa3-as3c-ads1-csdaba6fd512' --from-literal=tenantid='55safa5d-dsfg-546s-45ds-d51251sfdaba' --from-literal=clientid='076wsc23-sdv2-09cA-8sd9-oigv23npn1p2'\n</code></pre> <pre><code>apiVersion: claudie.io/v1beta1\nkind: InputManifest\nmetadata:\n  name: azure-example-manifest\n  labels:\n    app.kubernetes.io/part-of: claudie\nspec:\n  providers:\n    - name: azure-1\n      providerType: azure\n      secretRef:\n        name: azure-secret-1\n        namespace: mynamespace\n\n    - name: azure-2\n      providerType: azure\n      secretRef:\n        name: azure-secret-2\n        namespace: mynamespace\n\n  nodePools:\n    dynamic:\n      - name: control-az-1\n        providerSpec:\n          # Name of the provider instance.\n          name: azure-1\n          # Location of the nodepool.\n          region: North Europe\n          # Zone of the nodepool.\n          zone: \"1\"\n        count: 1\n        # VM size name.\n        serverType: Standard_B2s\n        # URN of the image.\n        image: Canonical:ubuntu-24_04-lts:server:24.04.202502210\n\n      - name: control-az-2\n        providerSpec:\n          # Name of the provider instance.\n          name: azure-2\n          # Location of the nodepool.\n          region: Germany West Central\n          # Zone of the nodepool.\n          zone: \"2\"\n        count: 2\n        # VM size name.\n        serverType: Standard_B2s\n        # URN of the image.\n        image: Canonical:ubuntu-24_04-lts:server:24.04.202502210\n\n      - name: compute-az-1\n        providerSpec:\n          # Name of the provider instance.\n          name: azure-1\n          # Location of the nodepool.\n          region: Germany West Central\n          # Zone of the nodepool.\n          zone: \"2\"\n        count: 2\n        # VM size name.\n        serverType: Standard_B2s\n        # URN of the image.\n        image: Canonical:ubuntu-24_04-lts:server:24.04.202502210\n        storageDiskSize: 50\n\n      - name: compute-az-2\n        providerSpec:\n          # Name of the provider instance.\n          name: azure-2\n          # Location of the nodepool.\n          region: North Europe\n          # Zone of the nodepool.\n          zone: \"1\"\n        count: 2\n        # VM size name.\n        serverType: Standard_B2s\n        # URN of the image.\n        image: Canonical:ubuntu-24_04-lts:server:24.04.202502210\n        storageDiskSize: 50\n\n  kubernetes:\n    clusters:\n      - name: azure-cluster\n        version: v1.27.0\n        network: 192.168.2.0/24\n        pools:\n          control:\n            - control-az-1\n            - control-az-2\n          compute:\n            - compute-az-1\n            - compute-az-2\n</code></pre>"},{"location":"input-manifest/providers/cloudflare/","title":"Cloudflare","text":"<p>Cloudflare provider requires <code>apitoken</code> token field in string format.</p>"},{"location":"input-manifest/providers/cloudflare/#dns-example","title":"DNS example","text":"<pre><code>apiVersion: v1\nkind: Secret\nmetadata:\n  name: cloudflare-secret\ndata:\n  apitoken: a3NsSVNBODc4YTZldFlBZlhZY2c1aVl5ckZHTmxDeGM=\ntype: Opaque\n</code></pre>"},{"location":"input-manifest/providers/cloudflare/#create-cloudflare-credentials","title":"Create Cloudflare credentials","text":"<p>You can create Cloudflare API token by following this guide. The required permissions for the zone you want to use are:</p> <pre><code>Zone:Read\nDNS:Read\nDNS:Edit\n</code></pre>"},{"location":"input-manifest/providers/cloudflare/#dns-setup","title":"DNS setup","text":"<p>If you wish to use Cloudflare as your DNS provider where Claudie creates DNS records pointing to Claudie managed clusters, you will need to create a public DNS zone by following this guide.</p> <p>Cloudflare is not my domain registrar</p> <p>If you haven't acquired a domain via Cloudflare and wish to utilize Cloudflare for hosting your zone, you can refer to this guide on Cloudflare nameservers. However, if you prefer not to use the entire domain, an alternative option is to delegate a subdomain to Cloudflare.</p>"},{"location":"input-manifest/providers/cloudflare/#input-manifest-examples","title":"Input manifest examples","text":""},{"location":"input-manifest/providers/cloudflare/#load-balancing-example","title":"Load balancing example","text":"<p>Showcase example</p> <p>To make this example functional, you need to specify control plane and node pools. This current showcase will produce an error if used as is.</p>"},{"location":"input-manifest/providers/cloudflare/#create-a-secret-for-cloudflare-and-aws-providers","title":"Create a secret for Cloudflare and AWS providers","text":"<p>The secret for an Cloudflare provider must include the following mandatory fields: <code>apitoken</code>. <pre><code>kubectl create secret generic cloudflare-secret-1 --namespace=mynamespace --from-literal=apitoken='kslISA878a6etYAfXYcg5iYyrFGNlCxc'\n</code></pre></p> <p>The secret for an AWS provider must include the following mandatory fields: <code>accesskey</code> and <code>secretkey</code>. <pre><code>kubectl create secret generic aws-secret-1 --namespace=mynamespace --from-literal=accesskey='SLDUTKSHFDMSJKDIALASSD' --from-literal=secretkey='iuhbOIJN+oin/olikDSadsnoiSVSDsacoinOUSHD'\n</code></pre></p> <pre><code>apiVersion: claudie.io/v1beta1\nkind: InputManifest\nmetadata:\n  name: cloudflare-example-manifest\n  labels:\n    app.kubernetes.io/part-of: claudie\nspec:\n  providers:\n    - name: cloudflare-1\n      providerType: cloudflare\n      secretRef:\n        name: cloudflare-secret-1\n        namespace: mynamespace\n\n    - name: aws-1\n      providerType: aws\n      secretRef:\n        name: aws-secret-1\n        namespace: mynamespace\n\n  nodePools: \n    dynamic:\n      - name: loadbalancer\n        providerSpec:\n          name: aws-1\n          region: eu-central-1\n          zone: eu-central-1c\n        count: 2\n        serverType: t3.medium\n        image: ami-0965bd5ba4d59211c\n\n  kubernetes:\n    clusters:\n      - name: cluster\n        version: v1.27.0\n        network: 192.168.2.0/24\n        pools:\n          control: []\n          compute: []\n\n  loadBalancers:\n    roles:\n      - name: apiserver\n        protocol: tcp\n        port: 6443\n        targetPort: 6443\n        targetPools: []\n    clusters:\n      - name: apiserver-lb-prod\n        roles:\n          - apiserver\n        dns:\n          dnsZone: dns-zone\n          provider: cloudflare-1\n          hostname: my.fancy.url\n        targetedK8s: prod-cluster\n        pools:\n          - loadbalancer\n</code></pre>"},{"location":"input-manifest/providers/gcp/","title":"GCP","text":"<p>GCP provider requires you to input multiline <code>credentials</code> as well as specific GCP project ID <code>gcpproject</code> where to provision resources.</p>"},{"location":"input-manifest/providers/gcp/#compute-and-dns-example","title":"Compute and DNS example","text":"<pre><code>apiVersion: v1\nkind: Secret\nmetadata:\n  name: gcp-secret\ndata:\n  credentials: &gt;-\n    ewogICAgICAgICAidHlwZSI6InNlcnZpY2VfYWNjb3VudCIsCiAgICAgICAgICJwcm9qZWN0X2lkIjoicHJvamVjdC1jbGF1ZGllIiwKICAgICAgICAgInByaXZhdGVfa2V5X2lkIjoiYnNrZGxvODc1czkwODczOTQ3NjNlYjg0ZTQwNzkwM2xza2RpbXA0MzkiLAogICAgICAgICAicHJpdmF0ZV9rZXkiOiItLS0tLUJFR0lOIFBSSVZBVEUgS0VZLS0tLS1cblNLTE9vc0tKVVNEQU5CZ2txaGtpRzl3MEJBUUVGQUFTQ0JLY3dnZ1NqQWdFQUFvSUJBUUNqMi9hc2tKU0xvc2FkXG5NSUlFdlFJQkFEQU5CZ2txaGtpRzl3MEJBUUVGQUFTQ0JLY3dnZ1NqQWdFQUFvSUJBUUNqMi9hc2tKU0xvc2FkXG5NSUlFdlFJQkFEQU5CZ2txaGtpRzl3MEJBUUVGQUFTQ0JLY3dnZ1NqQWdFQUFvSUJBUUNqMi9hc2tKU0xvc2FkXG5NSUlFdlFJQkFEQU5CZ2txaGtpRzl3MEJBUUVGQUFTQ0JLY3dnZ1NqQWdFQUFvSUJBUUNqMi9hc2tKU0xvc2FkXG5NSUlFdlFJQkFEQU5CZ2txaGtpRzl3MEJBUUVGQUFTQ0JLY3dnZ1NqQWdFQUFvSUJBUUNqMi9hc2tKU0xvc2FkXG5NSUlFdlFJQkFEQU5CZ2txaGtpRzl3MEJBUUVGQUFTQ0JLY3dnZ1NqQWdFQUFvSUJBUUNqMi9hc2tKU0xvc2FkXG5NSUlFdlFJQkFEQU5CZ2txaGtpRzl3MEJBUUVGQUFTQ0JLY3dnZ1NqQWdFQUFvSUJBUUNqMi9hc2tKU0xvc2FkXG5NSUlFdlFJQkFEQU5CZ2txaGtpRzl3MEJBUUVGQUFTQ0JLY3dnZ1NqQWdFQUFvSUJBUUNqMi9hc2tKU0xvc2FkXG5NSUlFdlFJQkFEQU5CZ2txaGtpRzl3MEJBUUVGQUFTQ0JLY3dnZ1NqQWdFQUFvSUJBUUNqMi9hc2tKU0xvc2FkXG5NSUlFdlFJQkFEQU5CZ2txaGtpRzl3MEJBUUVGQUFTQ0JLY3dnZ1NqQWdFQUFvSUJBUUNqMi9hc2tKU0xvc2FkXG5NSUlFdlFJQkFEQU5CZ2txaGtpRzl3MEJBUUVGQUFTQ0JLY3dnZ1NqQWdFQUFvSUJBUUNqMi9hc2tKU0xvc2FkXG5NSUlFdlFJQkFEQU5CZ2txaGtpRzl3MEJBUUVGQUFTQ0JLY3dnZ1NqQWdFQUFvSUJBUUNqMi9hc2tKU0xvc2FkXG5NSUlFdlFJQkFEQU5CZ2txaGtpRzl3MEJBUUVGQUFTQ0JLY3dnZ1NqQWdFQUFvSUJBUUNqMi9hc2tKU0xvc2FkXG5NSUlFdlFJQkFEQU5CZ2txaGtpRzl3MEJBUUVGQUFTQ0JLY3dnZ1NqQWdFQUFvSUJBUUNqMi9hc2tKU0xvc2FkXG5NSUlFdlFJQkFEQU5CZ2txaGtpRzl3MEJBUUVGQUFTQ0JLY3dnZ1NqQWdFQUFvSUJBUUNqMi9hc2tKU0xvc2FkXG5NSUlFdlFJQkFEQU5CZ2txaGtpRzl3MEJBUUVGQUFTQ0JLY3dnZ1NqQWdFQUFvSUJBUUNqMi9hc2tKU0xvc2FkXG5NSUlFdlFJQkFEQU5CZ2txaGtpRzl3MEJBUUVGQUFTQ0JLY3dnZ1NqQWdFQUFvSUJBUUNqMi9hc2tKU0xvc2FkXG5NSUlFdlFJQkFEQU5CZ2txaGtpRzl3MEJBUUVGQUFTQ0JLY3dnZ1NqQWdFQUFvSUJBUUNqMi9hc2tKU0xvc2FkXG5NSUlFdlFJQkFEQU5CZ2txaGtpRzl3MEJBUUVGQUFTQ0JLY3dnZ1NqQWdFQUFvSUJBUUNqMi9hc2tKU0xvc2FkXG5NSUlFdlFJQkFEQU5CZ2txaGtpRzl3MEJBUUVGQUFTQ0JLY3dnZ1NqQWdFQUFvSUJBUUNqMi9hc2tKU0xvc2FkXG5NSUlFdlFJQkFEQU5CZ2txaGtpRzl3MEJBUUVGQUFTQ0JLY3dnZ1NqQWdFQUFvSUJBUUNqMi9hc2tKU0xvc2FkXG5NSUlFdlFJQkFEQU5CZ2txaGtpRzl3MEJBUUVGQUFTQ0JLY3dnZ1NqQWdFQUFvSUJBUUNqMi9hc2tKU0xvc2FkXG5NSUlFdlFJQkFEQU5CZ2txaGtpRzl3MEJBUUVGQUFTQ0JLY3dnZ1NqQWdFQUFvSUJBUUNqMi9hc2tKU0xvc2FkXG5NSUlFdlFJQkFEQU5CZ2txaGtpRzl3MEJBUUVGQUFTQ0JLY3dnZ1NqQWdFQUFvSUJBUUNqMi9hc2tKU0xvc2FkXG5NSUlFdlFJQkFEQU5CZ2txaGtpRzl3MEJBUUVGQUFTQ0JLY3dnZ1NqQWdFQUFvSUJBUUNqMi9hc2tKU0xvc2FkXG5NSUlFdlFJQkFEQU5CZ2txaGtpXG4tLS0tLUVORCBQUklWQVRFIEtFWS0tLS0tXG4iLAogICAgICAgICAiY2xpZW50X2VtYWlsIjoiY2xhdWRpZUBwcm9qZWN0LWNsYXVkaWUtMTIzNDU2LmlhbS5nc2VydmljZWFjY291bnQuY29tIiwKICAgICAgICAgImNsaWVudF9pZCI6IjEwOTg3NjU0MzIxMTIzNDU2Nzg5MCIsCiAgICAgICAgICJhdXRoX3VyaSI6Imh0dHBzOi8vYWNjb3VudHMuZ29vZ2xlLmNvbS9vL29hdXRoMi9hdXRoIiwKICAgICAgICAgInRva2VuX3VyaSI6Imh0dHBzOi8vb2F1dGgyLmdvb2dsZWFwaXMuY29tL3Rva2VuIiwKICAgICAgICAgImF1dGhfcHJvdmlkZXJfeDUwOV9jZXJ0X3VybCI6Imh0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL29hdXRoMi92MS9jZXJ0cyIsCiAgICAgICAgICJjbGllbnRfeDUwOV9jZXJ0X3VybCI6Imh0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL3JvYm90L3YxL21ldGFkYXRhL3g1MDkvY2xhdWRpZSU0MGNsYXVkaWUtcHJvamVjdC0xMjM0NTYuaWFtLmdzZXJ2aWNlYWNjb3VudC5jb20iCiAgICAgIH0=\n  gcpproject: cHJvamVjdC1jbGF1ZGll # base64 created from GCP project ID\ntype: Opaque\n</code></pre>"},{"location":"input-manifest/providers/gcp/#create-gcp-credentials","title":"Create GCP credentials","text":""},{"location":"input-manifest/providers/gcp/#prerequisites","title":"Prerequisites","text":"<ol> <li>Install gcoud CLI on your machine by following this guide.</li> <li>Initialize gcloud CLI by following this guide.</li> <li>Authorize cloud CLI by following this guide</li> </ol>"},{"location":"input-manifest/providers/gcp/#creating-gcp-credentials-for-claudie","title":"Creating GCP credentials for Claudie","text":"<ol> <li> <p>Create a GCP project: <pre><code>gcloud projects create claudie-project\n</code></pre></p> </li> <li> <p>Set the current project to claudie-project: <pre><code>gcloud config set project claudie-project\n</code></pre></p> </li> <li> <p>Attach billing account to your project: <pre><code>gcloud alpha billing accounts projects link claudie-project (--account-id=ACCOUNT_ID | --billing-account=ACCOUNT_ID)\n</code></pre></p> </li> <li> <p>Enable Compute Engine API and Cloud DNS API: <pre><code>{\n  gcloud services enable compute.googleapis.com\n  gcloud services enable dns.googleapis.com\n}\n</code></pre></p> </li> <li> <p>Create a service account: <pre><code>gcloud iam service-accounts create claudie-sa\n</code></pre></p> </li> <li> <p>Attach roles to the servcie account: <pre><code>{\n  gcloud projects add-iam-policy-binding claudie-project --member=serviceAccount:claudie-sa@claudie-project.iam.gserviceaccount.com --role=roles/compute.admin\n  gcloud projects add-iam-policy-binding claudie-project --member=serviceAccount:claudie-sa@claudie-project.iam.gserviceaccount.com --role=roles/dns.admin\n}\n</code></pre></p> </li> <li> <p>Recover service account keys for claudie-sa: <pre><code>gcloud iam service-accounts keys create claudie-credentials.json --iam-account=claudie-sa@claudie-project.iam.gserviceaccount.com\n</code></pre></p> </li> </ol>"},{"location":"input-manifest/providers/gcp/#dns-setup","title":"DNS setup","text":"<p>If you wish to use GCP as your DNS provider where Claudie creates DNS records pointing to Claudie managed clusters, you will need to create a public DNS zone by following this guide.</p> <p>GCP is not my domain registrar</p> <p>If you haven't acquired a domain via GCP and wish to utilize GCP for hosting your zone, you can refer to this guide on GCP nameservers. However, if you prefer not to use the entire domain, an alternative option is to delegate a subdomain to GCP.</p>"},{"location":"input-manifest/providers/gcp/#input-manifest-examples","title":"Input manifest examples","text":""},{"location":"input-manifest/providers/gcp/#single-provider-multi-region-cluster-example","title":"Single provider, multi region cluster example","text":""},{"location":"input-manifest/providers/gcp/#create-a-secret-for-cloudflare-and-gcp-providers","title":"Create a secret for Cloudflare and GCP providers","text":"<p>The secret for an GCP provider must include the following mandatory fields: <code>gcpproject</code> and <code>credentials</code>. <pre><code># The ./claudie-credentials.json file is the file created in #Creating GCP credentials for Claudie step 7.\nkubectl create secret generic gcp-secret-1 --namespace=mynamespace --from-literal=gcpproject='project-claudie' --from-file=credentials=./claudie-credentials.json\n</code></pre></p> <pre><code>apiVersion: claudie.io/v1beta1\nkind: InputManifest\nmetadata:\n  name: gcp-example-manifest\n  labels:\n    app.kubernetes.io/part-of: claudie\nspec:\n  providers:\n    - name: gcp-1\n      providerType: gcp\n      secretRef:\n        name: gcp-secret-1\n        namespace: mynamespace\n\n  nodePools:\n    dynamic:\n      - name: control-gcp\n        providerSpec:\n          # Name of the provider instance.\n          name: gcp-1\n          # Region of the nodepool.\n          region: europe-west1\n          # Zone of the nodepool.\n          zone: europe-west1-c\n        count: 1\n        # Machine type name.\n        serverType: e2-medium\n        # OS image name.\n        image: ubuntu-2404-noble-amd64-v20250313\n\n      - name: compute-1-gcp\n        providerSpec:\n          # Name of the provider instance.\n          name: gcp-1\n          # Region of the nodepool.\n          region: europe-west3\n          # Zone of the nodepool.\n          zone: europe-west3-a\n        count: 2\n        # Machine type name.\n        serverType: e2-medium\n        # OS image name.\n        image: ubuntu-2404-noble-amd64-v20250313\n        storageDiskSize: 50\n\n      - name: compute-2-gcp\n        providerSpec:\n          # Name of the provider instance.\n          name: gcp-1\n          # Region of the nodepool.\n          region: europe-west2\n          # Zone of the nodepool.\n          zone: europe-west2-a\n        count: 2\n        # Machine type name.\n        serverType: e2-medium\n        # OS image name.\n        image: ubuntu-2404-noble-amd64-v20250313\n        storageDiskSize: 50\n\n  kubernetes:\n    clusters:\n      - name: gcp-cluster\n        version: v1.27.0\n        network: 192.168.2.0/24\n        pools:\n          control:\n            - control-gcp\n          compute:\n            - compute-1-gcp\n            - compute-2-gcp\n</code></pre>"},{"location":"input-manifest/providers/gcp/#multi-provider-multi-region-clusters-example","title":"Multi provider, multi region clusters example","text":""},{"location":"input-manifest/providers/gcp/#create-a-secret-for-cloudflare-and-gcp-providers_1","title":"Create a secret for Cloudflare and GCP providers","text":"<p>The secret for an GCP provider must include the following mandatory fields: <code>gcpproject</code> and <code>credentials</code>. <pre><code># The ./claudie-credentials.json file is the file created in #Creating GCP credentials for Claudie step 7.\nkubectl create secret generic gcp-secret-1 --namespace=mynamespace --from-literal=gcpproject='project-claudie' --from-file=credentials=./claudie-credentials.json\nkubectl create secret generic gcp-secret-2 --namespace=mynamespace --from-literal=gcpproject='project-claudie' --from-file=credentials=./claudie-credentials-2.json\n</code></pre></p> <pre><code>apiVersion: claudie.io/v1beta1\nkind: InputManifest\nmetadata:\n  name: gcp-example-manifest\n  labels:\n    app.kubernetes.io/part-of: claudie\nspec:\n  providers:\n    - name: gcp-1\n      providerType: gcp\n      secretRef:\n        name: gcp-secret-1\n        namespace: mynamespace\n    - name: gcp-2\n      providerType: gcp\n      secretRef:\n        name: gcp-secret-2\n        namespace: mynamespace\n\n  nodePools:\n    dynamic:\n      - name: control-gcp-1\n        providerSpec:\n          # Name of the provider instance.\n          name: gcp-1\n          # Region of the nodepool.\n          region: europe-west1\n          # Zone of the nodepool.\n          zone: europe-west1-c\n        count: 1\n        # Machine type name.\n        serverType: e2-medium\n        # OS image name.\n        image: ubuntu-2404-noble-amd64-v20250313\n\n      - name: control-gcp-2\n        providerSpec:\n          # Name of the provider instance.\n          name: gcp-2\n          # Region of the nodepool.\n          region: europe-west1\n          # Zone of the nodepool.\n          zone: europe-west1-a\n        count: 2\n        # Machine type name.\n        serverType: e2-medium\n        # OS image name.\n        image: ubuntu-2404-noble-amd64-v20250313\n\n      - name: compute-gcp-1\n        providerSpec:\n          # Name of the provider instance.\n          name: gcp-1\n          # Region of the nodepool.\n          region: europe-west3\n          # Zone of the nodepool.\n          zone: europe-west3-a\n        count: 2\n        # Machine type name.\n        serverType: e2-medium\n        # OS image name.\n        image: ubuntu-2404-noble-amd64-v20250313\n        storageDiskSize: 50\n\n      - name: compute-gcp-2\n        providerSpec:\n          # Name of the provider instance.\n          name: gcp-2\n          # Region of the nodepool.\n          region: europe-west1\n          # Zone of the nodepool.\n          zone: europe-west1-c\n        count: 2\n        # Machine type name.\n        serverType: e2-medium\n        # OS image name.\n        image: ubuntu-2404-noble-amd64-v20250313\n        storageDiskSize: 50\n\n  kubernetes:\n    clusters:\n      - name: gcp-cluster\n        version: v1.27.0\n        network: 192.168.2.0/24\n        pools:\n          control:\n            - control-gcp-1\n            - control-gcp-2\n          compute:\n            - compute-gcp-1\n            - compute-gcp-2\n</code></pre>"},{"location":"input-manifest/providers/genesiscloud/","title":"Genesis Cloud","text":"<p>Genesis cloud provider requires <code>apitoken</code> token field in string format.</p>"},{"location":"input-manifest/providers/genesiscloud/#compute-example","title":"Compute example","text":"<pre><code>apiVersion: v1\nkind: Secret\nmetadata:\n  name: genesiscloud-secret\ndata:\n  apitoken: GCAAAZZZZnnnnNNNNxXXX123BBcc123qqcva\ntype: Opaque\n</code></pre>"},{"location":"input-manifest/providers/genesiscloud/#create-genesis-cloud-api-token","title":"Create Genesis Cloud API token","text":"<p>You can create Genesis Cloud API token by following this guide. The token must be able to have access to the following compute resources.</p> <pre><code>Instances, Network, Volumes\n</code></pre>"},{"location":"input-manifest/providers/genesiscloud/#input-manifest-examples","title":"Input manifest examples","text":""},{"location":"input-manifest/providers/genesiscloud/#single-provider-multi-region-cluster-example","title":"Single provider, multi region cluster example","text":""},{"location":"input-manifest/providers/genesiscloud/#create-a-secret-for-genesis-cloud-provider","title":"Create a secret for Genesis cloud provider","text":"<pre><code>kubectl create secret generic genesiscloud-secret --namespace=mynamespace --from-literal=apitoken='GCAAAZZZZnnnnNNNNxXXX123BBcc123qqcva'\n</code></pre> <pre><code>apiVersion: claudie.io/v1beta1\nkind: InputManifest\nmetadata:\n  name: genesis-example\n  labels:\n    app.kubernetes.io/part-of: claudie\nspec:\n  providers:\n    - name: genesiscloud\n      providerType: genesiscloud\n      secretRef:\n        name: genesiscloud-secret\n        namespace: mynamespace\n\n  nodePools:\n    dynamic:\n      - name: control\n        providerSpec:\n          name: genesiscloud\n          region: ARC-IS-HAF-1\n        count: 1\n        serverType: vcpu-2_memory-4g_disk-80g\n        image: \"Ubuntu 22.04\"\n        storageDiskSize: 50\n\n      - name: compute\n        providerSpec:\n          name: genesiscloud\n          region: ARC-IS-HAF-1\n        count: 3\n        serverType: vcpu-2_memory-4g_disk-80g\n        image: \"Ubuntu 22.04\"\n        storageDiskSize: 50\n\n  kubernetes:\n    clusters:\n      - name: genesiscloud-cluster\n        version: v1.27.0\n        network: 172.16.2.0/24\n        pools:\n          control:\n            - control\n          compute:\n            - compute\n</code></pre>"},{"location":"input-manifest/providers/hetzner/","title":"Hetzner","text":"<p>Hetzner provider requires <code>credentials</code> token field in string format, and Hetzner DNS provider requires <code>apitoken</code> field in string format.</p>"},{"location":"input-manifest/providers/hetzner/#compute-example","title":"Compute example","text":"<pre><code>apiVersion: v1\nkind: Secret\nmetadata:\n  name: hetzner-secret\ndata:\n  credentials: a3NsSVNBODc4YTZldFlBZlhZY2c1aVl5ckZHTmxDeGNJQ28wNjBIVkV5Z2pGczIxbnNrZTc2a3NqS2tvMjFscA==\ntype: Opaque\n</code></pre>"},{"location":"input-manifest/providers/hetzner/#dns-example","title":"DNS example","text":"<pre><code>apiVersion: v1\nkind: Secret\nmetadata:\n  name: hetznerdns-secret\ndata:\n  apitoken: a1V0UmcxcGdqQ1JhYXBQbWQ3cEFJalZnaHVyWG8xY24=\ntype: Opaque\n</code></pre>"},{"location":"input-manifest/providers/hetzner/#create-hetzner-api-credentials","title":"Create Hetzner API credentials","text":"<p>You can create Hetzner API credentials by following this guide. The required permissions for the zone you want to use are:</p> <pre><code>Read &amp; Write\n</code></pre>"},{"location":"input-manifest/providers/hetzner/#create-hetzner-dns-credentials","title":"Create Hetzner DNS credentials","text":"<p>You can create Hetzner DNS credentials by following this guide.</p> <p>DNS provider specification</p> <p>The provider for DNS is different from the one for the Cloud.</p>"},{"location":"input-manifest/providers/hetzner/#dns-setup","title":"DNS setup","text":"<p>If you wish to use Hetzner as your DNS provider where Claudie creates DNS records pointing to Claudie managed clusters, you will need to create a public DNS zone by following this guide.</p> <p>Hetzner is not my domain registrar</p> <p>If you haven't acquired a domain via Hetzner and wish to utilize Hetzner for hosting your zone, you can refer to this guide on Hetzner nameservers. However, if you prefer not to use the entire domain, an alternative option is to delegate a subdomain to Hetzner.</p>"},{"location":"input-manifest/providers/hetzner/#input-manifest-examples","title":"Input manifest examples","text":""},{"location":"input-manifest/providers/hetzner/#single-provider-multi-region-cluster-example","title":"Single provider, multi region cluster example","text":""},{"location":"input-manifest/providers/hetzner/#create-a-secret-for-hetzner-provider","title":"Create a secret for Hetzner provider","text":"<p>The secret for an Hetzner provider must include the following mandatory fields: <code>credentials</code>.</p> <pre><code>kubectl create secret generic hetzner-secret-1 --namespace=mynamespace --from-literal=credentials='kslISA878a6etYAfXYcg5iYyrFGNlCxcICo060HVEygjFs21nske76ksjKko21lp'\n</code></pre> <pre><code>apiVersion: claudie.io/v1beta1\nkind: InputManifest\nmetadata:\n  name: hetzner-example-manifest\n  labels:\n    app.kubernetes.io/part-of: claudie\nspec:\n  providers:\n    - name: hetzner-1\n      providerType: hetzner\n      secretRef:\n        name: hetzner-secret-1\n        namespace: mynamespace\n\n  nodePools:\n    dynamic:\n      - name: control-htz\n        providerSpec:\n          # Name of the provider instance.\n          name: hetzner-1\n          # Region of the nodepool.\n          region: hel1\n          # Datacenter of the nodepool.\n          zone: hel1-dc2\n        count: 1\n        # Machine type name.\n        serverType: cpx11\n        # OS image name.\n        image: ubuntu-24.04\n\n      - name: compute-1-htz\n        providerSpec:\n          # Name of the provider instance.\n          name: hetzner-1\n          # Region of the nodepool.\n          region: fsn1\n          # Datacenter of the nodepool.\n          zone: fsn1-dc14\n        count: 2\n        # Machine type name.\n        serverType: cpx11\n        # OS image name.\n        image: ubuntu-24.04\n        storageDiskSize: 50\n\n      - name: compute-2-htz\n        providerSpec:\n          # Name of the provider instance.\n          name: hetzner-1\n          # Region of the nodepool.\n          region: nbg1\n          # Datacenter of the nodepool.\n          zone: nbg1-dc3\n        count: 2\n        # Machine type name.\n        serverType: cpx11\n        # OS image name.\n        image: ubuntu-24.04\n        storageDiskSize: 50\n\n  kubernetes:\n    clusters:\n      - name: hetzner-cluster\n        version: v1.27.0\n        network: 192.168.2.0/24\n        pools:\n          control:\n            - control-htz\n          compute:\n            - compute-1-htz\n            - compute-2-htz\n</code></pre>"},{"location":"input-manifest/providers/hetzner/#multi-provider-multi-region-clusters-example","title":"Multi provider, multi region clusters example","text":""},{"location":"input-manifest/providers/hetzner/#create-a-secret-for-hetzner-provider_1","title":"Create a secret for Hetzner provider","text":"<p>The secret for an Hetzner provider must include the following mandatory fields: <code>credentials</code>.</p> <pre><code>kubectl create secret generic hetzner-secret-1 --namespace=mynamespace --from-literal=credentials='kslISA878a6etYAfXYcg5iYyrFGNlCxcICo060HVEygjFs21nske76ksjKko21lp'\nkubectl create secret generic hetzner-secret-2 --namespace=mynamespace --from-literal=credentials='kslIIOUYBiuui7iGBYIUiuybpiUB87bgPyuCo060HVEygjFs21nske76ksjKko21l'\n</code></pre> <pre><code>apiVersion: claudie.io/v1beta1\nkind: InputManifest\nmetadata:\n  name: hetzner-example-manifest\n  labels:\n    app.kubernetes.io/part-of: claudie\nspec:\n  providers:\n    - name: hetzner-1\n      providerType: hetzner\n      secretRef:\n        name: hetzner-secret-1\n        namespace: mynamespace\n    - name: hetzner-2\n      providerType: hetzner\n      secretRef:\n        name: hetzner-secret-2\n        namespace: mynamespace        \n\n  nodePools:\n    dynamic:\n      - name: control-htz-1\n        providerSpec:\n          # Name of the provider instance.\n          name: hetzner-1\n          # Region of the nodepool.\n          region: hel1\n          # Datacenter of the nodepool.\n          zone: hel1-dc2\n        count: 1\n        # Machine type name.\n        serverType: cpx11\n        # OS image name.\n        image: ubuntu-24.04\n\n      - name: control-htz-2\n        providerSpec:\n          # Name of the provider instance.\n          name: hetzner-2\n          # Region of the nodepool.\n          region: fsn1\n          # Datacenter of the nodepool.\n          zone: fsn1-dc14\n        count: 2\n        # Machine type name.\n        serverType: cpx11\n        # OS image name.\n        image: ubuntu-24.04\n\n      - name: compute-htz-1\n        providerSpec:\n          # Name of the provider instance.\n          name: hetzner-1\n          # Region of the nodepool.\n          region: fsn1\n          # Datacenter of the nodepool.\n          zone: fsn1-dc14\n        count: 2\n        # Machine type name.\n        serverType: cpx11\n        # OS image name.\n        image: ubuntu-24.04\n        storageDiskSize: 50\n\n      - name: compute-htz-2\n        providerSpec:\n          # Name of the provider instance.\n          name: hetzner-2\n          # Region of the nodepool.\n          region: nbg1\n          # Datacenter of the nodepool.\n          zone: nbg1-dc3\n        count: 2\n        # Machine type name.\n        serverType: cpx11\n        # OS image name.\n        image: ubuntu-24.04\n        storageDiskSize: 50\n\n  kubernetes:\n    clusters:\n      - name: hetzner-cluster\n        version: v1.27.0\n        network: 192.168.2.0/24\n        pools:\n          control:\n            - control-htz-1\n            - control-htz-2\n          compute:\n            - compute-htz-1\n            - compute-htz-2\n</code></pre>"},{"location":"input-manifest/providers/oci/","title":"OCI","text":"<p>OCI provider requires you to input <code>privatekey</code>, <code>keyfingerprint</code>, <code>tenancyocid</code>, <code>userocid</code>, and <code>compartmentocid</code>.</p>"},{"location":"input-manifest/providers/oci/#compute-and-dns-example","title":"Compute and DNS example","text":"<pre><code>apiVersion: v1\nkind: Secret\nmetadata:\n  name: oci-secret\ndata:\n  compartmentocid: b2NpZDIuY29tcGFydG1lbnQub2MyLi5hYWFhYWFhYWEycnNmdmx2eGMzNG8wNjBrZmR5Z3NkczIxbnNrZTc2a3Nqa2tvMjFscHNkZnNm\n  keyfingerprint: YWI6Y2Q6M2Y6MzQ6MzM6MjI6MzI6MzQ6NTQ6NTQ6NDU6NzY6NzY6Nzg6OTg6YWE=\n  privatekey: &gt;-\n    LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQogICAgICAgIE1JSUV2UUlCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktjd2dnU2pBZ0VBQW9JQkFRQ2oyL2Fza0pTTG9zYWQKICAgICAgICBNSUlFdlFJQkFEQU5CZ2txaGtpRzl3MEJBUUVGQUFTQ0JLY3dnZ1NqQWdFQUFvSUJBUUNqMi9hc2tKU0xvc2FkCiAgICAgICAgTUlJRXZRSUJBREFOQmdrcWhraUc5dzBCQVFFRkFBU0NCS2N3Z2dTakFnRUFBb0lCQVFDajIvYXNrSlNMb3NhZAogICAgICAgIE1JSUV2UUlCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktjd2dnU2pBZ0VBQW9JQkFRQ2oyL2Fza0pTTG9zYWQKICAgICAgICBNSUlFdlFJQkFEQU5CZ2txaGtpRzl3MEJBUUVGQUFTQ0JLY3dnZ1NqQWdFQUFvSUJBUUNqMi9hc2tKU0xvc2FkCiAgICAgICAgTUlJRXZRSUJBREFOQmdrcWhraUc5dzBCQVFFRkFBU0NCS2N3Z2dTakFnRUFBb0lCQVFDajIvYXNrSlNMb3NhZAogICAgICAgIE1JSUV2UUlCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktjd2dnU2pBZ0VBQW9JQkFRQ2oyL2Fza0pTTG9zYWQKICAgICAgICBNSUlFdlFJQkFEQU5CZ2txaGtpRzl3MEJBUUVGQUFTQ0JLY3dnZ1NqQWdFQUFvSUJBUUNqMi9hc2tKU0xvc2FkCiAgICAgICAgTUlJRXZRSUJBREFOQmdrcWhraUc5dzBCQVFFRkFBU0NCS2N3Z2dTakFnRUFBb0lCQVFDajIvYXNrSlNMb3NhZAogICAgICAgIE1JSUV2UUlCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktjd2dnU2pBZ0VBQW9JQkFRQ2oyL2Fza0pTTG9zYWQKICAgICAgICBNSUlFdlFJQkFEQU5CZ2txaGtpRzl3MEJBUUVGQUFTQ0JLY3dnZ1NqQWdFQUFvSUJBUUNqMi9hc2tKU0xvc2FkCiAgICAgICAgTUlJRXZRSUJBREFOQmdrcWhraUc5dzBCQVFFRkFBU0NCS2N3Z2dTakFnRUFBb0lCQVFDajIvYXNrSlNMb3NhZAogICAgICAgIE1JSUV2UUlCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktjd2dnU2pBZ0VBQW9JQkFRQ2oyL2Fza0pTTG9zYWQKICAgICAgICBNSUlFdlFJQkFEQU5CZ2txaGtpRzl3MEJBUUVGQUFTQ0JLY3dnZ1NqQWdFQUFvSUJBUUNqMi9hc2tKU0xvc2FkCiAgICAgICAgTUlJRXZRSUJBREFOQmdrcWhraUc5dzBCQVFFRkFBU0NCS2N3Z2dTakFnRUFBb0lCQVFDajIvYXNrSlNMb3NhZAogICAgICAgIE1JSUV2UUlCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktjd2dnU2pBZ0VBQW9JQkFRQ2oyL2Fza0pTTG9zYWQKICAgICAgICBNSUlFdlFJQkFEQU5CZ2txaGtpRzl3MEJBUUVGQUFTQ0JLY3dnZ1NqQWdFQUFvSUJBUUNqMi9hc2tKU0xvc2FkCiAgICAgICAgTUlJRXZRSUJBREFOQmdrcWhraUc5dzBCQVFFRkFBU0NCS2N3Z2dTakFnRUFBb0lCQVFDajIvYXNrSlNMb3NhZAogICAgICAgIE1JSUV2UUlCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktjd2dnU2pBZ0VBQW9JQkFRQ2oyL2Fza0pTTG9zYWQKICAgICAgICBNSUlFdlFJQkFEQU5CZ2txaGtpRzl3MEJBUUVGQUFTQ0JLY3dnZ1NqQWdFQUFvSUJBUUNqMi9hc2tKU0xvc2FkCiAgICAgICAgTUlJRXZRSUJBREFOQmdrcWhraUc5dzBCQVFFRkFBU0NCS2N3Z2dTakFnRUFBb0lCQVFDajIvYXNrSlNMb3NhZAogICAgICAgIE1JSUV2UUlCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktjd2dnU2pBZ0VBQW9JQkFRQ2oyL2Fza0pTTG9zYWQKICAgICAgICBNSUlFdlFJQkFEQU5CZ2txaGtpRzl3MEJBUUVGQUFTQ0JLY3dnZ1NqQWdFQUFvSUJBUUNqMi9hc2tKU0xvc2FkCiAgICAgICAgTUlJRXZRSUJBREFOQmdrcWhraUc5dzBCQVFFRkFBU0NCS2N3Z2dTakFnRUFBb0lCQVFDajIvYXNrSlNMb3NhZAogICAgICAgIE1JSUV2UUlCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktjd2dnU2pBZ0VBQW9JQkFRQ2oyLz09CiAgICAgICAgLS0tLS1FTkQgUlNBIFBSSVZBVEUgS0VZLS0tLS0=\n  tenancyocid: b2NpZDIudGVuYW5jeS5vYzIuLmFhYWFhYWFheXJzZnZsdnhjMzRvMDYwa2ZkeWdzZHMyMW5za2U3NmtzamtrbzIxbHBzZGZzZnNnYnJ0Z2hz\n  userocid: b2NpZDIudXNlci5vYzIuLmFhYWFhYWFhYWFueXJzZnZsdnhjMzRvMDYwa2ZkeWdzZHMyMW5za2U3NmtzamtrbzIxbHBzZGZzZg==\ntype: Opaque\n</code></pre>"},{"location":"input-manifest/providers/oci/#create-oci-credentials","title":"Create OCI credentials","text":""},{"location":"input-manifest/providers/oci/#prerequisites","title":"Prerequisites","text":"<ol> <li>Install OCI CLI by following this guide.</li> <li>Configure OCI CLI by following this guide.</li> </ol>"},{"location":"input-manifest/providers/oci/#creating-oci-credentials-for-claudie","title":"Creating OCI credentials for Claudie","text":"<ol> <li> <p>Export your tenant id: <pre><code>export tenancy_ocid=\"ocid\"\n</code></pre></p> <p>Find your tenant id</p> <p>You can find it under <code>Identity &amp; Security</code> tab and <code>Compartments</code> option.</p> </li> <li> <p>Create OCI compartment where Claudie deploys its resources: <pre><code>{\n  oci iam compartment create --name claudie-compartment --description claudie-compartment --compartment-id $tenancy_ocid\n}\n</code></pre></p> </li> <li> <p>Create the claudie user: <pre><code>oci iam user create --name claudie-user --compartment-id $tenancy_ocid --description claudie-user --email &lt;email address&gt;\n</code></pre></p> </li> <li> <p>Create a group that will hold permissions for the user: <pre><code>oci iam group create --name claudie-group --compartment-id $tenancy_ocid --description claudie-group\n</code></pre></p> </li> <li> <p>Generate policy file with necessary permissions: <pre><code>{\ncat &gt; policy.txt &lt;&lt;EOF\n[\n  \"Allow group claudie-group to manage instance-family in compartment claudie-compartment\",\n  \"Allow group claudie-group to manage volume-family in compartment claudie-compartment\",\n  \"Allow group claudie-group to manage virtual-network-family in tenancy\",\n  \"Allow group claudie-group to manage dns-zones in compartment claudie-compartment\",\n  \"Allow group claudie-group to manage dns-records in compartment claudie-compartment\"\n]\nEOF\n}\n</code></pre></p> </li> <li> <p>Create a policy with required permissions: <pre><code>oci iam policy create --name claudie-policy --statements file://policy.txt --compartment-id $tenancy_ocid --description claudie-policy\n</code></pre></p> </li> <li> <p>Declare <code>user_ocid</code> and <code>group_ocid</code>: <pre><code>{\n  group_ocid=$(oci iam group list | jq -r '.data[] | select(.name == \"claudie-group\") | .id')\n  user_ocid=$(oci iam user list | jq -r '.data[] | select(.name == \"claudie-user\") | .id')\n}\n</code></pre></p> </li> <li> <p>Attach claudie-user to claudie-group: <pre><code>oci iam group add-user --group-id $group_ocid --user-id $user_ocid\n</code></pre></p> </li> <li> <p>Generate key pair for claudie-user and enter <code>N/A</code> for no passphrase: <pre><code>oci setup keys --key-name claudie-user --output-dir .\n</code></pre></p> </li> <li> <p>Upload the public key to use for the claudie-user: <pre><code>oci iam user api-key upload --user-id $user_ocid --key-file claudie-user_public.pem\n</code></pre></p> </li> <li> <p>Export <code>compartment_ocid</code> and <code>fingerprint</code>, to use them when creating provider secret. <pre><code>  compartment_ocid=$(oci iam compartment list | jq -r '.data[] | select(.name == \"claudie-compartment\") | .id')\n  fingerprint=$(oci iam user api-key list --user-id $user_ocid | jq -r '.data[0].fingerprint')\n</code></pre></p> </li> </ol>"},{"location":"input-manifest/providers/oci/#dns-setup","title":"DNS setup","text":"<p>If you wish to use OCI as your DNS provider where Claudie creates DNS records pointing to Claudie managed clusters, you will need to create a public DNS zone by following this guide.</p> <p>OCI is not my domain registrar</p> <p>You cannot buy a domain from Oracle at this time so you can update nameservers of your OCI hosted zone by following this guide on changing nameservers. However, if you prefer not to use the entire domain, an alternative option is to delegate a subdomain to OCI.</p>"},{"location":"input-manifest/providers/oci/#iam-policies-required-by-claudie","title":"IAM policies required by Claudie","text":"<pre><code>\"Allow group &lt;GROUP_NAME&gt; to manage instance-family in compartment &lt;COMPARTMENT_NAME&gt;\"\n\"Allow group &lt;GROUP_NAME&gt; to manage volume-family in compartment &lt;COMPARTMENT_NAME&gt;\"\n\"Allow group &lt;GROUP_NAME&gt; to manage virtual-network-family in tenancy\"\n\"Allow group &lt;GROUP_NAME&gt; to manage dns-zones in compartment &lt;COMPARTMENT_NAME&gt;\",\n\"Allow group &lt;GROUP_NAME&gt; to manage dns-records in compartment &lt;COMPARTMENT_NAME&gt;\",\n</code></pre>"},{"location":"input-manifest/providers/oci/#input-manifest-examples","title":"Input manifest examples","text":""},{"location":"input-manifest/providers/oci/#single-provider-multi-region-cluster-example","title":"Single provider, multi region cluster example","text":""},{"location":"input-manifest/providers/oci/#create-a-secret-for-oci-provider","title":"Create a secret for OCI provider","text":"<p>The secret for an OCI provider must include the following mandatory fields: <code>compartmentocid</code>, <code>userocid</code>, <code>tenancyocid</code>, <code>keyfingerprint</code> and <code>privatekey</code>.</p> <pre><code># Refer to values exported in \"Creating OCI credentials for Claudie\" section\nkubectl create secret generic oci-secret-1 --namespace=mynamespace --from-literal=compartmentocid=$compartment_ocid --from-literal=userocid=$user_ocid --from-literal=tenancyocid=$tenancy_ocid --from-literal=keyfingerprint=$fingerprint --from-file=privatekey=./claudie-user_public.pem\n</code></pre> <pre><code>apiVersion: claudie.io/v1beta1\nkind: InputManifest\nmetadata:\n  name: oci-example-manifest\n  labels:\n    app.kubernetes.io/part-of: claudie\nspec:\n  providers:\n    - name: oci-1\n      providerType: oci\n      secretRef:\n        name: oci-secret-1\n        namespace: mynamespace\n\n  nodePools:\n    dynamic:\n      - name: control-oci\n        providerSpec:\n          # Name of the provider instance.\n          name: oci-1\n          # Region of the nodepool.\n          region: eu-milan-1\n          # Availability domain of the nodepool.\n          zone: hsVQ:EU-MILAN-1-AD-1\n        count: 1\n        # VM shape name.\n        serverType: VM.Standard2.2\n        # OCID of the image ubuntu 24.04.\n        # Make sure to update it according to the region.\n        # https://docs.oracle.com/en-us/iaas/images/ubuntu-2404/canonical-ubuntu-24-04-2024-08-28-0.htm\n        image: ocid1.image.oc1.eu-milan-1.aaaaaaaa2ixn6kthb7vn6mom6bv7fts4omou5sowilrqfub2e7ouweiirkbq\n\n      - name: compute-1-oci\n        providerSpec:\n          # Name of the provider instance.\n          name: oci-1\n          # Region of the nodepool.\n          region: eu-frankfurt-1\n          # Availability domain of the nodepool.\n          zone: hsVQ:EU-FRANKFURT-1-AD-1\n        count: 2\n        # VM shape name.\n        serverType: VM.Standard2.1\n        # OCID of the image ubuntu 24.04.\n        # Make sure to update it according to the region.\n        # https://docs.oracle.com/en-us/iaas/images/ubuntu-2404/canonical-ubuntu-24-04-2024-08-28-0.htm\n        image: ocid1.image.oc1.eu-frankfurt-1.aaaaaaaa7hxwyz4qiasffo7n7s4ep5lywpzwgkc2am65frqrqinoyitmxxla\n        storageDiskSize: 50\n\n      - name: compute-2-oci\n        providerSpec:\n          # Name of the provider instance.\n          name: oci-1\n          # Region of the nodepool.\n          region: eu-frankfurt-1\n          # Availability domain of the nodepool.\n          zone: hsVQ:EU-FRANKFURT-1-AD-2\n        count: 2\n        # VM shape name.\n        serverType: VM.Standard2.1\n        # OCID of the image ubuntu 24.04.\n        # Make sure to update it according to the region.\n        # https://docs.oracle.com/en-us/iaas/images/ubuntu-2404/canonical-ubuntu-24-04-2024-08-28-0.htm\n        image: ocid1.image.oc1.eu-frankfurt-1.aaaaaaaa7hxwyz4qiasffo7n7s4ep5lywpzwgkc2am65frqrqinoyitmxxla\n        storageDiskSize: 50\n\n  kubernetes:\n    clusters:\n      - name: oci-cluster\n        version: v1.27.0\n        network: 192.168.2.0/24\n        pools:\n          control:\n            - control-oci\n          compute:\n            - compute-1-oci\n            - compute-2-oci\n</code></pre>"},{"location":"input-manifest/providers/oci/#multi-provider-multi-region-clusters-example","title":"Multi provider, multi region clusters example","text":""},{"location":"input-manifest/providers/oci/#create-a-secret-for-oci-provider_1","title":"Create a secret for OCI provider","text":"<p>The secret for an OCI provider must include the following mandatory fields: <code>compartmentocid</code>, <code>userocid</code>, <code>tenancyocid</code>, <code>keyfingerprint</code> and <code>privatekey</code>.</p> <pre><code># Refer to values exported in \"Creating OCI credentials for Claudie\" section\nkubectl create secret generic oci-secret-1 --namespace=mynamespace --from-literal=compartmentocid=$compartment_ocid --from-literal=userocid=$user_ocid --from-literal=tenancyocid=$tenancy_ocid --from-literal=keyfingerprint=$fingerprint --from-file=privatekey=./claudie-user_public.pem\n\nkubectl create secret generic oci-secret-2 --namespace=mynamespace --from-literal=compartmentocid=$compartment_ocid2 --from-literal=userocid=$user_ocid2 --from-literal=tenancyocid=$tenancy_ocid2 --from-literal=keyfingerprint=$fingerprint2 --from-file=privatekey=./claudie-user_public2.pem\n</code></pre> <pre><code>apiVersion: claudie.io/v1beta1\nkind: InputManifest\nmetadata:\n  name: oci-example-manifest\n  labels:\n    app.kubernetes.io/part-of: claudie\nspec:\n  providers:\n    - name: oci-1\n      providerType: oci\n      secretRef:\n        name: oci-secret-1\n        namespace: mynamespace\n    - name: oci-2\n      providerType: oci\n      secretRef:\n        name: oci-secret-2\n        namespace: mynamespace\n\n  nodePools:\n    dynamic:\n      - name: control-oci-1\n        providerSpec:\n          # Name of the provider instance.\n          name: oci-1\n          # Region of the nodepool.\n          region: eu-milan-1\n          # Availability domain of the nodepool.\n          zone: hsVQ:EU-MILAN-1-AD-1\n        count: 1\n        # VM shape name.\n        serverType: VM.Standard2.2\n        # OCID of the image ubuntu 24.04.\n        # Make sure to update it according to the region.\n        # https://docs.oracle.com/en-us/iaas/images/ubuntu-2404/canonical-ubuntu-24-04-2024-08-28-0.htm\n        image: ocid1.image.oc1.eu-milan-1.aaaaaaaa2ixn6kthb7vn6mom6bv7fts4omou5sowilrqfub2e7ouweiirkbq\n\n      - name: control-oci-2\n        providerSpec:\n          # Name of the provider instance.\n          name: oci-2\n          # Region of the nodepool.\n          region: eu-frankfurt-1\n          # Availability domain of the nodepool.\n          zone: hsVQ:EU-FRANKFURT-1-AD-3\n        count: 2\n        # VM shape name.\n        serverType: VM.Standard2.1\n        # OCID of the image ubuntu 24.04.\n        # Make sure to update it according to the region.\n        # https://docs.oracle.com/en-us/iaas/images/ubuntu-2404/canonical-ubuntu-24-04-2024-08-28-0.htm\n        image: ocid1.image.oc1.eu-frankfurt-1.aaaaaaaa7hxwyz4qiasffo7n7s4ep5lywpzwgkc2am65frqrqinoyitmxxla\n\n      - name: compute-oci-1\n        providerSpec:\n          # Name of the provider instance.\n          name: oci-1\n          # Region of the nodepool.\n          region: eu-frankfurt-1\n          # Availability domain of the nodepool.\n          zone: hsVQ:EU-FRANKFURT-1-AD-1\n        count: 2\n        # VM shape name.\n        serverType: VM.Standard2.1\n        # OCID of the image ubuntu 24.04.\n        # Make sure to update it according to the region.\n        # https://docs.oracle.com/en-us/iaas/images/ubuntu-2404/canonical-ubuntu-24-04-2024-08-28-0.htm\n        image: ocid1.image.oc1.eu-frankfurt-1.aaaaaaaa7hxwyz4qiasffo7n7s4ep5lywpzwgkc2am65frqrqinoyitmxxla\n        storageDiskSize: 50\n\n      - name: compute-oci-2\n        providerSpec:\n          # Name of the provider instance.\n          name: oci-2\n          # Region of the nodepool.\n          region: eu-milan-1\n          # Availability domain of the nodepool.\n          zone: hsVQ:EU-MILAN-1-AD-1\n        count: 2\n        # VM shape name.\n        serverType: VM.Standard2.1\n        # OCID of the image ubuntu 24.04.\n        # Make sure to update it according to the region.\n        # https://docs.oracle.com/en-us/iaas/images/ubuntu-2404/canonical-ubuntu-24-04-2024-08-28-0.htm\n        image: ocid1.image.oc1.eu-milan-1.aaaaaaaa2ixn6kthb7vn6mom6bv7fts4omou5sowilrqfub2e7ouweiirkbq\n        storageDiskSize: 50\n\n  kubernetes:\n    clusters:\n      - name: oci-cluster\n        version: v1.27.0\n        network: 192.168.2.0/24\n        pools:\n          control:\n            - control-oci-1\n            - control-oci-2\n          compute:\n            - compute-oci-1\n            - compute-oci-2\n</code></pre>"},{"location":"input-manifest/providers/oci/#flex-instances-example","title":"Flex instances example","text":""},{"location":"input-manifest/providers/oci/#create-a-secret-for-oci-provider_2","title":"Create a secret for OCI provider","text":"<p>The secret for an OCI provider must include the following mandatory fields: <code>compartmentocid</code>, <code>userocid</code>, <code>tenancyocid</code>, <code>keyfingerprint</code> and <code>privatekey</code>.</p> <pre><code># Refer to values exported in \"Creating OCI credentials for Claudie\" section\nkubectl create secret generic oci-secret-1 --namespace=mynamespace --from-literal=compartmentocid=$compartment_ocid --from-literal=userocid=$user_ocid --from-literal=tenancyocid=$tenancy_ocid --from-literal=keyfingerprint=$fingerprint --from-file=privatekey=./claudie-user_public.pem\n</code></pre> <pre><code>apiVersion: claudie.io/v1beta1\nkind: InputManifest\nmetadata:\n  name: oci-example-manifest\n  labels:\n    app.kubernetes.io/part-of: claudie\nspec:\n  providers:\n    - name: oci-1\n      providerType: oci\n      secretRef:\n        name: oci-secret-1\n        namespace: mynamespace\n\n  nodePools:\n    dynamic:\n      - name: oci\n        providerSpec:\n          # Name of the provider instance.\n          name: oci-1\n          # Region of the nodepool.\n          region: eu-frankfurt-1\n          # Availability domain of the nodepool.\n          zone: hsVQ:EU-FRANKFURT-1-AD-1\n        count: 2\n        # VM shape name.\n        serverType: VM.Standard.E4.Flex\n        # further describes the selected server type.\n        machineSpec:\n          # use 2 ocpus.\n          cpuCount: 2\n          # use 8 gb of memory.\n          memory: 8\n        # OCID of the image ubuntu 24.04.\n        # Make sure to update it according to the region.\n        # https://docs.oracle.com/en-us/iaas/images/ubuntu-2404/canonical-ubuntu-24-04-2024-08-28-0.htm\n        image: ocid1.image.oc1.eu-frankfurt-1.aaaaaaaa7hxwyz4qiasffo7n7s4ep5lywpzwgkc2am65frqrqinoyitmxxla\n        storageDiskSize: 50\n\n  kubernetes:\n    clusters:\n      - name: oci-cluster\n        version: v1.27.0\n        network: 192.168.2.0/24\n        pools:\n          control:\n            - oci\n          compute:\n            - oci\n</code></pre>"},{"location":"input-manifest/providers/on-prem/","title":"On premise nodes","text":"<p>Claudie is designed to leverage your existing infrastructure and utilise it for building Kubernetes clusters together with supported cloud providers. However, Claudie operates under a few assumptions:</p> <ol> <li> <p>Accessibility of Machines: Claudie requires access to the machines specified by the provided endpoint. It needs the ability to connect to these machines in order to perform necessary operations.</p> </li> <li> <p>Connectivity between Static Nodes: Static nodes within the infrastructure should be able to communicate with each other using the specified endpoints. This connectivity is important for proper functioning of the Kubernetes cluster.</p> </li> <li> <p>SSH Access with Root Privileges: Claudie relies on SSH access to the nodes using the SSH key provided in the input manifest. The SSH key should grant root privileges to enable Claudie to perform required operations on the nodes.</p> </li> <li> <p>Meeting the Kubernetes nodes requirements: Learn more.</p> </li> </ol> <p>By ensuring that these assumptions are met, Claudie can effectively utilise your infrastructure and build Kubernetes clusters while collaborating with the supported cloud providers.</p>"},{"location":"input-manifest/providers/on-prem/#private-key-example-secret","title":"Private key example secret","text":"<pre><code>apiVersion: v1\nkind: Secret\nmetadata:\n  name: static-node-key\ndata:\n  privatekey: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBbzJEOGNYb0Uxb3VDblBYcXFpVW5qbHh0c1A4YXlKQW4zeFhYdmxLOTMwcDZBUzZMCncvVW03THFnbUhpOW9GL3pWVnB0TDhZNmE2NWUvWjk0dE9SQ0lHY0VJendpQXF3M3M4NGVNcnoyQXlrSWhsWE0KVEpSS3J3SHJrbDRtVlBvdE9paDFtZkVTenFMZ25TMWdmQWZxSUVNVFdOZlRkQmhtUXpBNVJFT2NpQ1Q1dFRnMApraDI1SmVHeU9qR3pzaFhkKzdaVi9PUXVQUk5Mb2lrQzFDVFdtM0FSVFFDeUpZaXR5bURVeEgwa09wa2VyODVoCmpFRTRkUnUxVzQ2WDZkdEUrSlBZNkNKRlR2c1VUcGlqT3QzQmNTSTYyY2ZyYmFRYXhvQXk2bEJLVlB1cm1xYm0Kb09JNHVRUWJWRGt5Q3V4MzcwSTFjTUVzWkszYVNBa0ZZSUlMRndJREFRQUJBb0lCQUVLUzFhc2p6bTdpSUZIMwpQeTBmd0xPWTVEVzRiZUNHSlVrWkxIVm9YK2hwLzdjVmtXeERMQjVRbWZvblVSWFZvMkVIWFBDWHROeUdERDBLCnkzUGlnek9TNXJPNDRCNzRzQ1g3ZW9Dd1VRck9vS09rdUlBSCtUckE3STRUQVVtbE8rS3o4OS9MeFI4Z2JhaCsKZ2c5b1pqWEpQMHYzZmptVGE3QTdLVXF3eGtzUEpORFhyN0J2MkhGc3ZueHROTkhWV3JBcjA3NUpSU2U3akJIRgpyQnpIRGFOUUhjYWwybTJWbDAvbGM4SVgyOEIwSXBYOEM5ajNqVGUwRS9XOVYyaURvM0ZvbmZzVU1BSm9KeW1nCkRzRXFxb25Cc0ZFeE9iY1BUNlh4SHRLVHVXMkRDRHF3c20xTVM2L0xUZzRtMFZ0alBRbGE5cnd0Z1lQcEtVSWYKbkRya3ZBRUNnWUVBOC9EUTRtNWF4UE0xL2d4UmVFNVZJSEMzRjVNK0s0S0dsdUNTVUNHcmtlNnpyVmhOZXllMwplbWpUV21lUmQ4L0szYzVxeGhJeGkvWE8vc0ZvREthSjdHaVl4L2RiOEl6dlJZYkw2ZHJiOVh0aHVObmhJWTlkCmJPd0VhbWxXZGxZbzlhUTBoYTFpSHpoUHVhMjN0TUNiM2xpZzE3MVZuUURhTXlhS3plaVMxUmNDZ1lFQXEzU2YKVEozcDRucmh4VjJiMEJKUStEdjkrRHNiZFBCY0pPbHpYVVVodHB6d3JyT3VKdzRUUXFXeG1pZTlhK1lpSzd0cAplY2YyOEltdHY0dy9aazg1TUdmQm9hTkpwdUNmNWxoMElseDB3ZXROQXlmb3dTNHZ3dUlZNG1zVFlvcE1WV20yClV5QzlqQ1M4Q0Y2Y1FrUVdjaVVlc2dVWHFocE50bXNLTG9LWU9nRUNnWUVBNWVwZVpsd09qenlQOGY4WU5tVFcKRlBwSGh4L1BZK0RsQzRWa1FjUktXZ1A2TTNKYnJLelZZTGsySXlva1VDRjRHakI0TUhGclkzZnRmZTA2TFZvMQorcXptK3Vub0xNUVlySllNMFQvbk91cnNRdmFRR3pwdG1zQ2t0TXJOcEVFMjM3YkJqaERKdjVVcWgxMzFISmJCCkVnTEVyaklVWkNNdWhURlplQk14ZVVjQ2dZRUFqZkZPc0M5TG9hUDVwVnVKMHdoVzRDdEtabWNJcEJjWk1iWFQKUERRdlpPOG9rbmxPaENheTYwb2hibTNYODZ2aVBqSTVjQWlMOXpjRUVNQWEvS2c1d0VrbGxKdUtMZzFvVTFxSApTcXNnUGlwKzUwM3k4M3M1THkzZlRCTTVTU3NWWnVETmdLUnFSOHRobjh3enNPaU5iSkl1aDFLUDlOTXg0d05hCnVvYURZQUVDZ1lFQW5xNzJJUEU1MlFwekpjSDU5RmRpbS8zOU1KYU1HZlhZZkJBNXJoenZnMmc5TW9URXpWKysKSVZ2SDFTSjdNTTB1SVBCa1FpbC91V083bU9DR2hHVHV3TGt3Uy9JU1FjTmRhSHlTRDNiZzdndzc5aG1UTVhiMgozVFpCTjdtb3FWM0VhRUhWVU1nT1N3dHUySTlQN1RJNGJJV0RQUWxuWE53Q0tCWWNKanRraWNRPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=\ntype: Opaque\n</code></pre>"},{"location":"input-manifest/providers/on-prem/#input-manifest-example","title":"Input manifest example","text":""},{"location":"input-manifest/providers/on-prem/#private-cluster-example","title":"Private cluster example","text":"<pre><code>kubectl create secret generic static-node-key --namespace=mynamespace --from-file=privatekey=private.pem\n</code></pre> <pre><code>apiVersion: claudie.io/v1beta1\nkind: InputManifest\nmetadata:\n  name: private-cluster-example\n  labels:\n    app.kubernetes.io/part-of: claudie\nspec:\n  nodePools:\n    static:\n        - name: control\n          nodes:\n            - endpoint: \"192.168.10.1\"\n              secretRef:\n                name: static-node-key\n                namespace: mynamespace\n\n        - name: compute\n          nodes:\n            - endpoint: \"192.168.10.2\"\n              secretRef:\n                name: static-node-key\n                namespace: mynamespace\n            - endpoint: \"192.168.10.3\"\n              secretRef:\n                name: static-node-key\n                namespace: mynamespace\n\n  kubernetes:\n    clusters:\n      - name: private-cluster\n        version: 1.27.0\n        network: 192.168.2.0/24\n        pools:\n          control:\n            - control\n          compute:\n            - compute\n</code></pre>"},{"location":"input-manifest/providers/on-prem/#hybrid-cloud-example","title":"Hybrid cloud example","text":""},{"location":"input-manifest/providers/on-prem/#create-secret-for-private-key","title":"Create secret for private key","text":"<pre><code>kubectl create secret generic static-node-key --namespace=mynamespace --from-file=privatekey=private.pem\n</code></pre> <p>To see how to configure Hetzner or any other credentials for hybrid cloud, refer to their docs.</p> <pre><code>apiVersion: claudie.io/v1beta1\nkind: InputManifest\nmetadata:\n  name: hybrid-cloud-example\n  labels:\n    app.kubernetes.io/part-of: claudie\nspec:\n  providers:\n    - name: hetzner-1\n      providerType: hetzner\n      secretRef:\n        name: hetzner-secret-1\n        namespace: mynamespace\n\n  nodePools:\n    dynamic:\n      - name: control-htz\n        providerSpec:\n          name: hetzner-1\n          region: fsn1\n          zone: fsn1-dc14\n        count: 3\n        serverType: cpx11\n        image: ubuntu-24.04\n\n    static:\n        - name: datacenter-1\n          nodes:\n            - endpoint: \"192.168.10.1\"\n              secretRef:\n                name: static-node-key\n                namespace: mynamespace\n            - endpoint: \"192.168.10.2\"\n              secretRef:\n                name: static-node-key\n                namespace: mynamespace\n            - endpoint: \"192.168.10.3\"\n              secretRef:\n                name: static-node-key\n                namespace: mynamespace\n\n  kubernetes:\n    clusters:\n      - name: hybrid-cluster\n        version: 1.27.0\n        network: 192.168.2.0/24\n        pools:\n          control:\n            - control-hetzner\n          compute:\n            - datacenter-1\n</code></pre>"},{"location":"latency-limitations/latency-limitations/","title":"Latency-imposed limitations","text":"<p>The general rule of thumb is that every 100 km of distance adds roughly ~1ms of latency. Therefore in the following subsections, we describe what problems might and will most probably arise when working with high latency using etcd and Longhorn.</p>"},{"location":"latency-limitations/latency-limitations/#etcd-limitations","title":"etcd limitations","text":"<p>A distance between etcd nodes in the multi-cloud environment of more than 600 km can be detrimental to cluster health. In a scenario like this, an average deployment time can double compared to a scenario with etcd nodes in different availability zones within the same cloud provider. Besides this, the total number of the etcd Slow Applies increases rapidly, and a Round-trip time varies from ~0.05s to ~0.2s, whereas in a single-cloud scenario with etcd nodes in a different AZs the range is from ~0.003s to ~0.025s. </p> <p>In multi-cloud clusters, a request to a KubeAPI lasts generally from ~0.025s to ~0.25s. On the other hand, in a one-cloud scenario, they last from ~0.005s to ~0.025s.</p> <p>You can read more about this topic here, and for distances above 600 km, we recommend customizing further the etcd deployment (see).</p>"},{"location":"latency-limitations/latency-limitations/#longhorn-limitations","title":"Longhorn limitations","text":"<p>There are basically these three problems when dealing with a high latency in Longhorn:</p> <ul> <li>Kubelet fails to mount the RWO or RWX volume to a workload pod in case the latency between the node hosting the pod and the nodes with the replicas is greater than ~100ms.</li> <li>Some replicas of a volume might not catch up if the latency between nodes that host replicas is greater than ~100ms.</li> <li>In case of RWX volumes, Longhorn spawns a <code>share-manager</code> pod that hosts the NFS server to facilitate the data export to the workload pods. If the latency between the node with a <code>share-manager</code> pod and the node with a workload pod is greater than ~100ms, kubelet fails to mount the volume to the workload pod.</li> </ul> <p>Generally, a single volume with 3 replicas can tolerate a maximum network latency of around 100ms. In the case of a multiple-volume scenario, the maximum network latency can be no more than 20ms. The network latency has a significant impact on IO performance and total network bandwidth. See more about CPU and network requirements here</p>"},{"location":"latency-limitations/latency-limitations/#how-to-avoid-high-latency-problems","title":"How to avoid high latency problems","text":"<p>When dealing with RWO volumes you can avoid mount failures caused by high latency by setting Longhorn to only use storage on specific nodes (follow this tutorial) and using nodeAffinity or nodeSelector to schedule your workload pods only to the nodes that have replicas of the volumes or are close to them.</p>"},{"location":"latency-limitations/latency-limitations/#how-to-mitigate-high-latency-problems-with-rwx-volumes","title":"How to mitigate high latency problems with RWX volumes","text":"<p>To mitigate high latency issues with RWX volumes you can maximize these Longhorn settings:</p> <ul> <li>Engine Replica Timeout - max 30s</li> <li>Replica File Sync HTTP Timeout - max 120s</li> <li>Guaranteed Instance Manager CPU - max 40%</li> </ul> <p>Thanks to maximizing these settings you should successfully mount a RWX volume for which a latency between a node with a <code>share-manager</code> pod and a node with a workload pod + replica is ~200ms. However, it will take from 7 to 10 minutes. Also, there are some resource requirements on the nodes and limitations on the maximum size of the RWX volumes. For example, you will not succeed in mounting even a 1Gi RWX volume for which a latency between a node with a <code>share-manager</code> pod and a node with a workload pod + replica is ~200ms, if the nodes have only 2 shared vCPUs and 4GB RAM. This applies even when there are no other workloads in the cluster. Your nodes need at least 2vCPU and 8GB RAM. Generally, the more CPU you assign to the Longhorn manager the more you can mitigate the issue with high latency and RWX volumes.</p> <p>Keep in mind, that using machines with higher resources and maximizing these Longhorn settings doesn't necessarily guarantee successful mount of the RWX volumes. It also depends on the size of these volumes. For example, even after maximizing these settings and using nodes with 2vCPU and 8GB RAM with ~200ms latency between them, you will fail to mount a 10Gi volume to the workload pod in case you try to mount multiple volumes at once. In case you do it one by one, you should be good. </p> <p>To conclude, maximizing these Longhorn settings can help to mitigate the high latency issue when mounting RWX volumes, but it is resource-hungry and it also depends on the size of the RWX volume + the total number of the RWX volumes that are attaching at once.</p>"},{"location":"loadbalancing/loadbalancing-solution/","title":"Claudie load balancing solution","text":""},{"location":"loadbalancing/loadbalancing-solution/#loadbalancer","title":"Loadbalancer","text":"<p>To create a highly available kubernetes cluster, Claudie creates load balancers for the <code>kubeAPI</code> server. These load balancers use Nginx to load balance the traffic among the cluster nodes. Claudie also supports definition of custom load balancers for the applications running inside the cluster.</p>"},{"location":"loadbalancing/loadbalancing-solution/#concept","title":"Concept","text":"<ul> <li> <p>The load balancer machines will join the Wireguard private network of Claudie clusters relevant to it.</p> <ul> <li>This is necessary so that the LB machines can send traffic to the cluster machines over the <code>wireguard VPN</code>.</li> </ul> </li> <li> <p>DNS A records will be created and managed by Claudie on 1 or more cloud providers.</p> <ul> <li>There will be a DNS A record for the public IP of each LB machine that is currently passing the health checks.</li> </ul> </li> <li> <p>The LB machines will run an <code>Nginx</code> to carry out the actual load balancing.</p> <ul> <li>There will be a DNS A record for the public IP of each LB machine that is currently passing the health checks.</li> <li>Therefore, there will be actually 2 layers of load balancing.<ol> <li>DNS-based load balancing to determine the LB machine to be used.</li> <li>Software load balancing on the chosen LB machine.</li> </ol> </li> </ul> </li> <li> <p>Claudie will dynamically manage the LB configuration, e.g. if some cluster node is removed, the LB configuration changes or DNS configuration changes (hostname change).</p> </li> <li> <p>The load balancing will be on L4 layer, TCP/UDP, partially configurable by the Claudie input manifest.</p> </li> </ul>"},{"location":"loadbalancing/loadbalancing-solution/#example-diagram","title":"Example diagram","text":""},{"location":"loadbalancing/loadbalancing-solution/#definitions","title":"Definitions","text":""},{"location":"loadbalancing/loadbalancing-solution/#role","title":"Role","text":"<p>Claudie uses the concept of roles while configuring the load balancers from the input manifest. Each role represents a loadbalancer configuration for a particular use. Roles are then assigned to the load balancer cluster. A single load balancer cluster can have multiple roles assigned.</p>"},{"location":"loadbalancing/loadbalancing-solution/#targeted-kubernetes-cluster","title":"Targeted kubernetes cluster","text":"<p>Load balancer gets assigned to a kubernetes cluster with the field <code>targetedK8s</code>. This field is using the <code>name</code> of the kubernetes cluster as a value. Currently, a single load balancer can only be assigned to a single kubernetes cluster.</p> <p>Among multiple load balancers targeting the same kubernetes cluster only one of them can have the API server role (i.e. the role with target port 6443) attached to it.</p>"},{"location":"loadbalancing/loadbalancing-solution/#dns","title":"DNS","text":"<p>Claudie creates and manages the DNS for the load balancer. If the user adds a load balancer into their infrastructure via Claudie, Claudie creates a DNS A record with the public IP of the load balancer machines behind it. When the load balancer configuration changes in any way, that is a node is added/removed, the hostname or the target changes, the DNS record is reconfigured by Claudie on the fly. This rids the user of the need to manage DNS.</p>"},{"location":"loadbalancing/loadbalancing-solution/#nodepools","title":"Nodepools","text":"<p>Loadbalancers are build from user defined nodepools in <code>pools</code> field, similar to how kubernetes clusters are defined. These nodepools allow the user to change/scale the load balancers according to their needs without any fuss. See the nodepool definition for more information.</p>"},{"location":"loadbalancing/loadbalancing-solution/#an-example-of-load-balancer-definition","title":"An example of load balancer definition","text":"<p>See an example load balancer definition in our reference example input manifest.</p>"},{"location":"loadbalancing/loadbalancing-solution/#notes","title":"Notes","text":""},{"location":"loadbalancing/loadbalancing-solution/#cluster-ingress-controller","title":"Cluster ingress controller","text":"<p>You still need to deploy your own ingress controller to use the load balancer. It needs to be set up to use <code>nodeport</code> with the ports configured under <code>roles</code> in the load balancer definition.</p>"},{"location":"monitoring/grafana/","title":"Prometheus Monitoring","text":"<p>In our environment, we rely on Claudie to export Prometheus metrics, providing valuable insights into the state of our infrastructure and applications. To utilize Claudie's monitoring capabilities, it's essential to have Prometheus installed. With this setup, you can gain visibility into various metrics such as:</p> <ul> <li>Number of managed K8s clusters created by Claudie</li> <li>Number of managed LoadBalancer clusters created by Claudie</li> <li>Currently added/deleted nodes to/from K8s/LB cluster</li> <li>Information about gRPC requests</li> <li>and much more</li> </ul> <p>You can find Claudie dashboard here.</p>"},{"location":"monitoring/grafana/#configure-scraping-metrics","title":"Configure scraping metrics","text":"<p>We recommend using the Prometheus Operator for managing Prometheus deployments efficiently.</p> <ol> <li> <p>Create <code>RBAC</code> that allows Prometheus to scrape metrics from Claudie\u2019s pods: <pre><code>apiVersion: rbac.authorization.k8s.io/v1\nkind: Role\nmetadata:\n  name: claudie-pod-reader\n  namespace: claudie\nrules:\n- apiGroups: [\"\"]\n  resources: [\"pods\"]\n  verbs: [\"get\", \"list\"]\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  name: claudie-pod-reader-binding\n  namespace: claudie\nsubjects:\n# this SA is created by https://github.com/prometheus-operator/kube-prometheus\n# in your case you might need to bind this Role to a different SA\n- kind: ServiceAccount\n  name: prometheus-k8s\n  namespace: monitoring\nroleRef:\n  kind: Role\n  name: claudie-pod-reader\n  apiGroup: rbac.authorization.k8s.io\n</code></pre></p> </li> <li> <p>Create Prometheus PodMonitor to scrape metrics from Claudie\u2019s pods <pre><code>apiVersion: monitoring.coreos.com/v1\nkind: PodMonitor\nmetadata:\n  name: claudie-metrics\n  namespace: monitoring\n  labels:\n    name: claudie-metrics\nspec:\n  namespaceSelector:\n    matchNames:\n      - claudie\n  selector:\n    matchLabels:\n      app.kubernetes.io/part-of: claudie\n  podMetricsEndpoints:\n  - port: metrics\n</code></pre></p> </li> <li>Import our dashboard into your Grafana instance:<ul> <li>Navigate to the Grafana UI.</li> <li>Go to the Dashboards section.</li> <li>Click on \"Import\" and provide the dashboard ID or upload the JSON file.</li> <li>Configure the data source to point to your Prometheus instance.</li> <li>Save the dashboard, and you're ready to visualize Claudie's metrics in Grafana.</li> </ul> </li> </ol> <p>That's it! Now you have set up RBAC for Prometheus, configured a PodMonitor to scrape metrics from Claudie's pods, and imported a Grafana dashboard to visualize the metrics.</p>"},{"location":"roadmap/roadmap/","title":"Roadmap for Claudie","text":"<ul> <li> CLI read-only interface</li> <li> Allow different Terraform template versions for a single provider</li> <li> Override for all Terraform templates</li> <li> Override for all manifest defaults</li> <li> Service type: loadbalancer</li> <li> Support for Spot &amp; preemtible instances</li> <li> Roadwarrior/Edge mode (on-prem node behind a NAT)</li> </ul> <p>v0.8.1: - [x] Support for more cloud providers     - [x] OCI     - [x] AWS     - [x] Azure     - [x] Cloudflare     - [x] GenesisCloud - [x] Hybrid-cloud support (on-premises) - [x] <code>arm64</code> support for the nodepools - [x] App-level metrics - [x] Autoscaler</p>"},{"location":"sitemap/sitemap/","title":"Sitemap","text":"<p>This section contains a brief descriptions about main parts of the Claudie's documentation.</p>"},{"location":"sitemap/sitemap/#getting-started","title":"Getting Started","text":"<p>The \"Getting Started\" section is where you'll learn how to begin using Claudie. We'll guide you through the initial steps and show you how to set things up, so you can start using the software right away. </p> <p>You'll also find helpful information on how to customize Claudie to suit your needs, including specifications for the settings you can adjust, and examples of how to use configuration files to get started.</p> <p>By following the steps in this section, you'll have everything you need to start using Claudie with confidence!</p>"},{"location":"sitemap/sitemap/#input-manifest","title":"Input manifest","text":"<p>This section contains examples of YAML files of the InputManifest CRD that tell Claudie what should an infrastructure look like. Besides these files, you can also find an API reference for the InputManifest CRD there.</p>"},{"location":"sitemap/sitemap/#how-claudie-works","title":"How Claudie works","text":"<p>In this section, we'll show you how Claudie works and guide you through our workflow. We'll explain how we store and manage data, balance the workload across different parts of the system, and automatically adjust resources to handle changes in demand.</p> <p>By following our explanations, you'll gain a better understanding of how Claudie operates and be better equipped to use it effectively.</p>"},{"location":"sitemap/sitemap/#claudie-use-cases","title":"Claudie Use Cases","text":"<p>The \"Claudie Use Cases\" section includes examples of different ways you can use Claudie to solve various problems. We've included these examples to help you understand the full range of capabilities Claudie offers and to show you how it can be applied in different scenarios. </p> <p>By exploring these use cases, you'll get a better sense of how Claudie can be a valuable tool for your work.</p>"},{"location":"sitemap/sitemap/#faq","title":"FAQ","text":"<p>You may find helpful answers in our FAQ section.</p>"},{"location":"sitemap/sitemap/#roadmap-for-claudie","title":"Roadmap for Claudie","text":"<p>In this section, you'll find a roadmap for Claudie that outlines the features we've already added and those we plan to add in the future.</p> <p>By checking out the roadmap, you'll be able to stay informed about the latest updates and see how Claudie is evolving to meet the needs of its users.</p>"},{"location":"sitemap/sitemap/#contributing","title":"Contributing","text":"<p>In this section, we've gathered all the information you'll need if you want to help contribute to the Claudie project or release a new version of the software. </p> <p>By checking out this section, you'll get a better sense of what's involved in contributing and how you can be part of making Claudie even better.</p>"},{"location":"sitemap/sitemap/#changelog","title":"Changelog","text":"<p>The \"changelog\" section is where you can find information about all the changes, updates, and issues related to each version of Claudie. </p>"},{"location":"sitemap/sitemap/#latency-limitations","title":"Latency limitations","text":"<p>In this section, we describe a latency limitations, which you should take into an account, when desiging your infrastructure.</p>"},{"location":"sitemap/sitemap/#troubleshooting","title":"Troubleshooting","text":"<p>In case you run into issues, we recommend following some of the trobleshooting guides in this section.</p>"},{"location":"sitemap/sitemap/#creating-claudie-backup","title":"Creating Claudie Backup","text":"<p>This section describes steps to back up claudie and its dependencies.</p>"},{"location":"sitemap/sitemap/#claudie-hardening","title":"Claudie Hardening","text":"<p>This section describes how to further configure the default claudie deployment. It is highly recommended that you read this section.</p>"},{"location":"sitemap/sitemap/#prometheus-monitoring","title":"Prometheus Monitoring","text":"<p>In this section we walk you through the setup of Claudie's Prometheus metrics to gain visibility into various metrics that Claudie exposes.</p>"},{"location":"sitemap/sitemap/#updating-claudie","title":"Updating Claudie","text":"<p>This section describes how to execute updates, such as OS or kubernetes version, in Claudie.</p>"},{"location":"sitemap/sitemap/#deploying-node-local-dns","title":"Deploying Node-Local-DNS","text":"<p>Claudie doesn't deploy Node-Local-DNS in the default mode, thus you have to install it independently. This section provides a step-by-step guide on how to do it.</p>"},{"location":"sitemap/sitemap/#command-cheat-sheet","title":"Command Cheat Sheet","text":"<p>The \"Command Cheat Sheet\" section contains a useful <code>kubectl</code> commands to interact with Claudie.</p>"},{"location":"sitemap/sitemap/#version-matrix","title":"Version matrix","text":"<p>In this section, you can find supported Kubernetes and OS versions for the latest Claudie versions.</p>"},{"location":"storage/storage-solution/","title":"Claudie storage solution","text":""},{"location":"storage/storage-solution/#concept","title":"Concept","text":"<p>Running stateful workloads is a complex task, even more so when considering the multi-cloud environment. Claudie therefore needs to be able to accommodate stateful workloads, regardless of the underlying infrastructure providers.</p> <p>Claudie orchestrates storage on the kubernetes cluster nodes by creating one \"storage cluster\" across multiple providers. This \"storage cluster\" has a series of <code>zones</code>, one for each cloud provider instance. Each <code>zone</code> then stores its own persistent volume data.</p> <p>This concept is translated into longhorn implementation, where each <code>zone</code> is represented by a Storage Class which is backed up by the nodes defined under the same cloud provider instance. Furthermore, each node uses separate disk to the one, where OS is installed, to assure clear data separation. The size of the storage disk can be configured in <code>storageDiskSize</code> field of the nodepool specification.</p>"},{"location":"storage/storage-solution/#longhorn","title":"Longhorn","text":"<p>A Claudie-created cluster comes with the <code>longhorn</code> deployment preinstalled and ready to be used. By default, only worker nodes are used to store data.</p> <p>Longhorn installed in the cluster is set up in a way that it provides one default <code>StorageClass</code> called <code>longhorn</code>, which, if used, creates a volume that is then replicated across random nodes in the cluster.</p> <p>Besides the default storage class, Claudie can also create custom storage classes, which force persistent volumes to be created on specific nodes based on the provider instance they have. In other words, you can use a specific provider instance to provision nodes for your storage needs, while using another provider instance for computing tasks.</p>"},{"location":"storage/storage-solution/#example","title":"Example","text":"<p>To follow along, have a look at the example of <code>InputManifest</code> below.</p> storage-classes-example.yaml<pre><code>apiVersion: claudie.io/v1beta1\nkind: InputManifest\nmetadata:\n  name: storageclass-example-manifest\n  labels:\n    app.kubernetes.io/part-of: claudie\nspec:\n\n  providers:\n    - name: storage-provider\n      providerType: hetzner\n      secretRef:\n        name: storage-provider-secrets\n        namespace: claudie-secrets\n\n    - name: compute-provider\n      providerType: hetzner\n      secretRef:\n        name: storage-provider-secrets\n        namespace: claudie-secrets\n\n    - name: dns-provider\n      providerType: cloudflare\n      secretRef:\n        name: dns-provider-secret\n        namespace: claudie-secrets\n\n  nodePools:\n    dynamic:\n        - name: control\n          providerSpec:\n            name: compute-provider\n            region: hel1\n            zone: hel1-dc2\n          count: 3\n          serverType: cpx21\n          image: ubuntu-22.04\n\n        - name: datastore\n          providerSpec:\n            name: storage-provider\n            region: hel1\n            zone: hel1-dc2\n          count: 5\n          serverType: cpx21\n          image: ubuntu-22.04\n          storageDiskSize: 800\n          taints:\n            - key: node-type\n              value: datastore\n              effect: NoSchedule\n\n        - name: compute\n          providerSpec:\n            name: compute-provider\n            region: hel1\n            zone: hel1-dc2\n          count: 10\n          serverType: cpx41\n          image: ubuntu-22.04\n          taints:\n            - key: node-type\n              value: compute\n              effect: NoSchedule\n\n        - name: loadbalancer\n          providerSpec:\n            name: compute-provider\n            region: hel1\n            zone: hel1-dc2\n          count: 1\n          serverType: cpx21\n          image: ubuntu-22.04\n\n  kubernetes:\n    clusters:\n      - name: my-awesome-claudie-cluster\n        version: 1.27.0\n        network: 192.168.2.0/24\n        pools:\n          control:\n            - control\n          compute:\n            - datastore\n            - compute\n\n  loadBalancers:\n    roles:\n      - name: apiserver\n        protocol: tcp\n        port: 6443\n        targetPort: 6443\n        targetPools: \n          - control\n\n    clusters:\n      - name: apiserver-lb\n        roles:\n          - apiserver\n        dns:\n          dnsZone: dns-zone\n          provider: dns-provider\n        targetedK8s: my-awesome-claudie-cluster\n        pools:\n          - loadbalancer\n</code></pre> <p>When Claudie applies this input manifest, the following storage classes are installed:</p> <ul> <li><code>longhorn</code> - the default storage class, which stores data on random nodes</li> <li><code>longhorn-storage-provider-zone</code> - storage class, which stores data only on nodes of the <code>storage-provider</code> provider instance.</li> <li><code>longhorn-compute-provider-zone</code> - storage class, which stores data only on nodes of the <code>compute-provider</code> provider instance.</li> </ul> <p>Now all you have to do is specify correct storage class when defining your PVCs.</p> <p>In case you are interested in using different cloud provider for <code>datastore-nodepool</code> or <code>compute-nodepool</code> of this <code>InputManifest</code> example, see the list of supported providers instance</p> <p>For more information on how Longhorn works you can check out Longhorn's official documentation.</p>"},{"location":"troubleshooting/troubleshooting/","title":"Troubleshooting guide","text":"<p>In progress</p> <p>As we continue expanding our troubleshooting guide, we understand that issues may arise during your usage of Claudie. Although the guide is not yet complete, we encourage you to create a GitHub issue if you encounter any problems. Your feedback and reports are highly valuable to us in improving our platform and addressing any issues you may face.</p>"},{"location":"troubleshooting/troubleshooting/#claudie-cluster-not-starting","title":"Claudie cluster not starting","text":"<p>Claudie relies on all services to be interconnected. If any of these services fail to create due to node unavailability or resource constraints, Claudie will be unable to provision your cluster.</p> <ol> <li> <p>Check if all Claudie services are running:</p> <pre><code>kubectl get pods -n claudie\n</code></pre> <pre><code>NAME                                   READY   STATUS      RESTARTS        AGE\nansibler-5c6c776b75-82c2q              1/1     Running     0               8m10s\nbuilder-59f9d44596-n2qzm               1/1     Running     0               8m10s\nmanager-5d76c89b4d-tb6h4               1/1     Running     1 (6m37s ago)   8m10s\ncreate-table-job-jvs9n                 0/1     Completed   1               8m10s\ndynamodb-68777f9787-8wjhs              1/1     Running     0               8m10s\nclaudie-operator-5755b7bc69-5l84h      1/1     Running     0               8m10s\nkube-eleven-64468cd5bd-qp4d4           1/1     Running     0               8m10s\nkuber-698c4564c-dhsvg                  1/1     Running     0               8m10s\nmake-bucket-job-fb5sp                  0/1     Completed   0               8m10s\nminio-0                                1/1     Running     0               8m10s\nminio-1                                1/1     Running     0               8m10s\nminio-2                                1/1     Running     0               8m10s\nminio-3                                1/1     Running     0               8m10s\nmongodb-67bf769957-9ct5z               1/1     Running     0               8m10s\nterraformer-fd664b7ff-dd2h7            1/1     Running     0               8m9s\n</code></pre> </li> <li> <p>Check the <code>InputManifest</code> resource status to find out what is the actual cluster state.</p> <pre><code>kubectl get inputmanifests.claudie.io resourceName -o jsonpath={.status}\n</code></pre> <pre><code>  {\n    \"clusters\": {\n      \"one-of-my-cluster\": {\n        \"message\": \" installing VPN\",\n        \"phase\": \"ANSIBLER\",\n        \"state\": \"IN_PROGRESS\"\n      }\n    },\n    \"state\": \"IN_PROGRESS\"\n  }    \n</code></pre> </li> <li> <p>Examine claudie-operator service logs. The claudie-operator service logs will provide insights into any issues during cluster bootstrap and identify the problematic service. If cluster creation fails despite all Claudie pods being scheduled, it may suggest lack of permissions for Claudie providers' credentials. In this case, operator logs will point to Terrafomer service, and Terraformer service logs will provide detailed error output.</p> <pre><code>kubectl -n claudie logs -l app.kubernetes.io/name=claudie-operator\n</code></pre> <pre><code>6:04AM INF Using log with the level \"info\" module=claudie-operator\n6:04AM INF Claudie-operator is ready to process input manifests module=claudie-operator\n6:04AM INF Claudie-operator is ready to watch input manifest statuses module=claudie-operator\n</code></pre> <p>Debug log level</p> <p>Using debug log level will help here with identifying the issue closely. This guide shows how you can set it up during step 5.</p> <p>Claudie benefit!</p> <p>The great thing about Claudie is that it utilizes open source tools to set up and configure infrastructure based on your preferences. As a result, the majority of errors can be easily found and resolved through online resources.</p> </li> </ol>"},{"location":"troubleshooting/troubleshooting/#terraformer-service-not-starting","title":"Terraformer service not starting","text":"<p>Terraformer relies on MinIO and DynamoDB datastores to be configured via jobs <code>make-bucket-job</code> and <code>create-table-job</code> respectively. If these jobs fail to configure the datastores, or the datastores themselves fail to start, Terraformer will also fail to start.</p>"},{"location":"troubleshooting/troubleshooting/#datastore-initialization-jobs","title":"Datastore initialization jobs","text":"<p>The <code>create-table-job</code> is responsible for creating necessary tables in the DynamoDB datastore, while the <code>make-bucket-job</code> creates a bucket in the MinIO datastore. If these jobs encounter scheduling problems or experience slow autoscaling, they may fail to complete within the designated time frame. To handle this, we have set the <code>backoffLimit</code> of both jobs to fail after approximately 42 minutes. If you encounter any issues with these jobs or believe the <code>backoffLimit</code> should be adjusted, please create an issue.</p>"},{"location":"troubleshooting/troubleshooting/#networking-issues","title":"Networking issues","text":""},{"location":"troubleshooting/troubleshooting/#wireguard-mtu","title":"Wireguard MTU","text":"<p>We use Wireguard for secure node-to-node connectivity. However, it requires setting the MTU value to match that of Wireguard. While the host system interface MTU value is adjusted accordingly, networking issues may arise for services hosted on Claudie managed Kubernetes clusters. For example, we observed that the GitHub actions runner docker container had to be configured with an MTU value of <code>1380</code> to avoid network errors during <code>docker build</code> process.</p>"},{"location":"troubleshooting/troubleshooting/#hetzner-and-oci-node-pools","title":"Hetzner and OCI node pools","text":"<p>We're experiencing networking issues caused by the blacklisting of public IPs owned by Hetzner and OCI. This problem affects the Ansibler and Kube-eleven services, which fail when attempting to add GPG keys to access the Google repository for package downloads. Unfortunately, there's no straightforward solution to bypass this issue. The recommended approach is to allow the services to fail, remove failed cluster and attempt provisioning a new cluster with newly allocated IP addresses that are not blocked by Google.</p>"},{"location":"troubleshooting/troubleshooting/#resolving-issues-with-terraform-state-lock","title":"Resolving issues with Terraform state lock","text":"<p>~During normal operation, the content of this section should not be required. If you ended up here, it means there was likely a bug somewhere in Claudie. Please open a bug report in that case and use the content of this section to troubleshoot your way out of it.</p> <p>First of all you have to get into the directory in the <code>terraformer</code> pod, where all terraform files are located. In order to do that, follow these steps:</p> <ul> <li><code>kubectl exec -it -n claudie &lt;terraformer-pod&gt; -- bash</code></li> <li><code>cd ./services/terraformer/server/clusters/&lt;your-cluster&gt;</code></li> </ul>"},{"location":"troubleshooting/troubleshooting/#locked-state","title":"Locked state","text":"<p>Once you are in the directory with all TF files, run the following command:</p> <pre><code>terraform force-unlock &lt;lock-id&gt;\n</code></pre> <p>The <code>lock-id</code> is generally shown in the error message.</p>"},{"location":"update/update/","title":"Updating Claudie","text":"<p>In this section we'll describe how you can update resources that claudie creates based on changes in the manifest.</p>"},{"location":"update/update/#updating-kubernetes-version","title":"Updating Kubernetes Version","text":"<p>Updating the Kubernetes version is as easy as incrementing the version in the Input Manifest of the already build cluster.</p> <pre><code># old version\n...\nkubernetes:\n  clusters:\n    - name: claudie-cluster\n      version: v1.27.0\n      network: 192.168.2.0/24\n      pools:\n        ...\n</code></pre> <pre><code># new version\n...\nkubernetes:\n  clusters:\n    - name: claudie-cluster\n      version: 1.28.0\n      network: 192.168.2.0/24\n      pools:\n        ...\n</code></pre> <p>When re-applied this will trigger a new workflow for the cluster that will result in the updated kubernetes version.</p> <p>Downgrading a version is not supported once you've upgraded a cluster to a newer version</p>"},{"location":"update/update/#updating-dynamic-nodepool","title":"Updating Dynamic Nodepool","text":"<p>Nodepools specified in the InputManifest are immutable. Once created, they cannot be updated/changed. This decision was made to force the user to perform a rolling update by first deleting the nodepool and replacing it with a new version with the new desired state. A couple of examples are listed below.</p>"},{"location":"update/update/#updating-the-os-image","title":"Updating the OS image","text":"<pre><code># old version\n...\n- name: hetzner\n  providerSpec:\n    name: hetzner-1\n    region: fsn1\n    zone: fsn1-dc14\n  count: 1\n  serverType: cpx11\n  image: ubuntu-22.04\n...\n</code></pre> <pre><code># new version\n...\n- name: hetzner-1 # NOTE the different name.\n  providerSpec:\n    name: hetzner-1\n    region: fsn1\n    zone: fsn1-dc14\n  count: 1\n  serverType: cpx11\n  image: ubuntu-24.04\n...\n</code></pre> <p>When re-applied this will trigger a new workflow for the cluster that will result first in the addition of the new nodepool and then the deletion of the old nodepool. </p>"},{"location":"update/update/#changing-the-server-type-of-a-dynamic-nodepool","title":"Changing the Server Type of a Dynamic Nodepool","text":"<p>The same concept applies to changing the server type of a dynamic nodepool.</p> <pre><code># old version\n...\n- name: hetzner\n  providerSpec:\n    name: hetzner-1\n    region: fsn1\n    zone: fsn1-dc14\n  count: 1\n  serverType: cpx11\n  image: ubuntu-22.04\n...\n</code></pre> <pre><code># new version\n...\n- name: hetzner-1 # NOTE the different name.\n  providerSpec:\n    name: hetzner-1\n    region: fsn1\n    zone: fsn1-dc14\n  count: 1\n  serverType: cpx21\n  image: ubuntu-22.04\n...\n</code></pre> <p>When re-applied this will trigger a new workflow for the cluster that will result in the updated server type of the nodepool.</p>"},{"location":"use-cases/use-cases/","title":"Use-cases and customers","text":"<p>We foresee the following use-cases of the Claudie platform</p>"},{"location":"use-cases/use-cases/#1-cloud-bursting","title":"1. Cloud-bursting","text":"<p>A company uses advanced cloud features in one of the hyper-scale providers (e.g. serverless Lambda and API Gateway functionality in AWS). They run a machine-learning application that they need to train for a pattern on a dataset. The learning phase requires significant compute resources. Claudie allows to extend the cluster in AWS (needed in order to access the AWS functionality) to Hetzner for saving the infrastructure costs of the machine-learning case.</p> <p>Typical client profiles:</p> <ul> <li>startups</li> <li>in need of significant computing power already in their early stages (e.g. AI/ML workloads)</li> </ul>"},{"location":"use-cases/use-cases/#2-cost-saving","title":"2. Cost-saving","text":"<p>A company would like to utilize their on-premise or leased resources that they already invested into, but would like to:</p> <ol> <li>extend the capacity</li> <li>access managed features of a hyper-scale provider (AWS, GCP, ...)</li> <li>get the workload physically closer to a client (e. g. to South America)</li> </ol> <p>Typical client profile:</p> <ul> <li>medium-size business</li> <li>possibly already familiar with containerized workload</li> </ul>"},{"location":"use-cases/use-cases/#3-smart-layer-as-a-service-on-top-of-simple-cloud-providers","title":"3. Smart-layer-as-a-Service on top of simple cloud-providers","text":"<p>An existing customer of medium-size provider (e.g. Exoscale) would like to utilize features that are typical for hyper-scale providers. Their current provider does neither offer nor plan to offer such an advanced functionality.</p> <p>Typical client profile:</p> <ul> <li>established business</li> <li>need to access advanced managed features to innovate faster</li> </ul>"},{"location":"use-cases/use-cases/#4-service-interconnect","title":"4. Service interconnect","text":"<p>A company would like to access on-premise-hosted services and cloud-managed services from within the same cluster. For on-premise services the on-premise cluster node would egress the traffic. The cloud-hosted cluster nodes would deal with the egress traffic to the cloud-managed services.</p> <p>Typical client profile:</p> <ul> <li>medium-size/established business</li> <li>already contains on-premise workloads</li> <li>has the need to take the advantage of managed cloud infra (from cost, agility, or capacity reasons)</li> </ul>"},{"location":"version-matrix/version-matrix/","title":"Version matrix","text":"<p>In the following table, you can find the supported Kubernetes and OS versions for the latest Claudie versions.</p> Claudie Version Kubernetes versions OS versions v0.6.x 1.24.x, 1.25.x, 1.26.x Ubuntu 22.04 v0.7.0 1.24.x, 1.25.x, 1.26.x Ubuntu 22.04 v0.7.1-x 1.25.x, 1.26.x, 1.27.x Ubuntu 22.04 v0.8.0 1.25.x, 1.26.x, 1.27.x Ubuntu 22.04 v0.8.1 1.27.x, 1.28.x, 1.29.x Ubuntu 22.04 v0.9.0 1.27.x, 1.28.x, 1.29.x, 1.30.x Ubuntu 22.04 (Ubuntu 24.04 on Hetzner and Azure) v0.9.1 1.29.x, 1.30.x 1.31.x Ubuntu 22.04 (Ubuntu 24.04 on Hetzner and Azure)"}]}