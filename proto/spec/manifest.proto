syntax = "proto3";
package spec;
option go_package = "github.com/berops/claudie/proto/pb/spec";

import "google/protobuf/timestamp.proto";
import "spec/nodepool.proto";
import "spec/dns.proto";

// Config holds data for a single manifest.
message Config {
  // version of the config.
  uint64 version = 1;
  // Config name - same as input manifest name.
  string name = 2;
  // Information related within a k8s context.
  KubernetesContext k8sCtx = 3;
  // Client defined manifest.
  Manifest manifest = 4;
  // Clusters parsed from the supplied manifest.
  map<string, ClusterState> clusters = 5;
}

message Manifest {
  enum State {
    Pending = 0;
    Scheduled = 1;
    Done = 2;
    Error = 3;
  }

  string raw = 1;
  bytes checksum = 2;
  bytes lastAppliedChecksum = 3;
  State state = 4;
}

message ClusterState {
  Clusters current = 1;
  Clusters desired = 2;
  Events events = 3;
  Workflow state = 4;
}

message Clusters {
  K8scluster k8s = 1;
  LoadBalancers loadBalancers = 2;
}

message LoadBalancers {
  repeated LBcluster clusters = 1;
}

message KubernetesContext {
  // name represents the input manifest resource name in Kubernetes
  string name = 1;
  // namespace represents the input manifest resource namespace in Kubernetes
  string namespace = 2;
}

message Workflow {
  enum Stage {
    // NONE indicates that no stage is currently executing.
    NONE = 0;
    // TERRAFORMER indicates that the cluster is currently being build in
    // terraformer.
    TERRAFORMER = 1;
    // ANSIBLER indicates that the cluster is currently being build in ansibler.
    ANSIBLER = 2;
    // KUBE_ELEVEN indicates that the cluster is currently being build in kube
    // eleven.
    KUBE_ELEVEN = 3;
    // KUBER indicates that the cluster is currently being build in kuber.
    KUBER = 4;
    // DESTROY_TERRAFORMER indicates that infra for a cluster is being deleted.
    DESTROY_TERRAFORMER = 7;
    // DESTROY_KUBER indicates that data for a cluster is being deleted.
    DESTROY_KUBER = 8;
    // DELETE_NODES indicates the nodes are being deleted for the cluster.
    DELETE_NODES = 9;
  }

  enum Status {
    // DONE indicates that the workflow has finished.
    DONE = 0;
    // ERROR indicates that an error occurred while building the cluster.
    ERROR = 1;
    // IN_PROGRESS indicates that the cluster is currently being build.
    IN_PROGRESS = 2;
  }

  Stage stage = 1;
  Status status = 2;
  // additional information describing the state and status.
  string description = 3;
}

// K8scluster represents a single kubernetes cluster specified in the manifest.
message K8scluster {
  // General info about the cluster.
  ClusterInfo clusterInfo = 1;
  // Network range for the VPN.
  string network = 2;
  // Kubeconfig of the cluster.
  string kubeconfig = 3;
  // Kubernetes version.
  string kubernetes = 4;
  // General information about a proxy used to build a K8s cluster.
  InstallationProxy installationProxy = 5;
}

// LBcluster represents a single load balancer cluster specified in the
// manifest.
message LBcluster {
  // General info about the cluster.
  ClusterInfo clusterInfo = 1;
  // Array of Load balancer roles.
  repeated Role roles = 2;
  // DNS information.
  DNS dns = 3;
  // Kubernetes cluster name of the cluster this load balancer is attached to.
  string targetedK8s = 4;
  // usedApiEndpoint signals which LB is actually used as the api endpoint.
  // Claudie manifest validation does not allow for multiple API endpoints
  // to be present, however. Internally claudie can deal with more loadbalancers
  // that have the API role, this is due to the creation of intermediate representation
  // which always add new infrastructure before making any further changes.
  // To recognize which of them is actually used this field was added.
  bool usedApiEndpoint = 5;
}

// ClusterInfo holds general information about the clusters.
message ClusterInfo {
  // Name of the cluster.
  string name = 1;
  // Random hash of the cluster.
  string hash = 2;
  // Array of node pools this cluster is made of.
  repeated NodePool nodePools = 5;
}

// InstallationProxy holds general information about a proxy used to build a K8s cluster.
message InstallationProxy {
  // Proxy installation mode.
  string mode = 1;
  // Proxy endpoint used to access the proxy.
  string endpoint = 2;
}

enum ProxyOp {
 // None specifies that no change happened in the desired
 // state of the Proxy settings compared to the current.
 NONE = 0;
 // Modified indicates some change happened, either add,
 // delete, modified, replaced etc.
 MODIFIED = 1;
 // Off indicates that the Proxy envs should be turned off.
 OFF = 2;
}

// ProxyEnvs holds information about a need to update proxy envs, proxy endpoint, and no proxy list.
message ProxyEnvs {
  // Signal a need to update proxy envs
  ProxyOp op = 1;
  // Holds a proxy endpoint.
  string httpProxyUrl = 2;
  // Holds a list of IPs and hostnames that aren't routed through proxy.
  string noProxyList = 3;
}

// Role represents a single loadbalancer role from the manifest.
message Role {
  // Name of the role.
  string name = 1;
  // Protocol that load balancer uses to forward traffic. ["tcp", "udp"]
  string protocol = 2;
  // Port that load balancer will forward from.
  int32 port = 3;
  // Port that load balancer will forward to.
  int32 targetPort = 4;
  // Targeted nodes in Kubernetes clusters.
  repeated string targetPools = 7;
  // Type of the role.
  RoleType roleType = 6;
}

// RoleType specifies the type of the role.
enum RoleType {
  // API server load balancer.
  ApiServer = 0;
  // Ingress load balancer.
  Ingress = 1;
}

// ClusterType specifies the type of the cluster.
enum ClusterType {
  // Kubernetes cluster.
  K8s = 0;
  // Load balancer cluster.
  LB = 1;
}

enum Event {
  UNKNOWN = 0;
  CREATE = 1;
  UPDATE = 2;
  DELETE = 3;
}

message Events {
  repeated TaskEvent events = 1;
  int32 ttl = 2;
  bool autoscaled = 3;
}

message TaskEvent {
  string id = 1;
  google.protobuf.Timestamp timestamp = 2;
  Event event = 3;
  Task task = 4;
  string description = 5;
  Retry onError = 7;
}

message Retry {
  message Repeat {
    enum Kind {
      ENDLESS = 0;
      EXPONENTIAL = 1;
    }
    Kind kind = 1;
    // currentTick specifies the current number of ticks.
    // A tick is an regular interval at which manifests are being checked.
    // to check the Tick timeout see: manager/internal/service/watchers.go
    uint32 currentTick = 2;
    // stopAfter specifies the maximum number of ticks, after reaching this value the manifest will be rescheduled
    // for the last time before giving up.
    uint32 stopAfter = 3;
    // retryAfter specifies the number of ticks to wait before rescheduling the manifest again.
    // this value will be set to the value of currentTick after it is updated.
    uint32 retryAfter = 4;
  }
  message Rollback {
    repeated TaskEvent tasks = 1;
  }

  oneof Do {
    Repeat repeat = 3;
    Rollback rollback = 4;
  }
}

message Task {
  CreateState createState = 1;
  UpdateState updateState = 2;
  DeleteState deleteState = 3;
  uint64 options = 4;
}

message CreateState {
  K8scluster k8s = 1;
  LoadBalancers lbs = 2;
}

enum ApiEndpointChangeState {
  // NoChange represents the 1st case - no change is needed as the LB cluster is currently
  // attached and the desired spec contains no changes.
  NoChange = 0;
  // AttachingLoadBalancer represents 2nd case - the K8s cluster previously
  // didn't have an LB cluster attached and the ports needed to communicate with the API server
  // were exposed. After attaching an LB cluster to the existing K8s cluster the ports
  // were closed and are no longer accessible, and thus we need to change the API endpoint.
  AttachingLoadBalancer = 1;
  // DetachingLoadBalancer represents 3rd. case - the K8s cluster had an existing
  // LB cluster attached but the new state removed the LB cluster and thus the API endpoint
  // needs to be changed back to one of the control nodes of the cluster.
  DetachingLoadBalancer = 2;
  // EndpointRenamed represents the 4th. case - the K8s cluster has an existing
  // LB cluster attached and also keeps it but the endpoint has changed in the desired state.
  EndpointRenamed = 3;
  // MoveEndpoint represents the 5th. case - the K8s cluster has an existing
  // LB cluster attached, but it will be switched to a different LB cluster
  // in the desired state.
  MoveEndpoint = 4;
}

message UpdateState {
  message K8sEndpoint {
    string nodepool = 1;
    string node = 2;
  }
  message LbEndpoint {
    ApiEndpointChangeState state = 1;
    string currentEndpointId = 2;
    string desiredEndpointId = 3;
  }

  K8scluster k8s = 1;
  LoadBalancers lbs = 2;

  oneof EndpointChange {
    K8sEndpoint newControlEndpoint = 3;
    LbEndpoint  lbEndpointChange = 4;
  }
}

message DeleteState {
  message K8s {
    // if set, the whole k8s cluster and all of its attached
    // loadbalancers should be destroyed.
    bool destroy = 1;
    // if 'destroy' is not set, the deletion process should look at
    // the specifies nodepools and their nodes which should be deleted.
    map<string, DeletedNodes> nodepools = 2;
  }
  message LoadBalancer {
    // id of the loadbalancer.
    string id = 1;
    // if set, the whole loadbalancer cluster will be destroyed.
    bool destroy = 2;
    // if 'destroy' is not set, the deletion process should look at
    // the specifies nodepools and their nodes which should be deleted.
    map<string, DeletedNodes> nodepools = 3;
  }
  K8s k8s = 1;
  repeated LoadBalancer lbs = 2;
}

message DeletedNodes {
  // nodes specifies which nodes should be deleted
  // from the nodepool.
  repeated string nodes = 1;
  // keepNodePoolIfEmpty specifies if the nodepool should
  // be deleted from the current state if its node count
  // reaches zero. Currently this will only be used with
  // autoscaled dynamic nodepools which can have a minimum
  // of 0 nodes, other nodepool types will have this always
  // set to false to indicate that after deletion of all nodes
  // the nodepool should no longer be tracked in the current state.
  bool keepNodePoolIfEmpty = 2;
}
