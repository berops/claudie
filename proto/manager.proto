syntax = "proto3";
package claudie;

import "spec/manifest.proto";
import "spec/nodepool.proto";

option go_package = "proto/pb";

message UpsertManifestRequest {string name = 1; spec.KubernetesContext k8sCtx = 2; spec.Manifest manifest = 3;}
message UpsertManifestResponse {string name = 1; uint64 version = 2;}

message MarkForDeletionRequest {string name = 1; uint64 version = 2;}
message MarkForDeletionResponse {string name = 1; uint64 version = 2;}

message NextTaskRequest {}
message NextTaskResponse {
  spec.Workflow state = 1;
  spec.Clusters current = 2;
  spec.TaskEvent event = 3;
  string cluster = 5;
  uint64 version = 6;
  string name = 7;
  Lease lease = 8;
}

message Lease {
  int32 taskLeaseTime = 1;
}

message TaskUpdateRequest {
  message Refresh {}

  string name = 1;
  string cluster = 2;
  string taskId = 3;
  uint64 version = 4;

  oneof action {
    spec.Workflow state = 5;
    Refresh refresh = 6;
  }
}
message TaskUpdateResponse {string name = 1; uint64 version = 2;}

message ListConfigRequest {}
message ListConfigResponse {repeated spec.Config configs = 1;}

message GetConfigRequest {string name = 1;}
message GetConfigResponse {spec.Config config = 1;}

message UpdateNodePoolRequest {string name = 1; string cluster = 2; uint64 version = 3; spec.NodePool nodepool = 4;}
message UpdateNodePoolResponse {string name = 1; uint64 version = 2;}

message TaskCompleteRequest {
  string name = 1;
  string cluster = 2;
  string taskId = 3;
  uint64 version = 4;
  spec.Workflow workflow = 5;
  spec.Clusters state = 6;
}
message TaskCompleteResponse {string name = 1; uint64 version = 2;}

service ManagerService {
  // UpsertManifest will process the request by either created a new configuration for the
  // given input manifest or updating an existing one.
  rpc UpsertManifest(UpsertManifestRequest) returns (UpsertManifestResponse);

  // MarkForDeletion will mark the requested configuration to be deleted. Once the
  // manager determines the configuration can be deleted it will be deleted.
  rpc MarkForDeletion(MarkForDeletionRequest) returns (MarkForDeletionResponse);

  // ListConfigs will list all stored configuration that the manager manages.
  rpc ListConfigs(ListConfigRequest) returns (ListConfigResponse);
  // GetConfig will retrieve the requested configuration by name.
  rpc GetConfig(GetConfigRequest) returns (GetConfigResponse);

  // NextTask will return the next available task to be worked on or a nil response if no task is available.
  rpc NextTask(NextTaskRequest) returns (NextTaskResponse);
  // TaskUpdate will update the state of the requested task. This should be periodically called as the task
  // that was picked up by the NextTask RPC enters different stages of the build process.
  rpc TaskUpdate(TaskUpdateRequest) returns (TaskUpdateResponse);
  // TaskComplete will update the state of the requested task to either Done or Error. Further, it will
  // update the current state of the clusters from the passed in value, so that subsequent tasks will
  // work with an up-to-date current state that reflects the actual state of the infrastructure.
  // This RPC  should be called when a task that has been previously picked up by the NextTask RPC
  // finished processing, either in error or successfully.
  rpc TaskComplete(TaskCompleteRequest) returns (TaskCompleteResponse);

  // UpdateNodePool updates a single nodepool within a cluster, and should only be called by
  // the autoscaler-adapter service. This RPC bypasses the main loop of how changes are applied
  // to the configuration, and directly changes the nodepool to the state specified in the request
  // to initiate the build process.
  rpc UpdateNodePool(UpdateNodePoolRequest) returns (UpdateNodePoolResponse);
}
