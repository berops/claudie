syntax = "proto3";
package claudie;

import "spec/manifest.proto";

option go_package = "proto/pb";

message SetUpStorageRequest {spec.K8scluster desiredCluster = 1;}
message SetUpStorageResponse {spec.K8scluster desiredCluster = 1;}

message StoreKubeconfigRequest {
  spec.K8scluster cluster = 1;
  string projectName = 2;
}

message StoreKubeconfigResponse {}

message DeleteKubeconfigRequest {spec.K8scluster cluster = 1;}

message DeleteKubeconfigResponse {}

message DeleteNodesRequest {
  spec.K8scluster cluster = 1;
  map<string, spec.DeletedNodes> nodepools = 2;
}

message DeleteNodesResponse {spec.K8scluster cluster = 1;}

message StoreClusterMetadataRequest {
  spec.K8scluster cluster = 1;
  string projectName = 2;
  repeated spec.LBcluster loadbalancers = 3;
}

message StoreClusterMetadataResponse {}

message StoreLBScrapeConfigRequest {
  spec.K8scluster cluster = 1;
  repeated spec.LBcluster desiredLoadbalancers = 2;
}

message StoreLBScrapeConfigResponse {}

message RemoveLBScrapeConfigRequest {spec.K8scluster cluster = 1;}

message RemoveLBScrapeConfigResponse {}

message DeleteClusterMetadataRequest {spec.K8scluster cluster = 1;}

message DeleteClusterMetadataResponse {}

message PatchNodesRequest {spec.K8scluster cluster = 1;}

message PatchNodesResponse {}

message SetUpClusterAutoscalerRequest {
  string projectName = 1;
  spec.K8scluster cluster = 2;
}

message SetUpClusterAutoscalerResponse {}

message DestroyClusterAutoscalerRequest {
  string projectName = 1;
  spec.K8scluster cluster = 2;
}

message DestroyClusterAutoscalerResponse {}

message PatchClusterInfoConfigMapRequest {spec.K8scluster desiredCluster = 1;}

message PatchClusterInfoConfigMapResponse {}

message CiliumRolloutRestartRequest {spec.K8scluster cluster = 1;}

message CiliumRolloutRestartResponse {}

message PatchKubeProxyConfigMapRequest {spec.K8scluster desiredCluster = 1;}
message PatchKubeProxyConfigMapResponse {}

message PatchKubeadmConfigMapRequest {spec.K8scluster desiredCluster = 1; string lbEndpoint = 2;}
message PatchKubeadmConfigMapResponse {}

service KuberService {
  // RemoveLBScrapeConfig removes scrape config for every LB detached from this
  // cluster.
  rpc RemoveLBScrapeConfig(RemoveLBScrapeConfigRequest)
      returns (RemoveLBScrapeConfigResponse);
  // StoreLBScrapeConfig stores scrape config for every LB attached to this
  // cluster.
  rpc StoreLBScrapeConfig(StoreLBScrapeConfigRequest)
      returns (StoreLBScrapeConfigResponse);
  // StoreClusterMetadata creates a secret, which holds the private key and a
  // list of public IP addresses of the cluster supplied.
  rpc StoreClusterMetadata(StoreClusterMetadataRequest)
      returns (StoreClusterMetadataResponse);
  // DeleteClusterMetadata deletes the secret holding the private key and public
  // IP addresses of the cluster supplied.
  rpc DeleteClusterMetadata(DeleteClusterMetadataRequest)
      returns (DeleteClusterMetadataResponse);
  // SetUpStorage installs Longhorn into the cluster.
  rpc SetUpStorage(SetUpStorageRequest) returns (SetUpStorageResponse);
  // StoreKubeconfig creates a secret, which holds the kubeconfig of a
  // Claudie-created cluster.
  rpc StoreKubeconfig(StoreKubeconfigRequest) returns (StoreKubeconfigResponse);
  // DeleteKubeconfig removes the secret that holds the kubeconfig of a
  // Claudie-created cluster.
  rpc DeleteKubeconfig(DeleteKubeconfigRequest)
      returns (DeleteKubeconfigResponse);
  // DeleteNodes deletes the specified nodes from a k8s cluster.
  rpc DeleteNodes(DeleteNodesRequest) returns (DeleteNodesResponse);
  // PatchNodes applies attributes like providerID, labels or taints to the
  // nodes.
  rpc PatchNodes(PatchNodesRequest) returns (PatchNodesResponse);
  // SetUpClusterAutoscaler deploys Cluster Autoscaler and Autoscaler Adapter
  // for every cluster specified.
  rpc SetUpClusterAutoscaler(SetUpClusterAutoscalerRequest)
      returns (SetUpClusterAutoscalerResponse);
  // DestroyClusterAutoscaler deletes Cluster Autoscaler and Autoscaler Adapter
  // for every cluster specified.
  rpc DestroyClusterAutoscaler(DestroyClusterAutoscalerRequest)
      returns (DestroyClusterAutoscalerResponse);
  // PatchClusterInfoConfigMap updates the cluster-info config map in the
  // kube-public namespace with the the kubeconfig. This needs to be done after
  // an api endpoint change as the config map in the kube-public namespace is
  // used by kubeadm when joining.
  rpc PatchClusterInfoConfigMap(PatchClusterInfoConfigMapRequest)
      returns (PatchClusterInfoConfigMapResponse);
  // PatchCubeProxyConfigMap updates the kube-proxy config map with the value of
  // the server: from the passed in kubeconfig and subsequently restarts all
  // kube-proxy pods in the kube-system namespace. This change needs to be done
  // after a endpoint change is performed.
  rpc PatchKubeProxyConfigMap(PatchKubeProxyConfigMapRequest)
      returns (PatchKubeProxyConfigMapResponse);
  // PatchKubeadmConfigMap patches the certSANs of the kubeamd config map
  // with the correct values, after an API endpoint change.
  rpc PatchKubeadmConfigMap(PatchKubeadmConfigMapRequest)
      returns (PatchKubeadmConfigMapResponse);
  // CiliumRolloutRestart performs a rollout restart of the cilium daemonset.
  rpc CiliumRolloutRestart(CiliumRolloutRestartRequest)
      returns (CiliumRolloutRestartResponse);
}
