// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.5
// source: managerv2.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ManagerV2Service_UpsertManifest_FullMethodName  = "/claudie.ManagerV2Service/UpsertManifest"
	ManagerV2Service_MarkForDeletion_FullMethodName = "/claudie.ManagerV2Service/MarkForDeletion"
	ManagerV2Service_ListConfigs_FullMethodName     = "/claudie.ManagerV2Service/ListConfigs"
	ManagerV2Service_GetConfig_FullMethodName       = "/claudie.ManagerV2Service/GetConfig"
)

// ManagerV2ServiceClient is the client API for ManagerV2Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagerV2ServiceClient interface {
	// UpsertManifest will process the request by either creating a new configuration for the
	// given input manifest or updating an existing one.
	UpsertManifest(ctx context.Context, in *UpsertManifestRequestV2, opts ...grpc.CallOption) (*UpsertManifestResponseV2, error)
	// MarkForDeletion will mark the requested configuration to be deleted. Once the
	// manager determines the configuration can be deleted it will be deleted.
	MarkForDeletion(ctx context.Context, in *MarkForDeletionRequestV2, opts ...grpc.CallOption) (*MarkForDeletionResponseV2, error)
	// ListConfigs will list all stored configuration that the manager manages.
	ListConfigs(ctx context.Context, in *ListConfigRequestV2, opts ...grpc.CallOption) (*ListConfigResponseV2, error)
	// GetConfig will retrieve the requested configuration by name.
	GetConfig(ctx context.Context, in *GetConfigRequestV2, opts ...grpc.CallOption) (*GetConfigResponseV2, error)
}

type managerV2ServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewManagerV2ServiceClient(cc grpc.ClientConnInterface) ManagerV2ServiceClient {
	return &managerV2ServiceClient{cc}
}

func (c *managerV2ServiceClient) UpsertManifest(ctx context.Context, in *UpsertManifestRequestV2, opts ...grpc.CallOption) (*UpsertManifestResponseV2, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpsertManifestResponseV2)
	err := c.cc.Invoke(ctx, ManagerV2Service_UpsertManifest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerV2ServiceClient) MarkForDeletion(ctx context.Context, in *MarkForDeletionRequestV2, opts ...grpc.CallOption) (*MarkForDeletionResponseV2, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MarkForDeletionResponseV2)
	err := c.cc.Invoke(ctx, ManagerV2Service_MarkForDeletion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerV2ServiceClient) ListConfigs(ctx context.Context, in *ListConfigRequestV2, opts ...grpc.CallOption) (*ListConfigResponseV2, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListConfigResponseV2)
	err := c.cc.Invoke(ctx, ManagerV2Service_ListConfigs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerV2ServiceClient) GetConfig(ctx context.Context, in *GetConfigRequestV2, opts ...grpc.CallOption) (*GetConfigResponseV2, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetConfigResponseV2)
	err := c.cc.Invoke(ctx, ManagerV2Service_GetConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagerV2ServiceServer is the server API for ManagerV2Service service.
// All implementations must embed UnimplementedManagerV2ServiceServer
// for forward compatibility.
type ManagerV2ServiceServer interface {
	// UpsertManifest will process the request by either creating a new configuration for the
	// given input manifest or updating an existing one.
	UpsertManifest(context.Context, *UpsertManifestRequestV2) (*UpsertManifestResponseV2, error)
	// MarkForDeletion will mark the requested configuration to be deleted. Once the
	// manager determines the configuration can be deleted it will be deleted.
	MarkForDeletion(context.Context, *MarkForDeletionRequestV2) (*MarkForDeletionResponseV2, error)
	// ListConfigs will list all stored configuration that the manager manages.
	ListConfigs(context.Context, *ListConfigRequestV2) (*ListConfigResponseV2, error)
	// GetConfig will retrieve the requested configuration by name.
	GetConfig(context.Context, *GetConfigRequestV2) (*GetConfigResponseV2, error)
	mustEmbedUnimplementedManagerV2ServiceServer()
}

// UnimplementedManagerV2ServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedManagerV2ServiceServer struct{}

func (UnimplementedManagerV2ServiceServer) UpsertManifest(context.Context, *UpsertManifestRequestV2) (*UpsertManifestResponseV2, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertManifest not implemented")
}
func (UnimplementedManagerV2ServiceServer) MarkForDeletion(context.Context, *MarkForDeletionRequestV2) (*MarkForDeletionResponseV2, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkForDeletion not implemented")
}
func (UnimplementedManagerV2ServiceServer) ListConfigs(context.Context, *ListConfigRequestV2) (*ListConfigResponseV2, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConfigs not implemented")
}
func (UnimplementedManagerV2ServiceServer) GetConfig(context.Context, *GetConfigRequestV2) (*GetConfigResponseV2, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfig not implemented")
}
func (UnimplementedManagerV2ServiceServer) mustEmbedUnimplementedManagerV2ServiceServer() {}
func (UnimplementedManagerV2ServiceServer) testEmbeddedByValue()                          {}

// UnsafeManagerV2ServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagerV2ServiceServer will
// result in compilation errors.
type UnsafeManagerV2ServiceServer interface {
	mustEmbedUnimplementedManagerV2ServiceServer()
}

func RegisterManagerV2ServiceServer(s grpc.ServiceRegistrar, srv ManagerV2ServiceServer) {
	// If the following call pancis, it indicates UnimplementedManagerV2ServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ManagerV2Service_ServiceDesc, srv)
}

func _ManagerV2Service_UpsertManifest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertManifestRequestV2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerV2ServiceServer).UpsertManifest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagerV2Service_UpsertManifest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerV2ServiceServer).UpsertManifest(ctx, req.(*UpsertManifestRequestV2))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerV2Service_MarkForDeletion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkForDeletionRequestV2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerV2ServiceServer).MarkForDeletion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagerV2Service_MarkForDeletion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerV2ServiceServer).MarkForDeletion(ctx, req.(*MarkForDeletionRequestV2))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerV2Service_ListConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConfigRequestV2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerV2ServiceServer).ListConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagerV2Service_ListConfigs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerV2ServiceServer).ListConfigs(ctx, req.(*ListConfigRequestV2))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerV2Service_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfigRequestV2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerV2ServiceServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagerV2Service_GetConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerV2ServiceServer).GetConfig(ctx, req.(*GetConfigRequestV2))
	}
	return interceptor(ctx, in, info, handler)
}

// ManagerV2Service_ServiceDesc is the grpc.ServiceDesc for ManagerV2Service service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ManagerV2Service_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "claudie.ManagerV2Service",
	HandlerType: (*ManagerV2ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpsertManifest",
			Handler:    _ManagerV2Service_UpsertManifest_Handler,
		},
		{
			MethodName: "MarkForDeletion",
			Handler:    _ManagerV2Service_MarkForDeletion_Handler,
		},
		{
			MethodName: "ListConfigs",
			Handler:    _ManagerV2Service_ListConfigs_Handler,
		},
		{
			MethodName: "GetConfig",
			Handler:    _ManagerV2Service_GetConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "managerv2.proto",
}
