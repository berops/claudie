// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        v5.29.5
// source: spec/manifestv2.proto

package spec

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// RoleType specifies the type of the role.
type RoleTypeV2 int32

const (
	// API server load balancer.
	RoleTypeV2_ApiServer_V2 RoleTypeV2 = 0
	// Ingress load balancer.
	RoleTypeV2_Ingress_V2 RoleTypeV2 = 1
)

// Enum value maps for RoleTypeV2.
var (
	RoleTypeV2_name = map[int32]string{
		0: "ApiServer_V2",
		1: "Ingress_V2",
	}
	RoleTypeV2_value = map[string]int32{
		"ApiServer_V2": 0,
		"Ingress_V2":   1,
	}
)

func (x RoleTypeV2) Enum() *RoleTypeV2 {
	p := new(RoleTypeV2)
	*p = x
	return p
}

func (x RoleTypeV2) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RoleTypeV2) Descriptor() protoreflect.EnumDescriptor {
	return file_spec_manifestv2_proto_enumTypes[0].Descriptor()
}

func (RoleTypeV2) Type() protoreflect.EnumType {
	return &file_spec_manifestv2_proto_enumTypes[0]
}

func (x RoleTypeV2) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RoleTypeV2.Descriptor instead.
func (RoleTypeV2) EnumDescriptor() ([]byte, []int) {
	return file_spec_manifestv2_proto_rawDescGZIP(), []int{0}
}

type EventV2 int32

const (
	EventV2_UNKNOWN_V2 EventV2 = 0
	EventV2_CREATE_V2  EventV2 = 1
	EventV2_UPDATE_V2  EventV2 = 2
	EventV2_DELETE_V2  EventV2 = 3
)

// Enum value maps for EventV2.
var (
	EventV2_name = map[int32]string{
		0: "UNKNOWN_V2",
		1: "CREATE_V2",
		2: "UPDATE_V2",
		3: "DELETE_V2",
	}
	EventV2_value = map[string]int32{
		"UNKNOWN_V2": 0,
		"CREATE_V2":  1,
		"UPDATE_V2":  2,
		"DELETE_V2":  3,
	}
)

func (x EventV2) Enum() *EventV2 {
	p := new(EventV2)
	*p = x
	return p
}

func (x EventV2) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventV2) Descriptor() protoreflect.EnumDescriptor {
	return file_spec_manifestv2_proto_enumTypes[1].Descriptor()
}

func (EventV2) Type() protoreflect.EnumType {
	return &file_spec_manifestv2_proto_enumTypes[1]
}

func (x EventV2) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventV2.Descriptor instead.
func (EventV2) EnumDescriptor() ([]byte, []int) {
	return file_spec_manifestv2_proto_rawDescGZIP(), []int{1}
}

type ManifestV2_State int32

const (
	ManifestV2_Pending   ManifestV2_State = 0
	ManifestV2_Scheduled ManifestV2_State = 1
	ManifestV2_Done      ManifestV2_State = 2
	ManifestV2_Error     ManifestV2_State = 3
)

// Enum value maps for ManifestV2_State.
var (
	ManifestV2_State_name = map[int32]string{
		0: "Pending",
		1: "Scheduled",
		2: "Done",
		3: "Error",
	}
	ManifestV2_State_value = map[string]int32{
		"Pending":   0,
		"Scheduled": 1,
		"Done":      2,
		"Error":     3,
	}
)

func (x ManifestV2_State) Enum() *ManifestV2_State {
	p := new(ManifestV2_State)
	*p = x
	return p
}

func (x ManifestV2_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ManifestV2_State) Descriptor() protoreflect.EnumDescriptor {
	return file_spec_manifestv2_proto_enumTypes[2].Descriptor()
}

func (ManifestV2_State) Type() protoreflect.EnumType {
	return &file_spec_manifestv2_proto_enumTypes[2]
}

func (x ManifestV2_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ManifestV2_State.Descriptor instead.
func (ManifestV2_State) EnumDescriptor() ([]byte, []int) {
	return file_spec_manifestv2_proto_rawDescGZIP(), []int{1, 0}
}

type WorkflowV2_Status int32

const (
	// DONE indicates that the workflow has finished.
	WorkflowV2_DONE WorkflowV2_Status = 0
	// ERROR indicates that an error occurred while building the cluster.
	WorkflowV2_ERROR WorkflowV2_Status = 1
	// IN_PROGRESS indicates that the cluster is currently being build.
	WorkflowV2_IN_PROGRESS WorkflowV2_Status = 2
	// WAIT_FOR_PICKUP indicates that new tasks were identified and are
	// to be scheduled to be worked on.
	WorkflowV2_WAIT_FOR_PICKUP WorkflowV2_Status = 3
)

// Enum value maps for WorkflowV2_Status.
var (
	WorkflowV2_Status_name = map[int32]string{
		0: "DONE",
		1: "ERROR",
		2: "IN_PROGRESS",
		3: "WAIT_FOR_PICKUP",
	}
	WorkflowV2_Status_value = map[string]int32{
		"DONE":            0,
		"ERROR":           1,
		"IN_PROGRESS":     2,
		"WAIT_FOR_PICKUP": 3,
	}
)

func (x WorkflowV2_Status) Enum() *WorkflowV2_Status {
	p := new(WorkflowV2_Status)
	*p = x
	return p
}

func (x WorkflowV2_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WorkflowV2_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_spec_manifestv2_proto_enumTypes[3].Descriptor()
}

func (WorkflowV2_Status) Type() protoreflect.EnumType {
	return &file_spec_manifestv2_proto_enumTypes[3]
}

func (x WorkflowV2_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WorkflowV2_Status.Descriptor instead.
func (WorkflowV2_Status) EnumDescriptor() ([]byte, []int) {
	return file_spec_manifestv2_proto_rawDescGZIP(), []int{6, 0}
}

type RetryV2_Repeat_Kind int32

const (
	RetryV2_Repeat_ENDLESS     RetryV2_Repeat_Kind = 0
	RetryV2_Repeat_EXPONENTIAL RetryV2_Repeat_Kind = 1
)

// Enum value maps for RetryV2_Repeat_Kind.
var (
	RetryV2_Repeat_Kind_name = map[int32]string{
		0: "ENDLESS",
		1: "EXPONENTIAL",
	}
	RetryV2_Repeat_Kind_value = map[string]int32{
		"ENDLESS":     0,
		"EXPONENTIAL": 1,
	}
)

func (x RetryV2_Repeat_Kind) Enum() *RetryV2_Repeat_Kind {
	p := new(RetryV2_Repeat_Kind)
	*p = x
	return p
}

func (x RetryV2_Repeat_Kind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RetryV2_Repeat_Kind) Descriptor() protoreflect.EnumDescriptor {
	return file_spec_manifestv2_proto_enumTypes[4].Descriptor()
}

func (RetryV2_Repeat_Kind) Type() protoreflect.EnumType {
	return &file_spec_manifestv2_proto_enumTypes[4]
}

func (x RetryV2_Repeat_Kind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RetryV2_Repeat_Kind.Descriptor instead.
func (RetryV2_Repeat_Kind) EnumDescriptor() ([]byte, []int) {
	return file_spec_manifestv2_proto_rawDescGZIP(), []int{13, 0, 0}
}

// Config holds data for a single manifest.
type ConfigV2 struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// version of the config.
	Version uint64 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	// Config name - same as input manifest name.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Information related within a k8s context.
	K8SCtx *KubernetesContextV2 `protobuf:"bytes,3,opt,name=k8sCtx,proto3" json:"k8sCtx,omitempty"`
	// Client defined manifest.
	Manifest *ManifestV2 `protobuf:"bytes,4,opt,name=manifest,proto3" json:"manifest,omitempty"`
	// Clusters parsed from the supplied manifest.
	Clusters      map[string]*ClusterStateV2 `protobuf:"bytes,5,rep,name=clusters,proto3" json:"clusters,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConfigV2) Reset() {
	*x = ConfigV2{}
	mi := &file_spec_manifestv2_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfigV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigV2) ProtoMessage() {}

func (x *ConfigV2) ProtoReflect() protoreflect.Message {
	mi := &file_spec_manifestv2_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigV2.ProtoReflect.Descriptor instead.
func (*ConfigV2) Descriptor() ([]byte, []int) {
	return file_spec_manifestv2_proto_rawDescGZIP(), []int{0}
}

func (x *ConfigV2) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *ConfigV2) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ConfigV2) GetK8SCtx() *KubernetesContextV2 {
	if x != nil {
		return x.K8SCtx
	}
	return nil
}

func (x *ConfigV2) GetManifest() *ManifestV2 {
	if x != nil {
		return x.Manifest
	}
	return nil
}

func (x *ConfigV2) GetClusters() map[string]*ClusterStateV2 {
	if x != nil {
		return x.Clusters
	}
	return nil
}

type ManifestV2 struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Raw                 string                 `protobuf:"bytes,1,opt,name=raw,proto3" json:"raw,omitempty"`
	Checksum            []byte                 `protobuf:"bytes,2,opt,name=checksum,proto3" json:"checksum,omitempty"`
	LastAppliedChecksum []byte                 `protobuf:"bytes,3,opt,name=lastAppliedChecksum,proto3" json:"lastAppliedChecksum,omitempty"`
	State               ManifestV2_State       `protobuf:"varint,4,opt,name=state,proto3,enum=spec.ManifestV2_State" json:"state,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *ManifestV2) Reset() {
	*x = ManifestV2{}
	mi := &file_spec_manifestv2_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ManifestV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManifestV2) ProtoMessage() {}

func (x *ManifestV2) ProtoReflect() protoreflect.Message {
	mi := &file_spec_manifestv2_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManifestV2.ProtoReflect.Descriptor instead.
func (*ManifestV2) Descriptor() ([]byte, []int) {
	return file_spec_manifestv2_proto_rawDescGZIP(), []int{1}
}

func (x *ManifestV2) GetRaw() string {
	if x != nil {
		return x.Raw
	}
	return ""
}

func (x *ManifestV2) GetChecksum() []byte {
	if x != nil {
		return x.Checksum
	}
	return nil
}

func (x *ManifestV2) GetLastAppliedChecksum() []byte {
	if x != nil {
		return x.LastAppliedChecksum
	}
	return nil
}

func (x *ManifestV2) GetState() ManifestV2_State {
	if x != nil {
		return x.State
	}
	return ManifestV2_Pending
}

type ClusterStateV2 struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Current       *ClustersV2            `protobuf:"bytes,1,opt,name=current,proto3" json:"current,omitempty"`
	State         *WorkflowV2            `protobuf:"bytes,4,opt,name=state,proto3" json:"state,omitempty"`
	Task          *TaskEventV2           `protobuf:"bytes,5,opt,name=task,proto3" json:"task,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClusterStateV2) Reset() {
	*x = ClusterStateV2{}
	mi := &file_spec_manifestv2_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusterStateV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterStateV2) ProtoMessage() {}

func (x *ClusterStateV2) ProtoReflect() protoreflect.Message {
	mi := &file_spec_manifestv2_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterStateV2.ProtoReflect.Descriptor instead.
func (*ClusterStateV2) Descriptor() ([]byte, []int) {
	return file_spec_manifestv2_proto_rawDescGZIP(), []int{2}
}

func (x *ClusterStateV2) GetCurrent() *ClustersV2 {
	if x != nil {
		return x.Current
	}
	return nil
}

func (x *ClusterStateV2) GetState() *WorkflowV2 {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *ClusterStateV2) GetTask() *TaskEventV2 {
	if x != nil {
		return x.Task
	}
	return nil
}

type ClustersV2 struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	K8S           *K8SclusterV2          `protobuf:"bytes,1,opt,name=k8s,proto3" json:"k8s,omitempty"`
	LoadBalancers *LoadBalancersV2       `protobuf:"bytes,2,opt,name=loadBalancers,proto3" json:"loadBalancers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClustersV2) Reset() {
	*x = ClustersV2{}
	mi := &file_spec_manifestv2_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClustersV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClustersV2) ProtoMessage() {}

func (x *ClustersV2) ProtoReflect() protoreflect.Message {
	mi := &file_spec_manifestv2_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClustersV2.ProtoReflect.Descriptor instead.
func (*ClustersV2) Descriptor() ([]byte, []int) {
	return file_spec_manifestv2_proto_rawDescGZIP(), []int{3}
}

func (x *ClustersV2) GetK8S() *K8SclusterV2 {
	if x != nil {
		return x.K8S
	}
	return nil
}

func (x *ClustersV2) GetLoadBalancers() *LoadBalancersV2 {
	if x != nil {
		return x.LoadBalancers
	}
	return nil
}

type LoadBalancersV2 struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Clusters      []*LBclusterV2         `protobuf:"bytes,1,rep,name=clusters,proto3" json:"clusters,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LoadBalancersV2) Reset() {
	*x = LoadBalancersV2{}
	mi := &file_spec_manifestv2_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LoadBalancersV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadBalancersV2) ProtoMessage() {}

func (x *LoadBalancersV2) ProtoReflect() protoreflect.Message {
	mi := &file_spec_manifestv2_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadBalancersV2.ProtoReflect.Descriptor instead.
func (*LoadBalancersV2) Descriptor() ([]byte, []int) {
	return file_spec_manifestv2_proto_rawDescGZIP(), []int{4}
}

func (x *LoadBalancersV2) GetClusters() []*LBclusterV2 {
	if x != nil {
		return x.Clusters
	}
	return nil
}

type KubernetesContextV2 struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// name represents the input manifest resource name in Kubernetes
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// namespace represents the input manifest resource namespace in Kubernetes
	Namespace     string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KubernetesContextV2) Reset() {
	*x = KubernetesContextV2{}
	mi := &file_spec_manifestv2_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KubernetesContextV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubernetesContextV2) ProtoMessage() {}

func (x *KubernetesContextV2) ProtoReflect() protoreflect.Message {
	mi := &file_spec_manifestv2_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubernetesContextV2.ProtoReflect.Descriptor instead.
func (*KubernetesContextV2) Descriptor() ([]byte, []int) {
	return file_spec_manifestv2_proto_rawDescGZIP(), []int{5}
}

func (x *KubernetesContextV2) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *KubernetesContextV2) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

type WorkflowV2 struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	Status WorkflowV2_Status      `protobuf:"varint,2,opt,name=status,proto3,enum=spec.WorkflowV2_Status" json:"status,omitempty"`
	// additional information describing the state.
	Description   string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkflowV2) Reset() {
	*x = WorkflowV2{}
	mi := &file_spec_manifestv2_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkflowV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowV2) ProtoMessage() {}

func (x *WorkflowV2) ProtoReflect() protoreflect.Message {
	mi := &file_spec_manifestv2_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowV2.ProtoReflect.Descriptor instead.
func (*WorkflowV2) Descriptor() ([]byte, []int) {
	return file_spec_manifestv2_proto_rawDescGZIP(), []int{6}
}

func (x *WorkflowV2) GetStatus() WorkflowV2_Status {
	if x != nil {
		return x.Status
	}
	return WorkflowV2_DONE
}

func (x *WorkflowV2) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// K8scluster represents a single kubernetes cluster specified in the manifest.
type K8SclusterV2 struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// General info about the cluster.
	ClusterInfo *ClusterInfoV2 `protobuf:"bytes,1,opt,name=clusterInfo,proto3" json:"clusterInfo,omitempty"`
	// Network range for the VPN.
	Network string `protobuf:"bytes,2,opt,name=network,proto3" json:"network,omitempty"`
	// Kubeconfig of the cluster.
	Kubeconfig string `protobuf:"bytes,3,opt,name=kubeconfig,proto3" json:"kubeconfig,omitempty"`
	// Kubernetes version.
	Kubernetes string `protobuf:"bytes,4,opt,name=kubernetes,proto3" json:"kubernetes,omitempty"`
	// General information about a proxy used to build a K8s cluster.
	InstallationProxy *InstallationProxyV2 `protobuf:"bytes,5,opt,name=installationProxy,proto3" json:"installationProxy,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *K8SclusterV2) Reset() {
	*x = K8SclusterV2{}
	mi := &file_spec_manifestv2_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *K8SclusterV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*K8SclusterV2) ProtoMessage() {}

func (x *K8SclusterV2) ProtoReflect() protoreflect.Message {
	mi := &file_spec_manifestv2_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use K8SclusterV2.ProtoReflect.Descriptor instead.
func (*K8SclusterV2) Descriptor() ([]byte, []int) {
	return file_spec_manifestv2_proto_rawDescGZIP(), []int{7}
}

func (x *K8SclusterV2) GetClusterInfo() *ClusterInfoV2 {
	if x != nil {
		return x.ClusterInfo
	}
	return nil
}

func (x *K8SclusterV2) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *K8SclusterV2) GetKubeconfig() string {
	if x != nil {
		return x.Kubeconfig
	}
	return ""
}

func (x *K8SclusterV2) GetKubernetes() string {
	if x != nil {
		return x.Kubernetes
	}
	return ""
}

func (x *K8SclusterV2) GetInstallationProxy() *InstallationProxyV2 {
	if x != nil {
		return x.InstallationProxy
	}
	return nil
}

// LBcluster represents a single load balancer cluster specified in the
// manifest.
type LBclusterV2 struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// General info about the cluster.
	ClusterInfo *ClusterInfoV2 `protobuf:"bytes,1,opt,name=clusterInfo,proto3" json:"clusterInfo,omitempty"`
	// Array of Load balancer roles.
	Roles []*RoleV2 `protobuf:"bytes,2,rep,name=roles,proto3" json:"roles,omitempty"`
	// DNS information.
	Dns *DNS `protobuf:"bytes,3,opt,name=dns,proto3" json:"dns,omitempty"`
	// Kubernetes cluster name of the cluster this load balancer is attached to.
	TargetedK8S string `protobuf:"bytes,4,opt,name=targetedK8s,proto3" json:"targetedK8s,omitempty"`
	// usedApiEndpoint signals which LB is actually used as the api endpoint.
	// Claudie manifest validation does not allow for multiple API endpoints
	// to be present, however. Internally claudie can deal with more loadbalancers
	// that have the API role, this is due to the creation of intermediate representation
	// which always add new infrastructure before making any further changes.
	// To recognize which of them is actually used this field was added.
	UsedApiEndpoint bool `protobuf:"varint,5,opt,name=usedApiEndpoint,proto3" json:"usedApiEndpoint,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *LBclusterV2) Reset() {
	*x = LBclusterV2{}
	mi := &file_spec_manifestv2_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LBclusterV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LBclusterV2) ProtoMessage() {}

func (x *LBclusterV2) ProtoReflect() protoreflect.Message {
	mi := &file_spec_manifestv2_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LBclusterV2.ProtoReflect.Descriptor instead.
func (*LBclusterV2) Descriptor() ([]byte, []int) {
	return file_spec_manifestv2_proto_rawDescGZIP(), []int{8}
}

func (x *LBclusterV2) GetClusterInfo() *ClusterInfoV2 {
	if x != nil {
		return x.ClusterInfo
	}
	return nil
}

func (x *LBclusterV2) GetRoles() []*RoleV2 {
	if x != nil {
		return x.Roles
	}
	return nil
}

func (x *LBclusterV2) GetDns() *DNS {
	if x != nil {
		return x.Dns
	}
	return nil
}

func (x *LBclusterV2) GetTargetedK8S() string {
	if x != nil {
		return x.TargetedK8S
	}
	return ""
}

func (x *LBclusterV2) GetUsedApiEndpoint() bool {
	if x != nil {
		return x.UsedApiEndpoint
	}
	return false
}

// ClusterInfo holds general information about the clusters.
type ClusterInfoV2 struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of the cluster.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Random hash of the cluster.
	Hash string `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	// Array of node pools this cluster is made of.
	NodePools     []*NodePool `protobuf:"bytes,5,rep,name=nodePools,proto3" json:"nodePools,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClusterInfoV2) Reset() {
	*x = ClusterInfoV2{}
	mi := &file_spec_manifestv2_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusterInfoV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterInfoV2) ProtoMessage() {}

func (x *ClusterInfoV2) ProtoReflect() protoreflect.Message {
	mi := &file_spec_manifestv2_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterInfoV2.ProtoReflect.Descriptor instead.
func (*ClusterInfoV2) Descriptor() ([]byte, []int) {
	return file_spec_manifestv2_proto_rawDescGZIP(), []int{9}
}

func (x *ClusterInfoV2) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ClusterInfoV2) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *ClusterInfoV2) GetNodePools() []*NodePool {
	if x != nil {
		return x.NodePools
	}
	return nil
}

// InstallationProxy holds general information about a proxy used to build a K8s cluster.
type InstallationProxyV2 struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Proxy installation mode.
	Mode string `protobuf:"bytes,1,opt,name=mode,proto3" json:"mode,omitempty"`
	// Proxy endpoint used to access the proxy.
	Endpoint string `protobuf:"bytes,2,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	// NoProxy is a comma-separated list of values that will be added to the default list of NoProxies used by Claudie.
	//
	// The default no proxy list is: 127.0.0.1/8,localhost,cluster.local,10.244.0.0/16,10.96.0.0/12"
	// Any values specified will be appended to the end of the default NoProxy list.
	// This field only has an effect if the Proxy is turned on.
	NoProxy       string `protobuf:"bytes,3,opt,name=noProxy,proto3" json:"noProxy,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InstallationProxyV2) Reset() {
	*x = InstallationProxyV2{}
	mi := &file_spec_manifestv2_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InstallationProxyV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstallationProxyV2) ProtoMessage() {}

func (x *InstallationProxyV2) ProtoReflect() protoreflect.Message {
	mi := &file_spec_manifestv2_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstallationProxyV2.ProtoReflect.Descriptor instead.
func (*InstallationProxyV2) Descriptor() ([]byte, []int) {
	return file_spec_manifestv2_proto_rawDescGZIP(), []int{10}
}

func (x *InstallationProxyV2) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *InstallationProxyV2) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *InstallationProxyV2) GetNoProxy() string {
	if x != nil {
		return x.NoProxy
	}
	return ""
}

// Role represents a single loadbalancer role from the manifest.
type RoleV2 struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of the role.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Protocol that load balancer uses to forward traffic. ["tcp", "udp"]
	Protocol string `protobuf:"bytes,2,opt,name=protocol,proto3" json:"protocol,omitempty"`
	// Port that load balancer will forward from.
	Port int32 `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	// Port that load balancer will forward to.
	TargetPort int32 `protobuf:"varint,4,opt,name=targetPort,proto3" json:"targetPort,omitempty"`
	// Targeted nodes in Kubernetes clusters.
	TargetPools []string `protobuf:"bytes,7,rep,name=targetPools,proto3" json:"targetPools,omitempty"`
	// Type of the role.
	RoleType RoleTypeV2 `protobuf:"varint,6,opt,name=roleType,proto3,enum=spec.RoleTypeV2" json:"roleType,omitempty"`
	// Additional settings for the role.
	Settings      *RoleV2_Settings `protobuf:"bytes,8,opt,name=settings,proto3" json:"settings,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RoleV2) Reset() {
	*x = RoleV2{}
	mi := &file_spec_manifestv2_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RoleV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoleV2) ProtoMessage() {}

func (x *RoleV2) ProtoReflect() protoreflect.Message {
	mi := &file_spec_manifestv2_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoleV2.ProtoReflect.Descriptor instead.
func (*RoleV2) Descriptor() ([]byte, []int) {
	return file_spec_manifestv2_proto_rawDescGZIP(), []int{11}
}

func (x *RoleV2) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RoleV2) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *RoleV2) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *RoleV2) GetTargetPort() int32 {
	if x != nil {
		return x.TargetPort
	}
	return 0
}

func (x *RoleV2) GetTargetPools() []string {
	if x != nil {
		return x.TargetPools
	}
	return nil
}

func (x *RoleV2) GetRoleType() RoleTypeV2 {
	if x != nil {
		return x.RoleType
	}
	return RoleTypeV2_ApiServer_V2
}

func (x *RoleV2) GetSettings() *RoleV2_Settings {
	if x != nil {
		return x.Settings
	}
	return nil
}

type TaskEventV2 struct {
	state       protoimpl.MessageState `protogen:"open.v1"`
	Id          string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Timestamp   *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Event       EventV2                `protobuf:"varint,3,opt,name=event,proto3,enum=spec.EventV2" json:"event,omitempty"`
	Task        *TaskV2                `protobuf:"bytes,4,opt,name=task,proto3" json:"task,omitempty"`
	Description string                 `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	OnError     *RetryV2               `protobuf:"bytes,7,opt,name=onError,proto3" json:"onError,omitempty"`
	// Pipeline stages of the task through which it has to pass
	// to be considered as done.
	Pipeline []*Stage `protobuf:"bytes,8,rep,name=pipeline,proto3" json:"pipeline,omitempty"`
	// Index into the currently to be worked on pipeline stage.
	CurrentStage  uint32 `protobuf:"varint,9,opt,name=currentStage,proto3" json:"currentStage,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskEventV2) Reset() {
	*x = TaskEventV2{}
	mi := &file_spec_manifestv2_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskEventV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskEventV2) ProtoMessage() {}

func (x *TaskEventV2) ProtoReflect() protoreflect.Message {
	mi := &file_spec_manifestv2_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskEventV2.ProtoReflect.Descriptor instead.
func (*TaskEventV2) Descriptor() ([]byte, []int) {
	return file_spec_manifestv2_proto_rawDescGZIP(), []int{12}
}

func (x *TaskEventV2) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TaskEventV2) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *TaskEventV2) GetEvent() EventV2 {
	if x != nil {
		return x.Event
	}
	return EventV2_UNKNOWN_V2
}

func (x *TaskEventV2) GetTask() *TaskV2 {
	if x != nil {
		return x.Task
	}
	return nil
}

func (x *TaskEventV2) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *TaskEventV2) GetOnError() *RetryV2 {
	if x != nil {
		return x.OnError
	}
	return nil
}

func (x *TaskEventV2) GetPipeline() []*Stage {
	if x != nil {
		return x.Pipeline
	}
	return nil
}

func (x *TaskEventV2) GetCurrentStage() uint32 {
	if x != nil {
		return x.CurrentStage
	}
	return 0
}

type RetryV2 struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Do:
	//
	//	*RetryV2_Repeat_
	//	*RetryV2_Rollback_
	Do            isRetryV2_Do `protobuf_oneof:"Do"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RetryV2) Reset() {
	*x = RetryV2{}
	mi := &file_spec_manifestv2_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RetryV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetryV2) ProtoMessage() {}

func (x *RetryV2) ProtoReflect() protoreflect.Message {
	mi := &file_spec_manifestv2_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetryV2.ProtoReflect.Descriptor instead.
func (*RetryV2) Descriptor() ([]byte, []int) {
	return file_spec_manifestv2_proto_rawDescGZIP(), []int{13}
}

func (x *RetryV2) GetDo() isRetryV2_Do {
	if x != nil {
		return x.Do
	}
	return nil
}

func (x *RetryV2) GetRepeat() *RetryV2_Repeat {
	if x != nil {
		if x, ok := x.Do.(*RetryV2_Repeat_); ok {
			return x.Repeat
		}
	}
	return nil
}

func (x *RetryV2) GetRollback() *RetryV2_Rollback {
	if x != nil {
		if x, ok := x.Do.(*RetryV2_Rollback_); ok {
			return x.Rollback
		}
	}
	return nil
}

type isRetryV2_Do interface {
	isRetryV2_Do()
}

type RetryV2_Repeat_ struct {
	Repeat *RetryV2_Repeat `protobuf:"bytes,3,opt,name=repeat,proto3,oneof"`
}

type RetryV2_Rollback_ struct {
	Rollback *RetryV2_Rollback `protobuf:"bytes,4,opt,name=rollback,proto3,oneof"`
}

func (*RetryV2_Repeat_) isRetryV2_Do() {}

func (*RetryV2_Rollback_) isRetryV2_Do() {}

type CreateV2 struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Clusters      *ClustersV2            `protobuf:"bytes,1,opt,name=clusters,proto3" json:"clusters,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateV2) Reset() {
	*x = CreateV2{}
	mi := &file_spec_manifestv2_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateV2) ProtoMessage() {}

func (x *CreateV2) ProtoReflect() protoreflect.Message {
	mi := &file_spec_manifestv2_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateV2.ProtoReflect.Descriptor instead.
func (*CreateV2) Descriptor() ([]byte, []int) {
	return file_spec_manifestv2_proto_rawDescGZIP(), []int{14}
}

func (x *CreateV2) GetClusters() *ClustersV2 {
	if x != nil {
		return x.Clusters
	}
	return nil
}

type UpdateV2 struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateV2) Reset() {
	*x = UpdateV2{}
	mi := &file_spec_manifestv2_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateV2) ProtoMessage() {}

func (x *UpdateV2) ProtoReflect() protoreflect.Message {
	mi := &file_spec_manifestv2_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateV2.ProtoReflect.Descriptor instead.
func (*UpdateV2) Descriptor() ([]byte, []int) {
	return file_spec_manifestv2_proto_rawDescGZIP(), []int{15}
}

type DeleteV2 struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Op:
	//
	//	*DeleteV2_Clusters_
	Op            isDeleteV2_Op `protobuf_oneof:"Op"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteV2) Reset() {
	*x = DeleteV2{}
	mi := &file_spec_manifestv2_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteV2) ProtoMessage() {}

func (x *DeleteV2) ProtoReflect() protoreflect.Message {
	mi := &file_spec_manifestv2_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteV2.ProtoReflect.Descriptor instead.
func (*DeleteV2) Descriptor() ([]byte, []int) {
	return file_spec_manifestv2_proto_rawDescGZIP(), []int{16}
}

func (x *DeleteV2) GetOp() isDeleteV2_Op {
	if x != nil {
		return x.Op
	}
	return nil
}

func (x *DeleteV2) GetClusters() *DeleteV2_Clusters {
	if x != nil {
		if x, ok := x.Op.(*DeleteV2_Clusters_); ok {
			return x.Clusters
		}
	}
	return nil
}

type isDeleteV2_Op interface {
	isDeleteV2_Op()
}

type DeleteV2_Clusters_ struct {
	Clusters *DeleteV2_Clusters `protobuf:"bytes,1,opt,name=clusters,proto3,oneof"`
}

func (*DeleteV2_Clusters_) isDeleteV2_Op() {}

type TaskV2 struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Do:
	//
	//	*TaskV2_Create
	//	*TaskV2_Update
	//	*TaskV2_Delete
	Do            isTaskV2_Do `protobuf_oneof:"Do"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskV2) Reset() {
	*x = TaskV2{}
	mi := &file_spec_manifestv2_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskV2) ProtoMessage() {}

func (x *TaskV2) ProtoReflect() protoreflect.Message {
	mi := &file_spec_manifestv2_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskV2.ProtoReflect.Descriptor instead.
func (*TaskV2) Descriptor() ([]byte, []int) {
	return file_spec_manifestv2_proto_rawDescGZIP(), []int{17}
}

func (x *TaskV2) GetDo() isTaskV2_Do {
	if x != nil {
		return x.Do
	}
	return nil
}

func (x *TaskV2) GetCreate() *CreateV2 {
	if x != nil {
		if x, ok := x.Do.(*TaskV2_Create); ok {
			return x.Create
		}
	}
	return nil
}

func (x *TaskV2) GetUpdate() *UpdateV2 {
	if x != nil {
		if x, ok := x.Do.(*TaskV2_Update); ok {
			return x.Update
		}
	}
	return nil
}

func (x *TaskV2) GetDelete() *DeleteV2 {
	if x != nil {
		if x, ok := x.Do.(*TaskV2_Delete); ok {
			return x.Delete
		}
	}
	return nil
}

type isTaskV2_Do interface {
	isTaskV2_Do()
}

type TaskV2_Create struct {
	Create *CreateV2 `protobuf:"bytes,1,opt,name=create,proto3,oneof"`
}

type TaskV2_Update struct {
	Update *UpdateV2 `protobuf:"bytes,2,opt,name=update,proto3,oneof"`
}

type TaskV2_Delete struct {
	Delete *DeleteV2 `protobuf:"bytes,3,opt,name=delete,proto3,oneof"`
}

func (*TaskV2_Create) isTaskV2_Do() {}

func (*TaskV2_Update) isTaskV2_Do() {}

func (*TaskV2_Delete) isTaskV2_Do() {}

// The message that is used for the Message Queue.
type Work struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The task to be worked on.
	Task *TaskV2 `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
	// What exactly should be done with the task.
	Passes        []*anypb.Any `protobuf:"bytes,2,rep,name=passes,proto3" json:"passes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Work) Reset() {
	*x = Work{}
	mi := &file_spec_manifestv2_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Work) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Work) ProtoMessage() {}

func (x *Work) ProtoReflect() protoreflect.Message {
	mi := &file_spec_manifestv2_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Work.ProtoReflect.Descriptor instead.
func (*Work) Descriptor() ([]byte, []int) {
	return file_spec_manifestv2_proto_rawDescGZIP(), []int{18}
}

func (x *Work) GetTask() *TaskV2 {
	if x != nil {
		return x.Task
	}
	return nil
}

func (x *Work) GetPasses() []*anypb.Any {
	if x != nil {
		return x.Passes
	}
	return nil
}

type TaskResult struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Result:
	//
	//	*TaskResult_None_
	Result        isTaskResult_Result `protobuf_oneof:"Result"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskResult) Reset() {
	*x = TaskResult{}
	mi := &file_spec_manifestv2_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskResult) ProtoMessage() {}

func (x *TaskResult) ProtoReflect() protoreflect.Message {
	mi := &file_spec_manifestv2_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskResult.ProtoReflect.Descriptor instead.
func (*TaskResult) Descriptor() ([]byte, []int) {
	return file_spec_manifestv2_proto_rawDescGZIP(), []int{19}
}

func (x *TaskResult) GetResult() isTaskResult_Result {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *TaskResult) GetNone() *TaskResult_None {
	if x != nil {
		if x, ok := x.Result.(*TaskResult_None_); ok {
			return x.None
		}
	}
	return nil
}

type isTaskResult_Result interface {
	isTaskResult_Result()
}

type TaskResult_None_ struct {
	None *TaskResult_None `protobuf:"bytes,1,opt,name=none,proto3,oneof"`
}

func (*TaskResult_None_) isTaskResult_Result() {}

type RoleV2_Settings struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	ProxyProtocol  bool                   `protobuf:"varint,1,opt,name=proxyProtocol,proto3" json:"proxyProtocol,omitempty"`
	StickySessions bool                   `protobuf:"varint,2,opt,name=stickySessions,proto3" json:"stickySessions,omitempty"`
	// required port for the envoy admin interface,
	// on change will issue restart of the envoy proxy.
	EnvoyAdminPort int32 `protobuf:"varint,3,opt,name=envoy_admin_port,json=envoyAdminPort,proto3" json:"envoy_admin_port,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *RoleV2_Settings) Reset() {
	*x = RoleV2_Settings{}
	mi := &file_spec_manifestv2_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RoleV2_Settings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoleV2_Settings) ProtoMessage() {}

func (x *RoleV2_Settings) ProtoReflect() protoreflect.Message {
	mi := &file_spec_manifestv2_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoleV2_Settings.ProtoReflect.Descriptor instead.
func (*RoleV2_Settings) Descriptor() ([]byte, []int) {
	return file_spec_manifestv2_proto_rawDescGZIP(), []int{11, 0}
}

func (x *RoleV2_Settings) GetProxyProtocol() bool {
	if x != nil {
		return x.ProxyProtocol
	}
	return false
}

func (x *RoleV2_Settings) GetStickySessions() bool {
	if x != nil {
		return x.StickySessions
	}
	return false
}

func (x *RoleV2_Settings) GetEnvoyAdminPort() int32 {
	if x != nil {
		return x.EnvoyAdminPort
	}
	return 0
}

type RetryV2_Repeat struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Kind  RetryV2_Repeat_Kind    `protobuf:"varint,1,opt,name=kind,proto3,enum=spec.RetryV2_Repeat_Kind" json:"kind,omitempty"`
	// currentTick specifies the current number of ticks.
	// A tick is an regular interval at which manifests are being checked.
	// to check the Tick timeout see: manager/internal/service/watchers.go
	CurrentTick uint32 `protobuf:"varint,2,opt,name=currentTick,proto3" json:"currentTick,omitempty"`
	// stopAfter specifies the maximum number of ticks, after reaching this value the manifest will be rescheduled
	// for the last time before giving up.
	StopAfter uint32 `protobuf:"varint,3,opt,name=stopAfter,proto3" json:"stopAfter,omitempty"`
	// retryAfter specifies the number of ticks to wait before rescheduling the manifest again.
	// this value will be set to the value of currentTick after it is updated.
	RetryAfter    uint32 `protobuf:"varint,4,opt,name=retryAfter,proto3" json:"retryAfter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RetryV2_Repeat) Reset() {
	*x = RetryV2_Repeat{}
	mi := &file_spec_manifestv2_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RetryV2_Repeat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetryV2_Repeat) ProtoMessage() {}

func (x *RetryV2_Repeat) ProtoReflect() protoreflect.Message {
	mi := &file_spec_manifestv2_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetryV2_Repeat.ProtoReflect.Descriptor instead.
func (*RetryV2_Repeat) Descriptor() ([]byte, []int) {
	return file_spec_manifestv2_proto_rawDescGZIP(), []int{13, 0}
}

func (x *RetryV2_Repeat) GetKind() RetryV2_Repeat_Kind {
	if x != nil {
		return x.Kind
	}
	return RetryV2_Repeat_ENDLESS
}

func (x *RetryV2_Repeat) GetCurrentTick() uint32 {
	if x != nil {
		return x.CurrentTick
	}
	return 0
}

func (x *RetryV2_Repeat) GetStopAfter() uint32 {
	if x != nil {
		return x.StopAfter
	}
	return 0
}

func (x *RetryV2_Repeat) GetRetryAfter() uint32 {
	if x != nil {
		return x.RetryAfter
	}
	return 0
}

type RetryV2_Rollback struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tasks         []*TaskEventV2         `protobuf:"bytes,1,rep,name=tasks,proto3" json:"tasks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RetryV2_Rollback) Reset() {
	*x = RetryV2_Rollback{}
	mi := &file_spec_manifestv2_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RetryV2_Rollback) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetryV2_Rollback) ProtoMessage() {}

func (x *RetryV2_Rollback) ProtoReflect() protoreflect.Message {
	mi := &file_spec_manifestv2_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetryV2_Rollback.ProtoReflect.Descriptor instead.
func (*RetryV2_Rollback) Descriptor() ([]byte, []int) {
	return file_spec_manifestv2_proto_rawDescGZIP(), []int{13, 1}
}

func (x *RetryV2_Rollback) GetTasks() []*TaskEventV2 {
	if x != nil {
		return x.Tasks
	}
	return nil
}

type DeleteV2_Clusters struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Clusters      *ClustersV2            `protobuf:"bytes,1,opt,name=clusters,proto3" json:"clusters,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteV2_Clusters) Reset() {
	*x = DeleteV2_Clusters{}
	mi := &file_spec_manifestv2_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteV2_Clusters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteV2_Clusters) ProtoMessage() {}

func (x *DeleteV2_Clusters) ProtoReflect() protoreflect.Message {
	mi := &file_spec_manifestv2_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteV2_Clusters.ProtoReflect.Descriptor instead.
func (*DeleteV2_Clusters) Descriptor() ([]byte, []int) {
	return file_spec_manifestv2_proto_rawDescGZIP(), []int{16, 0}
}

func (x *DeleteV2_Clusters) GetClusters() *ClustersV2 {
	if x != nil {
		return x.Clusters
	}
	return nil
}

// None specifies that nothing should be done as a result of
// processing a task other than acknowledging that the task
// was processed, and thus moving to next task, if any.
type TaskResult_None struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskResult_None) Reset() {
	*x = TaskResult_None{}
	mi := &file_spec_manifestv2_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskResult_None) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskResult_None) ProtoMessage() {}

func (x *TaskResult_None) ProtoReflect() protoreflect.Message {
	mi := &file_spec_manifestv2_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskResult_None.ProtoReflect.Descriptor instead.
func (*TaskResult_None) Descriptor() ([]byte, []int) {
	return file_spec_manifestv2_proto_rawDescGZIP(), []int{19, 0}
}

var File_spec_manifestv2_proto protoreflect.FileDescriptor

const file_spec_manifestv2_proto_rawDesc = "" +
	"\n" +
	"\x15spec/manifestv2.proto\x12\x04spec\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x19google/protobuf/any.proto\x1a\x13spec/nodepool.proto\x1a\x0espec/dns.proto\x1a\x0fspec/pass.proto\"\xa6\x02\n" +
	"\bConfigV2\x12\x18\n" +
	"\aversion\x18\x01 \x01(\x04R\aversion\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x121\n" +
	"\x06k8sCtx\x18\x03 \x01(\v2\x19.spec.KubernetesContextV2R\x06k8sCtx\x12,\n" +
	"\bmanifest\x18\x04 \x01(\v2\x10.spec.ManifestV2R\bmanifest\x128\n" +
	"\bclusters\x18\x05 \x03(\v2\x1c.spec.ConfigV2.ClustersEntryR\bclusters\x1aQ\n" +
	"\rClustersEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12*\n" +
	"\x05value\x18\x02 \x01(\v2\x14.spec.ClusterStateV2R\x05value:\x028\x01\"\xd4\x01\n" +
	"\n" +
	"ManifestV2\x12\x10\n" +
	"\x03raw\x18\x01 \x01(\tR\x03raw\x12\x1a\n" +
	"\bchecksum\x18\x02 \x01(\fR\bchecksum\x120\n" +
	"\x13lastAppliedChecksum\x18\x03 \x01(\fR\x13lastAppliedChecksum\x12,\n" +
	"\x05state\x18\x04 \x01(\x0e2\x16.spec.ManifestV2.StateR\x05state\"8\n" +
	"\x05State\x12\v\n" +
	"\aPending\x10\x00\x12\r\n" +
	"\tScheduled\x10\x01\x12\b\n" +
	"\x04Done\x10\x02\x12\t\n" +
	"\x05Error\x10\x03\"\x8b\x01\n" +
	"\x0eClusterStateV2\x12*\n" +
	"\acurrent\x18\x01 \x01(\v2\x10.spec.ClustersV2R\acurrent\x12&\n" +
	"\x05state\x18\x04 \x01(\v2\x10.spec.WorkflowV2R\x05state\x12%\n" +
	"\x04task\x18\x05 \x01(\v2\x11.spec.TaskEventV2R\x04task\"o\n" +
	"\n" +
	"ClustersV2\x12$\n" +
	"\x03k8s\x18\x01 \x01(\v2\x12.spec.K8sclusterV2R\x03k8s\x12;\n" +
	"\rloadBalancers\x18\x02 \x01(\v2\x15.spec.LoadBalancersV2R\rloadBalancers\"@\n" +
	"\x0fLoadBalancersV2\x12-\n" +
	"\bclusters\x18\x01 \x03(\v2\x11.spec.LBclusterV2R\bclusters\"G\n" +
	"\x13KubernetesContextV2\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x1c\n" +
	"\tnamespace\x18\x02 \x01(\tR\tnamespace\"\xa4\x01\n" +
	"\n" +
	"WorkflowV2\x12/\n" +
	"\x06status\x18\x02 \x01(\x0e2\x17.spec.WorkflowV2.StatusR\x06status\x12 \n" +
	"\vdescription\x18\x03 \x01(\tR\vdescription\"C\n" +
	"\x06Status\x12\b\n" +
	"\x04DONE\x10\x00\x12\t\n" +
	"\x05ERROR\x10\x01\x12\x0f\n" +
	"\vIN_PROGRESS\x10\x02\x12\x13\n" +
	"\x0fWAIT_FOR_PICKUP\x10\x03\"\xe8\x01\n" +
	"\fK8sclusterV2\x125\n" +
	"\vclusterInfo\x18\x01 \x01(\v2\x13.spec.ClusterInfoV2R\vclusterInfo\x12\x18\n" +
	"\anetwork\x18\x02 \x01(\tR\anetwork\x12\x1e\n" +
	"\n" +
	"kubeconfig\x18\x03 \x01(\tR\n" +
	"kubeconfig\x12\x1e\n" +
	"\n" +
	"kubernetes\x18\x04 \x01(\tR\n" +
	"kubernetes\x12G\n" +
	"\x11installationProxy\x18\x05 \x01(\v2\x19.spec.InstallationProxyV2R\x11installationProxy\"\xd1\x01\n" +
	"\vLBclusterV2\x125\n" +
	"\vclusterInfo\x18\x01 \x01(\v2\x13.spec.ClusterInfoV2R\vclusterInfo\x12\"\n" +
	"\x05roles\x18\x02 \x03(\v2\f.spec.RoleV2R\x05roles\x12\x1b\n" +
	"\x03dns\x18\x03 \x01(\v2\t.spec.DNSR\x03dns\x12 \n" +
	"\vtargetedK8s\x18\x04 \x01(\tR\vtargetedK8s\x12(\n" +
	"\x0fusedApiEndpoint\x18\x05 \x01(\bR\x0fusedApiEndpoint\"e\n" +
	"\rClusterInfoV2\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x12\n" +
	"\x04hash\x18\x02 \x01(\tR\x04hash\x12,\n" +
	"\tnodePools\x18\x05 \x03(\v2\x0e.spec.NodePoolR\tnodePools\"_\n" +
	"\x13InstallationProxyV2\x12\x12\n" +
	"\x04mode\x18\x01 \x01(\tR\x04mode\x12\x1a\n" +
	"\bendpoint\x18\x02 \x01(\tR\bendpoint\x12\x18\n" +
	"\anoProxy\x18\x03 \x01(\tR\anoProxy\"\xf4\x02\n" +
	"\x06RoleV2\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x1a\n" +
	"\bprotocol\x18\x02 \x01(\tR\bprotocol\x12\x12\n" +
	"\x04port\x18\x03 \x01(\x05R\x04port\x12\x1e\n" +
	"\n" +
	"targetPort\x18\x04 \x01(\x05R\n" +
	"targetPort\x12 \n" +
	"\vtargetPools\x18\a \x03(\tR\vtargetPools\x12,\n" +
	"\broleType\x18\x06 \x01(\x0e2\x10.spec.RoleTypeV2R\broleType\x121\n" +
	"\bsettings\x18\b \x01(\v2\x15.spec.RoleV2.SettingsR\bsettings\x1a\x82\x01\n" +
	"\bSettings\x12$\n" +
	"\rproxyProtocol\x18\x01 \x01(\bR\rproxyProtocol\x12&\n" +
	"\x0estickySessions\x18\x02 \x01(\bR\x0estickySessions\x12(\n" +
	"\x10envoy_admin_port\x18\x03 \x01(\x05R\x0eenvoyAdminPort\"\xb6\x02\n" +
	"\vTaskEventV2\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x128\n" +
	"\ttimestamp\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp\x12#\n" +
	"\x05event\x18\x03 \x01(\x0e2\r.spec.EventV2R\x05event\x12 \n" +
	"\x04task\x18\x04 \x01(\v2\f.spec.TaskV2R\x04task\x12 \n" +
	"\vdescription\x18\x05 \x01(\tR\vdescription\x12'\n" +
	"\aonError\x18\a \x01(\v2\r.spec.RetryV2R\aonError\x12'\n" +
	"\bpipeline\x18\b \x03(\v2\v.spec.StageR\bpipeline\x12\"\n" +
	"\fcurrentStage\x18\t \x01(\rR\fcurrentStage\"\xea\x02\n" +
	"\aRetryV2\x12.\n" +
	"\x06repeat\x18\x03 \x01(\v2\x14.spec.RetryV2.RepeatH\x00R\x06repeat\x124\n" +
	"\brollback\x18\x04 \x01(\v2\x16.spec.RetryV2.RollbackH\x00R\brollback\x1a\xbd\x01\n" +
	"\x06Repeat\x12-\n" +
	"\x04kind\x18\x01 \x01(\x0e2\x19.spec.RetryV2.Repeat.KindR\x04kind\x12 \n" +
	"\vcurrentTick\x18\x02 \x01(\rR\vcurrentTick\x12\x1c\n" +
	"\tstopAfter\x18\x03 \x01(\rR\tstopAfter\x12\x1e\n" +
	"\n" +
	"retryAfter\x18\x04 \x01(\rR\n" +
	"retryAfter\"$\n" +
	"\x04Kind\x12\v\n" +
	"\aENDLESS\x10\x00\x12\x0f\n" +
	"\vEXPONENTIAL\x10\x01\x1a3\n" +
	"\bRollback\x12'\n" +
	"\x05tasks\x18\x01 \x03(\v2\x11.spec.TaskEventV2R\x05tasksB\x04\n" +
	"\x02Do\"8\n" +
	"\bCreateV2\x12,\n" +
	"\bclusters\x18\x01 \x01(\v2\x10.spec.ClustersV2R\bclusters\"\n" +
	"\n" +
	"\bUpdateV2\"\x81\x01\n" +
	"\bDeleteV2\x125\n" +
	"\bclusters\x18\x01 \x01(\v2\x17.spec.DeleteV2.ClustersH\x00R\bclusters\x1a8\n" +
	"\bClusters\x12,\n" +
	"\bclusters\x18\x01 \x01(\v2\x10.spec.ClustersV2R\bclustersB\x04\n" +
	"\x02Op\"\x8c\x01\n" +
	"\x06TaskV2\x12(\n" +
	"\x06create\x18\x01 \x01(\v2\x0e.spec.CreateV2H\x00R\x06create\x12(\n" +
	"\x06update\x18\x02 \x01(\v2\x0e.spec.UpdateV2H\x00R\x06update\x12(\n" +
	"\x06delete\x18\x03 \x01(\v2\x0e.spec.DeleteV2H\x00R\x06deleteB\x04\n" +
	"\x02Do\"V\n" +
	"\x04Work\x12 \n" +
	"\x04task\x18\x01 \x01(\v2\f.spec.TaskV2R\x04task\x12,\n" +
	"\x06passes\x18\x02 \x03(\v2\x14.google.protobuf.AnyR\x06passes\"K\n" +
	"\n" +
	"TaskResult\x12+\n" +
	"\x04none\x18\x01 \x01(\v2\x15.spec.TaskResult.NoneH\x00R\x04none\x1a\x06\n" +
	"\x04NoneB\b\n" +
	"\x06Result*.\n" +
	"\n" +
	"RoleTypeV2\x12\x10\n" +
	"\fApiServer_V2\x10\x00\x12\x0e\n" +
	"\n" +
	"Ingress_V2\x10\x01*F\n" +
	"\aEventV2\x12\x0e\n" +
	"\n" +
	"UNKNOWN_V2\x10\x00\x12\r\n" +
	"\tCREATE_V2\x10\x01\x12\r\n" +
	"\tUPDATE_V2\x10\x02\x12\r\n" +
	"\tDELETE_V2\x10\x03B)Z'github.com/berops/claudie/proto/pb/specb\x06proto3"

var (
	file_spec_manifestv2_proto_rawDescOnce sync.Once
	file_spec_manifestv2_proto_rawDescData []byte
)

func file_spec_manifestv2_proto_rawDescGZIP() []byte {
	file_spec_manifestv2_proto_rawDescOnce.Do(func() {
		file_spec_manifestv2_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_spec_manifestv2_proto_rawDesc), len(file_spec_manifestv2_proto_rawDesc)))
	})
	return file_spec_manifestv2_proto_rawDescData
}

var file_spec_manifestv2_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_spec_manifestv2_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_spec_manifestv2_proto_goTypes = []any{
	(RoleTypeV2)(0),               // 0: spec.RoleTypeV2
	(EventV2)(0),                  // 1: spec.EventV2
	(ManifestV2_State)(0),         // 2: spec.ManifestV2.State
	(WorkflowV2_Status)(0),        // 3: spec.WorkflowV2.Status
	(RetryV2_Repeat_Kind)(0),      // 4: spec.RetryV2.Repeat.Kind
	(*ConfigV2)(nil),              // 5: spec.ConfigV2
	(*ManifestV2)(nil),            // 6: spec.ManifestV2
	(*ClusterStateV2)(nil),        // 7: spec.ClusterStateV2
	(*ClustersV2)(nil),            // 8: spec.ClustersV2
	(*LoadBalancersV2)(nil),       // 9: spec.LoadBalancersV2
	(*KubernetesContextV2)(nil),   // 10: spec.KubernetesContextV2
	(*WorkflowV2)(nil),            // 11: spec.WorkflowV2
	(*K8SclusterV2)(nil),          // 12: spec.K8sclusterV2
	(*LBclusterV2)(nil),           // 13: spec.LBclusterV2
	(*ClusterInfoV2)(nil),         // 14: spec.ClusterInfoV2
	(*InstallationProxyV2)(nil),   // 15: spec.InstallationProxyV2
	(*RoleV2)(nil),                // 16: spec.RoleV2
	(*TaskEventV2)(nil),           // 17: spec.TaskEventV2
	(*RetryV2)(nil),               // 18: spec.RetryV2
	(*CreateV2)(nil),              // 19: spec.CreateV2
	(*UpdateV2)(nil),              // 20: spec.UpdateV2
	(*DeleteV2)(nil),              // 21: spec.DeleteV2
	(*TaskV2)(nil),                // 22: spec.TaskV2
	(*Work)(nil),                  // 23: spec.Work
	(*TaskResult)(nil),            // 24: spec.TaskResult
	nil,                           // 25: spec.ConfigV2.ClustersEntry
	(*RoleV2_Settings)(nil),       // 26: spec.RoleV2.Settings
	(*RetryV2_Repeat)(nil),        // 27: spec.RetryV2.Repeat
	(*RetryV2_Rollback)(nil),      // 28: spec.RetryV2.Rollback
	(*DeleteV2_Clusters)(nil),     // 29: spec.DeleteV2.Clusters
	(*TaskResult_None)(nil),       // 30: spec.TaskResult.None
	(*DNS)(nil),                   // 31: spec.DNS
	(*NodePool)(nil),              // 32: spec.NodePool
	(*timestamppb.Timestamp)(nil), // 33: google.protobuf.Timestamp
	(*Stage)(nil),                 // 34: spec.Stage
	(*anypb.Any)(nil),             // 35: google.protobuf.Any
}
var file_spec_manifestv2_proto_depIdxs = []int32{
	10, // 0: spec.ConfigV2.k8sCtx:type_name -> spec.KubernetesContextV2
	6,  // 1: spec.ConfigV2.manifest:type_name -> spec.ManifestV2
	25, // 2: spec.ConfigV2.clusters:type_name -> spec.ConfigV2.ClustersEntry
	2,  // 3: spec.ManifestV2.state:type_name -> spec.ManifestV2.State
	8,  // 4: spec.ClusterStateV2.current:type_name -> spec.ClustersV2
	11, // 5: spec.ClusterStateV2.state:type_name -> spec.WorkflowV2
	17, // 6: spec.ClusterStateV2.task:type_name -> spec.TaskEventV2
	12, // 7: spec.ClustersV2.k8s:type_name -> spec.K8sclusterV2
	9,  // 8: spec.ClustersV2.loadBalancers:type_name -> spec.LoadBalancersV2
	13, // 9: spec.LoadBalancersV2.clusters:type_name -> spec.LBclusterV2
	3,  // 10: spec.WorkflowV2.status:type_name -> spec.WorkflowV2.Status
	14, // 11: spec.K8sclusterV2.clusterInfo:type_name -> spec.ClusterInfoV2
	15, // 12: spec.K8sclusterV2.installationProxy:type_name -> spec.InstallationProxyV2
	14, // 13: spec.LBclusterV2.clusterInfo:type_name -> spec.ClusterInfoV2
	16, // 14: spec.LBclusterV2.roles:type_name -> spec.RoleV2
	31, // 15: spec.LBclusterV2.dns:type_name -> spec.DNS
	32, // 16: spec.ClusterInfoV2.nodePools:type_name -> spec.NodePool
	0,  // 17: spec.RoleV2.roleType:type_name -> spec.RoleTypeV2
	26, // 18: spec.RoleV2.settings:type_name -> spec.RoleV2.Settings
	33, // 19: spec.TaskEventV2.timestamp:type_name -> google.protobuf.Timestamp
	1,  // 20: spec.TaskEventV2.event:type_name -> spec.EventV2
	22, // 21: spec.TaskEventV2.task:type_name -> spec.TaskV2
	18, // 22: spec.TaskEventV2.onError:type_name -> spec.RetryV2
	34, // 23: spec.TaskEventV2.pipeline:type_name -> spec.Stage
	27, // 24: spec.RetryV2.repeat:type_name -> spec.RetryV2.Repeat
	28, // 25: spec.RetryV2.rollback:type_name -> spec.RetryV2.Rollback
	8,  // 26: spec.CreateV2.clusters:type_name -> spec.ClustersV2
	29, // 27: spec.DeleteV2.clusters:type_name -> spec.DeleteV2.Clusters
	19, // 28: spec.TaskV2.create:type_name -> spec.CreateV2
	20, // 29: spec.TaskV2.update:type_name -> spec.UpdateV2
	21, // 30: spec.TaskV2.delete:type_name -> spec.DeleteV2
	22, // 31: spec.Work.task:type_name -> spec.TaskV2
	35, // 32: spec.Work.passes:type_name -> google.protobuf.Any
	30, // 33: spec.TaskResult.none:type_name -> spec.TaskResult.None
	7,  // 34: spec.ConfigV2.ClustersEntry.value:type_name -> spec.ClusterStateV2
	4,  // 35: spec.RetryV2.Repeat.kind:type_name -> spec.RetryV2.Repeat.Kind
	17, // 36: spec.RetryV2.Rollback.tasks:type_name -> spec.TaskEventV2
	8,  // 37: spec.DeleteV2.Clusters.clusters:type_name -> spec.ClustersV2
	38, // [38:38] is the sub-list for method output_type
	38, // [38:38] is the sub-list for method input_type
	38, // [38:38] is the sub-list for extension type_name
	38, // [38:38] is the sub-list for extension extendee
	0,  // [0:38] is the sub-list for field type_name
}

func init() { file_spec_manifestv2_proto_init() }
func file_spec_manifestv2_proto_init() {
	if File_spec_manifestv2_proto != nil {
		return
	}
	file_spec_nodepool_proto_init()
	file_spec_dns_proto_init()
	file_spec_pass_proto_init()
	file_spec_manifestv2_proto_msgTypes[13].OneofWrappers = []any{
		(*RetryV2_Repeat_)(nil),
		(*RetryV2_Rollback_)(nil),
	}
	file_spec_manifestv2_proto_msgTypes[16].OneofWrappers = []any{
		(*DeleteV2_Clusters_)(nil),
	}
	file_spec_manifestv2_proto_msgTypes[17].OneofWrappers = []any{
		(*TaskV2_Create)(nil),
		(*TaskV2_Update)(nil),
		(*TaskV2_Delete)(nil),
	}
	file_spec_manifestv2_proto_msgTypes[19].OneofWrappers = []any{
		(*TaskResult_None_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_spec_manifestv2_proto_rawDesc), len(file_spec_manifestv2_proto_rawDesc)),
			NumEnums:      5,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_spec_manifestv2_proto_goTypes,
		DependencyIndexes: file_spec_manifestv2_proto_depIdxs,
		EnumInfos:         file_spec_manifestv2_proto_enumTypes,
		MessageInfos:      file_spec_manifestv2_proto_msgTypes,
	}.Build()
	File_spec_manifestv2_proto = out.File
	file_spec_manifestv2_proto_goTypes = nil
	file_spec_manifestv2_proto_depIdxs = nil
}
