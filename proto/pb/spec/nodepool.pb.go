// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        v5.29.5
// source: spec/nodepool.proto

package spec

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// NodeType specifies the type of the node.
type NodeType int32

const (
	// Worker/Compute node.
	NodeType_worker NodeType = 0
	// Master/Control node.
	NodeType_master NodeType = 1
	// Master node, which is also an API endpoint.
	NodeType_apiEndpoint NodeType = 2
)

// Enum value maps for NodeType.
var (
	NodeType_name = map[int32]string{
		0: "worker",
		1: "master",
		2: "apiEndpoint",
	}
	NodeType_value = map[string]int32{
		"worker":      0,
		"master":      1,
		"apiEndpoint": 2,
	}
)

func (x NodeType) Enum() *NodeType {
	p := new(NodeType)
	*p = x
	return p
}

func (x NodeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NodeType) Descriptor() protoreflect.EnumDescriptor {
	return file_spec_nodepool_proto_enumTypes[0].Descriptor()
}

func (NodeType) Type() protoreflect.EnumType {
	return &file_spec_nodepool_proto_enumTypes[0]
}

func (x NodeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NodeType.Descriptor instead.
func (NodeType) EnumDescriptor() ([]byte, []int) {
	return file_spec_nodepool_proto_rawDescGZIP(), []int{0}
}

// Enum used to replace data not present in static nodepools.
type StaticNodepoolInfo int32

const (
	StaticNodepoolInfo_STATIC_PROVIDER StaticNodepoolInfo = 0
	StaticNodepoolInfo_STATIC_REGION   StaticNodepoolInfo = 1
	StaticNodepoolInfo_STATIC_ZONE     StaticNodepoolInfo = 2
)

// Enum value maps for StaticNodepoolInfo.
var (
	StaticNodepoolInfo_name = map[int32]string{
		0: "STATIC_PROVIDER",
		1: "STATIC_REGION",
		2: "STATIC_ZONE",
	}
	StaticNodepoolInfo_value = map[string]int32{
		"STATIC_PROVIDER": 0,
		"STATIC_REGION":   1,
		"STATIC_ZONE":     2,
	}
)

func (x StaticNodepoolInfo) Enum() *StaticNodepoolInfo {
	p := new(StaticNodepoolInfo)
	*p = x
	return p
}

func (x StaticNodepoolInfo) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StaticNodepoolInfo) Descriptor() protoreflect.EnumDescriptor {
	return file_spec_nodepool_proto_enumTypes[1].Descriptor()
}

func (StaticNodepoolInfo) Type() protoreflect.EnumType {
	return &file_spec_nodepool_proto_enumTypes[1]
}

func (x StaticNodepoolInfo) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StaticNodepoolInfo.Descriptor instead.
func (StaticNodepoolInfo) EnumDescriptor() ([]byte, []int) {
	return file_spec_nodepool_proto_rawDescGZIP(), []int{1}
}

// NodePool represents a single node pool used in cluster.
type NodePool struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Dynamic or Static node pool info.
	//
	// Types that are valid to be assigned to Type:
	//
	//	*NodePool_DynamicNodePool
	//	*NodePool_StaticNodePool
	Type isNodePool_Type `protobuf_oneof:"Type"`
	// Name of static node pool.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Array of nodes in this node pool.
	Nodes []*Node `protobuf:"bytes,4,rep,name=nodes,proto3" json:"nodes,omitempty"`
	// Flag to differentiate between control and compute nodes.
	IsControl bool `protobuf:"varint,5,opt,name=isControl,proto3" json:"isControl,omitempty"`
	// User defined labels.
	Labels map[string]string `protobuf:"bytes,6,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// User defined taints.
	Taints []*Taint `protobuf:"bytes,7,rep,name=taints,proto3" json:"taints,omitempty"`
	// User definded annotations.
	Annotations   map[string]string `protobuf:"bytes,8,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NodePool) Reset() {
	*x = NodePool{}
	mi := &file_spec_nodepool_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NodePool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodePool) ProtoMessage() {}

func (x *NodePool) ProtoReflect() protoreflect.Message {
	mi := &file_spec_nodepool_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodePool.ProtoReflect.Descriptor instead.
func (*NodePool) Descriptor() ([]byte, []int) {
	return file_spec_nodepool_proto_rawDescGZIP(), []int{0}
}

func (x *NodePool) GetType() isNodePool_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *NodePool) GetDynamicNodePool() *DynamicNodePool {
	if x != nil {
		if x, ok := x.Type.(*NodePool_DynamicNodePool); ok {
			return x.DynamicNodePool
		}
	}
	return nil
}

func (x *NodePool) GetStaticNodePool() *StaticNodePool {
	if x != nil {
		if x, ok := x.Type.(*NodePool_StaticNodePool); ok {
			return x.StaticNodePool
		}
	}
	return nil
}

func (x *NodePool) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NodePool) GetNodes() []*Node {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *NodePool) GetIsControl() bool {
	if x != nil {
		return x.IsControl
	}
	return false
}

func (x *NodePool) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *NodePool) GetTaints() []*Taint {
	if x != nil {
		return x.Taints
	}
	return nil
}

func (x *NodePool) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

type isNodePool_Type interface {
	isNodePool_Type()
}

type NodePool_DynamicNodePool struct {
	DynamicNodePool *DynamicNodePool `protobuf:"bytes,1,opt,name=dynamicNodePool,proto3,oneof"`
}

type NodePool_StaticNodePool struct {
	StaticNodePool *StaticNodePool `protobuf:"bytes,2,opt,name=staticNodePool,proto3,oneof"`
}

func (*NodePool_DynamicNodePool) isNodePool_Type() {}

func (*NodePool_StaticNodePool) isNodePool_Type() {}

// Taint defines a custom defined taint for the node pools.
type Taint struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Taint key.
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Taint value.
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	// Taint effect.
	Effect        string `protobuf:"bytes,3,opt,name=effect,proto3" json:"effect,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Taint) Reset() {
	*x = Taint{}
	mi := &file_spec_nodepool_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Taint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Taint) ProtoMessage() {}

func (x *Taint) ProtoReflect() protoreflect.Message {
	mi := &file_spec_nodepool_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Taint.ProtoReflect.Descriptor instead.
func (*Taint) Descriptor() ([]byte, []int) {
	return file_spec_nodepool_proto_rawDescGZIP(), []int{1}
}

func (x *Taint) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Taint) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Taint) GetEffect() string {
	if x != nil {
		return x.Effect
	}
	return ""
}

// Node represents a single node from the node pool.
type Node struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of the node.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Private IP of the node in the VPN.
	Private string `protobuf:"bytes,2,opt,name=private,proto3" json:"private,omitempty"`
	// Public IP of the node.
	Public string `protobuf:"bytes,3,opt,name=public,proto3" json:"public,omitempty"`
	// Type of the node.
	NodeType NodeType `protobuf:"varint,4,opt,name=nodeType,proto3,enum=spec.NodeType" json:"nodeType,omitempty"`
	// Username of a user with root privileges. Also used in SSH connection
	Username      string `protobuf:"bytes,5,opt,name=username,proto3" json:"username,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Node) Reset() {
	*x = Node{}
	mi := &file_spec_nodepool_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node) ProtoMessage() {}

func (x *Node) ProtoReflect() protoreflect.Message {
	mi := &file_spec_nodepool_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node.ProtoReflect.Descriptor instead.
func (*Node) Descriptor() ([]byte, []int) {
	return file_spec_nodepool_proto_rawDescGZIP(), []int{2}
}

func (x *Node) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Node) GetPrivate() string {
	if x != nil {
		return x.Private
	}
	return ""
}

func (x *Node) GetPublic() string {
	if x != nil {
		return x.Public
	}
	return ""
}

func (x *Node) GetNodeType() NodeType {
	if x != nil {
		return x.NodeType
	}
	return NodeType_worker
}

func (x *Node) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

// DynamicNodePool represents dynamic node pool used in cluster.
type DynamicNodePool struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Machine type of the nodes.
	ServerType string `protobuf:"bytes,1,opt,name=serverType,proto3" json:"serverType,omitempty"`
	// OS image of the nodes.
	Image string `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
	// Storage disk size of the nodes.
	StorageDiskSize int32 `protobuf:"varint,3,opt,name=storageDiskSize,proto3" json:"storageDiskSize,omitempty"`
	// Geograhical region of the nodes.
	Region string `protobuf:"bytes,4,opt,name=region,proto3" json:"region,omitempty"`
	// Datacentre zone for the nodes.
	Zone string `protobuf:"bytes,5,opt,name=zone,proto3" json:"zone,omitempty"`
	// Number of the nodes in the node pool.
	Count int32 `protobuf:"varint,6,opt,name=count,proto3" json:"count,omitempty"`
	// Provider configuarion of the node pool.
	Provider *Provider `protobuf:"bytes,7,opt,name=provider,proto3" json:"provider,omitempty"`
	// Autoscaler configuration. (optional)
	AutoscalerConfig *AutoscalerConf `protobuf:"bytes,9,opt,name=autoscalerConfig,proto3" json:"autoscalerConfig,omitempty"`
	// MachineSpec configuration. (optional)
	MachineSpec *MachineSpec `protobuf:"bytes,10,opt,name=machineSpec,proto3" json:"machineSpec,omitempty"`
	PublicKey   string       `protobuf:"bytes,11,opt,name=publicKey,proto3" json:"publicKey,omitempty"`
	PrivateKey  string       `protobuf:"bytes,12,opt,name=privateKey,proto3" json:"privateKey,omitempty"`
	// Cidr initially empty, will be set once the exising state
	// is transferred.
	Cidr string `protobuf:"bytes,14,opt,name=cidr,proto3" json:"cidr,omitempty"`
	// Network Name with public IPs (required for Openstack)
	ExternalNetworkName string `protobuf:"bytes,15,opt,name=externalNetworkName,proto3" json:"externalNetworkName,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *DynamicNodePool) Reset() {
	*x = DynamicNodePool{}
	mi := &file_spec_nodepool_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DynamicNodePool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DynamicNodePool) ProtoMessage() {}

func (x *DynamicNodePool) ProtoReflect() protoreflect.Message {
	mi := &file_spec_nodepool_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DynamicNodePool.ProtoReflect.Descriptor instead.
func (*DynamicNodePool) Descriptor() ([]byte, []int) {
	return file_spec_nodepool_proto_rawDescGZIP(), []int{3}
}

func (x *DynamicNodePool) GetServerType() string {
	if x != nil {
		return x.ServerType
	}
	return ""
}

func (x *DynamicNodePool) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *DynamicNodePool) GetStorageDiskSize() int32 {
	if x != nil {
		return x.StorageDiskSize
	}
	return 0
}

func (x *DynamicNodePool) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *DynamicNodePool) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *DynamicNodePool) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *DynamicNodePool) GetProvider() *Provider {
	if x != nil {
		return x.Provider
	}
	return nil
}

func (x *DynamicNodePool) GetAutoscalerConfig() *AutoscalerConf {
	if x != nil {
		return x.AutoscalerConfig
	}
	return nil
}

func (x *DynamicNodePool) GetMachineSpec() *MachineSpec {
	if x != nil {
		return x.MachineSpec
	}
	return nil
}

func (x *DynamicNodePool) GetPublicKey() string {
	if x != nil {
		return x.PublicKey
	}
	return ""
}

func (x *DynamicNodePool) GetPrivateKey() string {
	if x != nil {
		return x.PrivateKey
	}
	return ""
}

func (x *DynamicNodePool) GetCidr() string {
	if x != nil {
		return x.Cidr
	}
	return ""
}

func (x *DynamicNodePool) GetExternalNetworkName() string {
	if x != nil {
		return x.ExternalNetworkName
	}
	return ""
}

// MachineSpec further specifies the requested server type.
type MachineSpec struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CpuCount      int32                  `protobuf:"varint,1,opt,name=cpuCount,proto3" json:"cpuCount,omitempty"`
	Memory        int32                  `protobuf:"varint,2,opt,name=memory,proto3" json:"memory,omitempty"`
	NvidiaGpu     int32                  `protobuf:"varint,3,opt,name=nvidiaGpu,proto3" json:"nvidiaGpu,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MachineSpec) Reset() {
	*x = MachineSpec{}
	mi := &file_spec_nodepool_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MachineSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineSpec) ProtoMessage() {}

func (x *MachineSpec) ProtoReflect() protoreflect.Message {
	mi := &file_spec_nodepool_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineSpec.ProtoReflect.Descriptor instead.
func (*MachineSpec) Descriptor() ([]byte, []int) {
	return file_spec_nodepool_proto_rawDescGZIP(), []int{4}
}

func (x *MachineSpec) GetCpuCount() int32 {
	if x != nil {
		return x.CpuCount
	}
	return 0
}

func (x *MachineSpec) GetMemory() int32 {
	if x != nil {
		return x.Memory
	}
	return 0
}

func (x *MachineSpec) GetNvidiaGpu() int32 {
	if x != nil {
		return x.NvidiaGpu
	}
	return 0
}

// Autoscaler configuration on per node pool basis.
type AutoscalerConf struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Minimum number of nodes in node pool.
	Min int32 `protobuf:"varint,1,opt,name=min,proto3" json:"min,omitempty"`
	// Maximum number of nodes in node pool.
	Max           int32 `protobuf:"varint,2,opt,name=max,proto3" json:"max,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AutoscalerConf) Reset() {
	*x = AutoscalerConf{}
	mi := &file_spec_nodepool_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AutoscalerConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoscalerConf) ProtoMessage() {}

func (x *AutoscalerConf) ProtoReflect() protoreflect.Message {
	mi := &file_spec_nodepool_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoscalerConf.ProtoReflect.Descriptor instead.
func (*AutoscalerConf) Descriptor() ([]byte, []int) {
	return file_spec_nodepool_proto_rawDescGZIP(), []int{5}
}

func (x *AutoscalerConf) GetMin() int32 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *AutoscalerConf) GetMax() int32 {
	if x != nil {
		return x.Max
	}
	return 0
}

// StaticNodePool represents static node pool used in cluster.
type StaticNodePool struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Map of keys for each static node in [<Node Endpoint>]<Key> form.
	NodeKeys      map[string]string `protobuf:"bytes,1,rep,name=nodeKeys,proto3" json:"nodeKeys,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StaticNodePool) Reset() {
	*x = StaticNodePool{}
	mi := &file_spec_nodepool_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StaticNodePool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StaticNodePool) ProtoMessage() {}

func (x *StaticNodePool) ProtoReflect() protoreflect.Message {
	mi := &file_spec_nodepool_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StaticNodePool.ProtoReflect.Descriptor instead.
func (*StaticNodePool) Descriptor() ([]byte, []int) {
	return file_spec_nodepool_proto_rawDescGZIP(), []int{6}
}

func (x *StaticNodePool) GetNodeKeys() map[string]string {
	if x != nil {
		return x.NodeKeys
	}
	return nil
}

var File_spec_nodepool_proto protoreflect.FileDescriptor

const file_spec_nodepool_proto_rawDesc = "" +
	"\n" +
	"\x13spec/nodepool.proto\x12\x04spec\x1a\x13spec/provider.proto\"\x80\x04\n" +
	"\bNodePool\x12A\n" +
	"\x0fdynamicNodePool\x18\x01 \x01(\v2\x15.spec.DynamicNodePoolH\x00R\x0fdynamicNodePool\x12>\n" +
	"\x0estaticNodePool\x18\x02 \x01(\v2\x14.spec.StaticNodePoolH\x00R\x0estaticNodePool\x12\x12\n" +
	"\x04name\x18\x03 \x01(\tR\x04name\x12 \n" +
	"\x05nodes\x18\x04 \x03(\v2\n" +
	".spec.NodeR\x05nodes\x12\x1c\n" +
	"\tisControl\x18\x05 \x01(\bR\tisControl\x122\n" +
	"\x06labels\x18\x06 \x03(\v2\x1a.spec.NodePool.LabelsEntryR\x06labels\x12#\n" +
	"\x06taints\x18\a \x03(\v2\v.spec.TaintR\x06taints\x12A\n" +
	"\vannotations\x18\b \x03(\v2\x1f.spec.NodePool.AnnotationsEntryR\vannotations\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a>\n" +
	"\x10AnnotationsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01B\x06\n" +
	"\x04Type\"G\n" +
	"\x05Taint\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value\x12\x16\n" +
	"\x06effect\x18\x03 \x01(\tR\x06effect\"\x94\x01\n" +
	"\x04Node\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x18\n" +
	"\aprivate\x18\x02 \x01(\tR\aprivate\x12\x16\n" +
	"\x06public\x18\x03 \x01(\tR\x06public\x12*\n" +
	"\bnodeType\x18\x04 \x01(\x0e2\x0e.spec.NodeTypeR\bnodeType\x12\x1a\n" +
	"\busername\x18\x05 \x01(\tR\busername\"\xda\x03\n" +
	"\x0fDynamicNodePool\x12\x1e\n" +
	"\n" +
	"serverType\x18\x01 \x01(\tR\n" +
	"serverType\x12\x14\n" +
	"\x05image\x18\x02 \x01(\tR\x05image\x12(\n" +
	"\x0fstorageDiskSize\x18\x03 \x01(\x05R\x0fstorageDiskSize\x12\x16\n" +
	"\x06region\x18\x04 \x01(\tR\x06region\x12\x12\n" +
	"\x04zone\x18\x05 \x01(\tR\x04zone\x12\x14\n" +
	"\x05count\x18\x06 \x01(\x05R\x05count\x12*\n" +
	"\bprovider\x18\a \x01(\v2\x0e.spec.ProviderR\bprovider\x12@\n" +
	"\x10autoscalerConfig\x18\t \x01(\v2\x14.spec.AutoscalerConfR\x10autoscalerConfig\x123\n" +
	"\vmachineSpec\x18\n" +
	" \x01(\v2\x11.spec.MachineSpecR\vmachineSpec\x12\x1c\n" +
	"\tpublicKey\x18\v \x01(\tR\tpublicKey\x12\x1e\n" +
	"\n" +
	"privateKey\x18\f \x01(\tR\n" +
	"privateKey\x12\x12\n" +
	"\x04cidr\x18\x0e \x01(\tR\x04cidr\x120\n" +
	"\x13externalNetworkName\x18\x0f \x01(\tR\x13externalNetworkName\"_\n" +
	"\vMachineSpec\x12\x1a\n" +
	"\bcpuCount\x18\x01 \x01(\x05R\bcpuCount\x12\x16\n" +
	"\x06memory\x18\x02 \x01(\x05R\x06memory\x12\x1c\n" +
	"\tnvidiaGpu\x18\x03 \x01(\x05R\tnvidiaGpu\"4\n" +
	"\x0eAutoscalerConf\x12\x10\n" +
	"\x03min\x18\x01 \x01(\x05R\x03min\x12\x10\n" +
	"\x03max\x18\x02 \x01(\x05R\x03max\"\x8d\x01\n" +
	"\x0eStaticNodePool\x12>\n" +
	"\bnodeKeys\x18\x01 \x03(\v2\".spec.StaticNodePool.NodeKeysEntryR\bnodeKeys\x1a;\n" +
	"\rNodeKeysEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01*3\n" +
	"\bNodeType\x12\n" +
	"\n" +
	"\x06worker\x10\x00\x12\n" +
	"\n" +
	"\x06master\x10\x01\x12\x0f\n" +
	"\vapiEndpoint\x10\x02*M\n" +
	"\x12StaticNodepoolInfo\x12\x13\n" +
	"\x0fSTATIC_PROVIDER\x10\x00\x12\x11\n" +
	"\rSTATIC_REGION\x10\x01\x12\x0f\n" +
	"\vSTATIC_ZONE\x10\x02B)Z'github.com/berops/claudie/proto/pb/specb\x06proto3"

var (
	file_spec_nodepool_proto_rawDescOnce sync.Once
	file_spec_nodepool_proto_rawDescData []byte
)

func file_spec_nodepool_proto_rawDescGZIP() []byte {
	file_spec_nodepool_proto_rawDescOnce.Do(func() {
		file_spec_nodepool_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_spec_nodepool_proto_rawDesc), len(file_spec_nodepool_proto_rawDesc)))
	})
	return file_spec_nodepool_proto_rawDescData
}

var file_spec_nodepool_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_spec_nodepool_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_spec_nodepool_proto_goTypes = []any{
	(NodeType)(0),           // 0: spec.NodeType
	(StaticNodepoolInfo)(0), // 1: spec.StaticNodepoolInfo
	(*NodePool)(nil),        // 2: spec.NodePool
	(*Taint)(nil),           // 3: spec.Taint
	(*Node)(nil),            // 4: spec.Node
	(*DynamicNodePool)(nil), // 5: spec.DynamicNodePool
	(*MachineSpec)(nil),     // 6: spec.MachineSpec
	(*AutoscalerConf)(nil),  // 7: spec.AutoscalerConf
	(*StaticNodePool)(nil),  // 8: spec.StaticNodePool
	nil,                     // 9: spec.NodePool.LabelsEntry
	nil,                     // 10: spec.NodePool.AnnotationsEntry
	nil,                     // 11: spec.StaticNodePool.NodeKeysEntry
	(*Provider)(nil),        // 12: spec.Provider
}
var file_spec_nodepool_proto_depIdxs = []int32{
	5,  // 0: spec.NodePool.dynamicNodePool:type_name -> spec.DynamicNodePool
	8,  // 1: spec.NodePool.staticNodePool:type_name -> spec.StaticNodePool
	4,  // 2: spec.NodePool.nodes:type_name -> spec.Node
	9,  // 3: spec.NodePool.labels:type_name -> spec.NodePool.LabelsEntry
	3,  // 4: spec.NodePool.taints:type_name -> spec.Taint
	10, // 5: spec.NodePool.annotations:type_name -> spec.NodePool.AnnotationsEntry
	0,  // 6: spec.Node.nodeType:type_name -> spec.NodeType
	12, // 7: spec.DynamicNodePool.provider:type_name -> spec.Provider
	7,  // 8: spec.DynamicNodePool.autoscalerConfig:type_name -> spec.AutoscalerConf
	6,  // 9: spec.DynamicNodePool.machineSpec:type_name -> spec.MachineSpec
	11, // 10: spec.StaticNodePool.nodeKeys:type_name -> spec.StaticNodePool.NodeKeysEntry
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_spec_nodepool_proto_init() }
func file_spec_nodepool_proto_init() {
	if File_spec_nodepool_proto != nil {
		return
	}
	file_spec_provider_proto_init()
	file_spec_nodepool_proto_msgTypes[0].OneofWrappers = []any{
		(*NodePool_DynamicNodePool)(nil),
		(*NodePool_StaticNodePool)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_spec_nodepool_proto_rawDesc), len(file_spec_nodepool_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_spec_nodepool_proto_goTypes,
		DependencyIndexes: file_spec_nodepool_proto_depIdxs,
		EnumInfos:         file_spec_nodepool_proto_enumTypes,
		MessageInfos:      file_spec_nodepool_proto_msgTypes,
	}.Build()
	File_spec_nodepool_proto = out.File
	file_spec_nodepool_proto_goTypes = nil
	file_spec_nodepool_proto_depIdxs = nil
}
