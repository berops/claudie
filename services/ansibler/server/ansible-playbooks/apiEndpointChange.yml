---
- hosts: control
  gather_facts: false
  become: true
  tasks:
    - name: stop kubelet
      service:
        name: "{{ item }}"
        state: stopped
      loop:
        - "kubelet"

    - name: remove old apiserver.crt, apiserver.key
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - "/etc/kubernetes/pki/apiserver.crt"
        - "/etc/kubernetes/pki/apiserver.key"

    - name: Filter out relevant files containing configurations for current node
      # this setup can change in future kubeone versions.
      # https://github.com/kubermatic/kubeone/blob/66d3281919890e7c43148d2f72140acdff168e73/pkg/scripts/kubeadm.go#L42
      shell: |
        grep -r -lE "{{inventory_hostname}}" /root/kubeone/cfg/*full* | xargs grep -lE "InitConfiguration|ClusterConfiguration"
      register: grep_results

    - name: fail if no file was found
      fail:
        msg: "No file with {{inventory_hostname}} was found"
      when: grep_results.stdout_lines == []

    - name: Select file
      set_fact:
        file: "{{grep_results.stdout_lines[0]}}"

    - name: Chosen file with cluster configuration
      ansible.builtin.debug:
        var: file

    - name: replace endpoint
      replace:
        path: "{{file}}"
        regexp: "^controlPlaneEndpoint:.*{{ OldEndpoint }}"
        replace: "controlPlaneEndpoint: {{ NewEndpoint }}"

    - name: generate new certs
      shell: |
        kubeadm init phase certs apiserver --config {{file}}

    - name: remove old /etc/kubernetes/*.conf
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - "/etc/kubernetes/admin.conf"
        - "/etc/kubernetes/controller-manager.conf"
        - "/etc/kubernetes/kubelet.conf"
        - "/etc/kubernetes/scheduler.conf"

    - name: generate kubeconfig
      ansible.builtin.shell: |
        kubeadm init phase kubeconfig all --config {{file}}

    - name: upload config map
      ansible.builtin.shell: |
        kubeadm init phase upload-config all --config {{file}}

    - name: restart containerd and kubelet
      ansible.builtin.service:
        name: "{{ item }}"
        state: restarted
      register: serviceDetails
      until: serviceDetails.status.ActiveState == "active"
      retries: 10
      delay: 20
      loop:
        - "kubelet"
        - "containerd"

    - name: restart controller
      shell: "crictl pods | grep kube-controller-manager | awk '{print $1}' | xargs -I {} sh -c 'crictl stopp {} && crictl rmp {}'"

    - name: restart scheduler
      shell: "crictl pods | grep kube-scheduler | awk '{print $1}' | xargs -I {} sh -c 'crictl stopp {} && crictl rmp {}'"

- hosts: compute
  gather_facts: true
  become: true
  tasks:
    - name: stop kubelet
      ansible.builtin.service:
        name: kubelet
        state: stopped

    - name: replace endpoint
      replace:
        path: "/etc/kubernetes/kubelet.conf"
        regexp: "{{ OldEndpoint}}"
        replace: "{{ NewEndpoint}}"

    - name: restart containerd and kubelet
      ansible.builtin.service:
        name: "{{ item }}"
        state: restarted
      register: serviceDetails
      until: serviceDetails.status.ActiveState == "active"
      retries: 10
      delay: 20
      loop:
        - "kubelet"
        - "containerd"
